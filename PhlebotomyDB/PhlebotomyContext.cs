// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace PhlebotomyDB
{
    public partial class PhlebotomyContext : DbContext
    {
        public PhlebotomyContext()
        {
        }

        public PhlebotomyContext(DbContextOptions<PhlebotomyContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<FloatExpense> FloatExpenses { get; set; }
        public virtual DbSet<FloatStop> FloatStops { get; set; }
        public virtual DbSet<Group> Groups { get; set; }
        public virtual DbSet<Lead> Leads { get; set; }
        public virtual DbSet<Phlebotomist> Phlebotomists { get; set; }
        public virtual DbSet<PhlebotomistAssignment> PhlebotomistAssignments { get; set; }
        public virtual DbSet<PhlebotomistAssignmentLine> PhlebotomistAssignmentLines { get; set; }
        public virtual DbSet<PhlebotomistAssignmentLog> PhlebotomistAssignmentLogs { get; set; }
        public virtual DbSet<PhlebotomistExpense> PhlebotomistExpenses { get; set; }
        public virtual DbSet<PhlebotomistLead> PhlebotomistLeads { get; set; }
        public virtual DbSet<PhlebotomistsOptions> PhlebotomistsOptions { get; set; }
        public virtual DbSet<ProofOfToll> ProofOfTolls { get; set; }

        

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=bssoft2b;Initial Catalog=Phlebotomy;User ID=sa;Password=Xamarin@1964");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Account>(entity =>
            {
                entity.Property(e => e.AccountID).ValueGeneratedNever();

                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.City).IsUnicode(false);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.NPI).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.Suite).IsUnicode(false);

                entity.Property(e => e.Telephone).IsUnicode(false);

                entity.Property(e => e.Zip).IsUnicode(false);

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.Accounts)
                    .HasForeignKey(d => d.GroupID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Accounts__GroupI__38996AB5");
            });

            modelBuilder.Entity<FloatExpense>(entity =>
            {
                entity.Property(e => e.AssignedTo)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Note).IsUnicode(false);
            });

            modelBuilder.Entity<FloatStop>(entity =>
            {
                entity.Property(e => e.AssignedTo).IsUnicode(false);

                entity.Property(e => e.Note).IsUnicode(false);

                entity.Property(e => e.StopAddress).IsUnicode(false);

                entity.Property(e => e.StopName).IsUnicode(false);

                entity.Property(e => e.StopState).IsUnicode(false);

                entity.Property(e => e.StopSuite).IsUnicode(false);

                entity.Property(e => e.StopTelephone1).IsUnicode(false);

                entity.Property(e => e.StopTelephone2).IsUnicode(false);

                entity.Property(e => e.StopZip).IsUnicode(false);

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.FloatStops)
                    .HasForeignKey(d => d.AccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__FloatStop__Accou__5CD6CB2B");
            });

            modelBuilder.Entity<Group>(entity =>
            {
                entity.Property(e => e.GroupID).ValueGeneratedNever();

                entity.Property(e => e.Manager).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.SalesRep).IsUnicode(false);

                entity.Property(e => e.Telephone).IsUnicode(false);
            });

            modelBuilder.Entity<Lead>(entity =>
            {
                entity.Property(e => e.LeadName).IsUnicode(false);
            });

            modelBuilder.Entity<Phlebotomist>(entity =>
            {
                entity.HasKey(e => e.EmployeeID)
                    .HasName("PK__Phleboto__7AD04FF1D0317470");

                entity.Property(e => e.EmployeeID).IsUnicode(false);

                entity.Property(e => e.Address1)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Address2)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.City)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.FirstName).IsUnicode(false);

                entity.Property(e => e.LastName).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.Telephone).IsUnicode(false);

                entity.Property(e => e.Zip)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");
            });

            modelBuilder.Entity<PhlebotomistAssignment>(entity =>
            {
                entity.Property(e => e.Confirmed).HasDefaultValueSql("((0))");

                entity.Property(e => e.EmployeeID).IsUnicode(false);

                entity.Property(e => e.LastModifiedBy).IsUnicode(false);

                entity.Property(e => e.LastModifiedDate).HasDefaultValueSql("(sysdatetime())");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.PhlebotomistAssignments)
                    .HasForeignKey(d => d.EmployeeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Phlebotom__Emplo__17036CC0");
            });

            modelBuilder.Entity<PhlebotomistAssignmentLine>(entity =>
            {
                entity.HasOne(d => d.Account)
                    .WithMany(p => p.PhlebotomistAssignmentLines)
                    .HasForeignKey(d => d.AccountID)
                    .HasConstraintName("FK__Phlebotom__Accou__398D8EEE");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.PhlebotomistAssignmentLines)
                    .HasForeignKey(d => d.GroupID)
                    .HasConstraintName("FK__Phlebotom__Group__3A81B327");

                entity.HasOne(d => d.PhlebotomistAssignment)
                    .WithMany(p => p.PhlebotomistAssignmentLines)
                    .HasForeignKey(d => d.PhlebotomistAssignmentID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Phlebotom__Phleb__30F848ED");
            });

            modelBuilder.Entity<PhlebotomistAssignmentLog>(entity =>
            {
                entity.Property(e => e.EmployeeID).IsUnicode(false);

                entity.Property(e => e.LastModifiedBy).IsUnicode(false);
            });

            modelBuilder.Entity<PhlebotomistExpense>(entity =>
            {
                entity.Property(e => e.EmployeeID).IsUnicode(false);

                entity.Property(e => e.Notes).IsUnicode(false);

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.PhlebotomistExpenses)
                    .HasForeignKey(d => d.AccountID)
                    .HasConstraintName("FK__Phlebotom__Accou__2B0A656D");

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.PhlebotomistExpenses)
                    .HasForeignKey(d => d.EmployeeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Phlebotom__Emplo__2A164134");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.PhlebotomistExpenses)
                    .HasForeignKey(d => d.GroupID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Phlebotom__Group__2BFE89A6");
            });

            modelBuilder.Entity<PhlebotomistLead>(entity =>
            {
                entity.Property(e => e.EmployeeID).IsUnicode(false);

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.PhlebotomistLeads)
                    .HasForeignKey(d => d.EmployeeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Phlebotom__Emplo__17F790F9");

                entity.HasOne(d => d.Lead)
                    .WithMany(p => p.PhlebotomistLeads)
                    .HasForeignKey(d => d.LeadID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Phlebotom__LeadI__286302EC");
            });

            modelBuilder.Entity<PhlebotomistsOptions>(entity =>
            {
                entity.HasKey(e =>e.EmployeeID);
            });

            modelBuilder.Entity<ProofOfToll>(entity =>
            {
                entity.HasKey(e => e.FloatExpenseID)
                    .HasName("PK__ProofOfT__08091F2D9E8A3F7C");

                entity.Property(e => e.FloatExpenseID).ValueGeneratedNever();

                entity.HasOne(d => d.FloatExpense)
                    .WithOne(p => p.ProofOfToll)
                    .HasForeignKey<ProofOfToll>(d => d.FloatExpenseID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ProofOfTo__Float__70DDC3D8");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}