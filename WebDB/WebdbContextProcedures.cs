// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore;
using Microsoft.Data.SqlClient;
using System;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using WebDB;

namespace WebDB
{
    public partial class WebdbContextProcedures
    {
        private readonly WebdbContext _context;

        public WebdbContextProcedures(WebdbContext context)
        {
            _context = context;
        }

        public async Task<sp_complete_dx_requestResult[]> sp_complete_dx_requestAsync(string accession, string file, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "accession",
                    Size = 50,
                    Value = accession ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "file",
                    Size = -1,
                    Value = file ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_complete_dx_requestResult>("EXEC @returnValue = [dbo].[sp_complete_dx_request] @accession, @file", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_generate_county_fileResult[]> sp_generate_county_fileAsync(string county, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "county",
                    Size = 50,
                    Value = county ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_generate_county_fileResult>("EXEC @returnValue = [dbo].[sp_generate_county_file] @county", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_coding_invoicesResult[]> sp_get_coding_invoicesAsync(string invoice, int? PageSize, string status, string btype, string user, DateTime? frmdate, DateTime? todate, string pbtype, int? page, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "invoice",
                    Size = 50,
                    Value = invoice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 50,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "btype",
                    Size = 10,
                    Value = btype ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user",
                    Size = 50,
                    Value = user ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "frmdate",
                    Value = frmdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "todate",
                    Value = todate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "pbtype",
                    Size = 10,
                    Value = pbtype ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "page",
                    Value = page ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_coding_invoicesResult>("EXEC @returnValue = [dbo].[sp_get_coding_invoices] @invoice, @PageSize, @status, @btype, @user, @frmdate, @todate, @pbtype, @page", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_coding_invoices_bkup10AprResult[]> sp_get_coding_invoices_bkup10AprAsync(string invoice, string status, string btype, string user, DateTime? frmdate, DateTime? todate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "invoice",
                    Size = 50,
                    Value = invoice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 50,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "btype",
                    Size = 10,
                    Value = btype ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user",
                    Size = 50,
                    Value = user ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "frmdate",
                    Value = frmdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "todate",
                    Value = todate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_coding_invoices_bkup10AprResult>("EXEC @returnValue = [dbo].[sp_get_coding_invoices_bkup10Apr] @invoice, @status, @btype, @user, @frmdate, @todate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_coding_invoices_v1Result[]> sp_get_coding_invoices_v1Async(string invoice, int? PageSize, string status, string btype, string user, DateTime? frmdate, DateTime? todate, string pbtype, int? page, string SortOrder, OutputParameter<long?> allrecords, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterallrecords = new SqlParameter
            {
                ParameterName = "allrecords",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.BigInt,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "invoice",
                    Size = 50,
                    Value = invoice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 50,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "btype",
                    Size = 10,
                    Value = btype ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user",
                    Size = 50,
                    Value = user ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "frmdate",
                    Value = frmdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "todate",
                    Value = todate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "pbtype",
                    Size = 10,
                    Value = pbtype ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "page",
                    Value = page ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SortOrder",
                    Size = 128,
                    Value = SortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterallrecords,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_coding_invoices_v1Result>("EXEC @returnValue = [dbo].[sp_get_coding_invoices_v1] @invoice, @PageSize, @status, @btype, @user, @frmdate, @todate, @pbtype, @page, @SortOrder, @allrecords OUTPUT", sqlParameters, cancellationToken);

            allrecords.SetValue(parameterallrecords.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_count_coding_invoicesResult[]> sp_get_count_coding_invoicesAsync(string invoice, string status, string btype, string user, DateTime? frmdate, DateTime? todate, string pbtype, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "invoice",
                    Size = 50,
                    Value = invoice ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Size = 5,
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "btype",
                    Size = 10,
                    Value = btype ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "user",
                    Size = 50,
                    Value = user ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "frmdate",
                    Value = frmdate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "todate",
                    Value = todate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "pbtype",
                    Size = 10,
                    Value = pbtype ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_get_count_coding_invoicesResult>("EXEC @returnValue = [dbo].[sp_get_count_coding_invoices] @invoice, @status, @btype, @user, @frmdate, @todate, @pbtype", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_refresh_commissions_newplanAsync(string salesrep, DateTime? date1, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "salesrep",
                    Size = 50,
                    Value = salesrep ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "date1",
                    Value = date1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_refresh_commissions_newplan] @salesrep, @date1", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<spWriteStringToFileResult[]> spWriteStringToFileAsync(byte[] String, string Path, string Filename, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "String",
                    Size = -1,
                    Value = String ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarBinary,
                },
                new SqlParameter
                {
                    ParameterName = "Path",
                    Size = 255,
                    Value = Path ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Filename",
                    Size = 100,
                    Value = Filename ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spWriteStringToFileResult>("EXEC @returnValue = [dbo].[spWriteStringToFile] @String, @Path, @Filename", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
