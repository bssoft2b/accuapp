// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace WebDB
{
    public partial class WebdbContext : DbContext
    {
        public WebdbContext()
        {
        }

        public WebdbContext(DbContextOptions<WebdbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Accession> Accessions { get; set; }
        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<AccountNote> AccountNotes { get; set; }
        public virtual DbSet<AccountRequest> AccountRequests { get; set; }
        public virtual DbSet<AddOn> AddOns { get; set; }
        public virtual DbSet<AspNetClaimType> AspNetClaimTypes { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserRole> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUserToken> AspNetUserTokens { get; set; }
        public virtual DbSet<AspNetUsers_bkp_10232019> AspNetUsers_bkp_10232019s { get; set; }
        public virtual DbSet<Attachment> Attachments { get; set; }
        public virtual DbSet<BillAction> BillActions { get; set; }
        public virtual DbSet<BillLog> BillLogs { get; set; }
        public virtual DbSet<BillType> BillTypes { get; set; }
        public virtual DbSet<BillingGroup> BillingGroups { get; set; }
        public virtual DbSet<BlogItem> BlogItems { get; set; }
        public virtual DbSet<CDCsUpdated> CDCsUpdateds { get; set; }
        public virtual DbSet<CacheKey> CacheKeys { get; set; }
        public virtual DbSet<CacheReport> CacheReports { get; set; }
        public virtual DbSet<Charge> Charges { get; set; }
        public virtual DbSet<Coding_Activity> Coding_Activities { get; set; }
        public virtual DbSet<Coding_Code> Coding_Codes { get; set; }
        public virtual DbSet<Coding_Invoice> Coding_Invoices { get; set; }
        public virtual DbSet<Commission> Commissions { get; set; }
        public virtual DbSet<Commissions_Old> Commissions_Olds { get; set; }
        public virtual DbSet<Commissions_bkup_Apr20> Commissions_bkup_Apr20s { get; set; }
        public virtual DbSet<CommonDiagnosisCode> CommonDiagnosisCodes { get; set; }
        public virtual DbSet<County> Counties { get; set; }
        public virtual DbSet<CriticalResult> CriticalResults { get; set; }
        public virtual DbSet<CriticalResultLine> CriticalResultLines { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<DiagnosisCode> DiagnosisCodes { get; set; }
        public virtual DbSet<DiagnosisHistoryLine> DiagnosisHistoryLines { get; set; }
        public virtual DbSet<DiagnosisLine> DiagnosisLines { get; set; }
        public virtual DbSet<DiagnosisRequest> DiagnosisRequests { get; set; }
        public virtual DbSet<DiagnosisRequestLine> DiagnosisRequestLines { get; set; }
        public virtual DbSet<DiagnosisRequests_20Feb2020> DiagnosisRequests_20Feb2020s { get; set; }
        public virtual DbSet<DiagnosisRequests_Bkup20Apr> DiagnosisRequests_Bkup20Aprs { get; set; }
        public virtual DbSet<DispatchContact> DispatchContacts { get; set; }
        public virtual DbSet<DispatchStatus> DispatchStatuses { get; set; }
        public virtual DbSet<DispatchTask> DispatchTasks { get; set; }
        public virtual DbSet<EmrNote> EmrNotes { get; set; }
        public virtual DbSet<EmrRequest> EmrRequests { get; set; }
        public virtual DbSet<Finance> Finances { get; set; }
        public virtual DbSet<Finances_Old> Finances_Olds { get; set; }
        public virtual DbSet<Finances_bkup_Apr20> Finances_bkup_Apr20s { get; set; }
        public virtual DbSet<Group> Groups { get; set; }
        public virtual DbSet<HardwareAccount> HardwareAccounts { get; set; }
        public virtual DbSet<HardwareItem> HardwareItems { get; set; }
        public virtual DbSet<HardwareRequest> HardwareRequests { get; set; }
        public virtual DbSet<HardwareRequestAccount> HardwareRequestAccounts { get; set; }
        public virtual DbSet<HardwareRequestNote> HardwareRequestNotes { get; set; }
        public virtual DbSet<HardwareReturnCondition> HardwareReturnConditions { get; set; }
        public virtual DbSet<HardwareType> HardwareTypes { get; set; }
        public virtual DbSet<Insurance> Insurances { get; set; }
        public virtual DbSet<Invoice> Invoices { get; set; }
        public virtual DbSet<InvoiceRequest> InvoiceRequests { get; set; }
        public virtual DbSet<InvoiceRequestDetail> InvoiceRequestDetails { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<Manager> Managers { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<PatientBill> PatientBills { get; set; }
        public virtual DbSet<PatientDemographic> PatientDemographics { get; set; }
        public virtual DbSet<PhysicianRequest> PhysicianRequests { get; set; }
        public virtual DbSet<QBInvoice> QBInvoices { get; set; }
        public virtual DbSet<QBInvoiceItem> QBInvoiceItems { get; set; }
        public virtual DbSet<QuickbooksSecret> QuickbooksSecrets { get; set; }
        public virtual DbSet<RegistrationDetail> RegistrationDetails { get; set; }
        public virtual DbSet<ResultDeliveryOption> ResultDeliveryOptions { get; set; }
        public virtual DbSet<RoleNotification> RoleNotifications { get; set; }
        public virtual DbSet<RoleReference> RoleReferences { get; set; }
        public virtual DbSet<SalesExpense> SalesExpenses { get; set; }
        public virtual DbSet<SalesRep> SalesReps { get; set; }
        public virtual DbSet<ServiceEmail> ServiceEmails { get; set; }
        public virtual DbSet<ServiceNotification> ServiceNotifications { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<SubGroup> SubGroups { get; set; }
        public virtual DbSet<SupplyOrder> SupplyOrders { get; set; }
        public virtual DbSet<SupplyOrderDetail> SupplyOrderDetails { get; set; }
        public virtual DbSet<TempExport> TempExports { get; set; }
        public virtual DbSet<Test> Tests { get; set; }
        public virtual DbSet<Ticket> Tickets { get; set; }
        public virtual DbSet<TicketAction> TicketActions { get; set; }
        public virtual DbSet<TicketAttachment> TicketAttachments { get; set; }
        public virtual DbSet<TicketContact> TicketContacts { get; set; }
        public virtual DbSet<UserNotification> UserNotifications { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }
        public virtual DbSet<t_CDC_bkup_Apr2020> t_CDC_bkup_Apr2020s { get; set; }
        public virtual DbSet<t_Coding_Team> t_Coding_Teams { get; set; }
        public virtual DbSet<t_bonusCalculation> t_bonusCalculations { get; set; }
        public virtual DbSet<t_bonusCalculation_2July> t_bonusCalculation_2Julies { get; set; }
        public virtual DbSet<t_bonusCalculation_bkup290620> t_bonusCalculation_bkup290620s { get; set; }
        public virtual DbSet<t_bonusParam> t_bonusParams { get; set; }
        public virtual DbSet<t_bonusParams_2July> t_bonusParams_2Julies { get; set; }
        public virtual DbSet<t_bonusParams_bkup290620> t_bonusParams_bkup290620s { get; set; }
        public virtual DbSet<t_bonusParams_bkupforbrandonsreagentcost> t_bonusParams_bkupforbrandonsreagentcosts { get; set; }
        public virtual DbSet<t_bonus_SalaryParam_Excluded> t_bonus_SalaryParam_Excludeds { get; set; }
        public virtual DbSet<t_bonus_type> t_bonus_types { get; set; }
        public virtual DbSet<t_bonus_type_bkup> t_bonus_type_bkups { get; set; }
        public virtual DbSet<t_gpbc_Rate> t_gpbc_Rates { get; set; }
        public virtual DbSet<t_gpbc_Share_Rate> t_gpbc_Share_Rates { get; set; }
        public virtual DbSet<t_gpbc_bonusCalculation_GroupLevel> t_gpbc_bonusCalculation_GroupLevels { get; set; }
        public virtual DbSet<t_gpbc_bonusParams_GroupLevel> t_gpbc_bonusParams_GroupLevels { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=bssoft2b;Initial Catalog=WebDB;Persist Security Info=True;User ID=sa;Password=Xamarin@1964");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Accession>(entity =>
            {
                entity.Property(e => e.CreatedBy).IsUnicode(false);

                entity.Property(e => e.InsuranceID).IsUnicode(false);

                entity.Property(e => e.InsuranceName).IsUnicode(false);

                entity.Property(e => e.ModifiedBy).IsUnicode(false);

                entity.Property(e => e.Note).IsUnicode(false);

                entity.Property(e => e.PatientName).IsUnicode(false);
            });

            modelBuilder.Entity<Account>(entity =>
            {
                entity.Property(e => e.AccountID).ValueGeneratedNever();

                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.City).IsUnicode(false);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.NPI).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.Suite).IsUnicode(false);

                entity.Property(e => e.Telephone).IsUnicode(false);

                entity.Property(e => e.Zip).IsUnicode(false);

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.Accounts)
                    .HasForeignKey(d => d.GroupID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Accounts__GroupI__03F0984C");
            });

            modelBuilder.Entity<AccountNote>(entity =>
            {
                entity.Property(e => e.NoteContents).IsUnicode(false);

                entity.Property(e => e.PlacedBy).IsUnicode(false);

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.AccountNotes)
                    .HasForeignKey(d => d.AccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__AccountNo__Accou__2116E6DF");
            });

            modelBuilder.Entity<AccountRequest>(entity =>
            {
                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.City).IsUnicode(false);

                entity.Property(e => e.ClientIDS).IsUnicode(false);

                entity.Property(e => e.CompletedBy).IsUnicode(false);

                entity.Property(e => e.ContactEmail).IsUnicode(false);

                entity.Property(e => e.ContactEmail1).IsUnicode(false);

                entity.Property(e => e.EMRVendor).IsUnicode(false);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.OfficeContactName).IsUnicode(false);

                entity.Property(e => e.Phone).IsUnicode(false);

                entity.Property(e => e.PhysicianEmail).IsUnicode(false);

                entity.Property(e => e.PracticeNPI).IsUnicode(false);

                entity.Property(e => e.PracticeName).IsUnicode(false);

                entity.Property(e => e.RequestedBy).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.Suite).IsUnicode(false);

                entity.Property(e => e.WebUserName).IsUnicode(false);

                entity.Property(e => e.WebUserPassword).IsUnicode(false);

                entity.Property(e => e.Zip).IsUnicode(false);

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.AccountRequests)
                    .HasForeignKey(d => d.GroupID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__AccountRe__Group__18EBB532");
            });

            modelBuilder.Entity<AddOn>(entity =>
            {
                entity.Property(e => e.AssignedTo).IsUnicode(false);

                entity.Property(e => e.CreatedBy).IsUnicode(false);

                entity.Property(e => e.ModifiedBy).IsUnicode(false);

                entity.Property(e => e.Notes).IsUnicode(false);

                entity.HasOne(d => d.Attachment)
                    .WithMany(p => p.AddOns)
                    .HasForeignKey(d => d.AttachmentID)
                    .HasConstraintName("FK__AddOns__Attachme__15702A09");
            });

            modelBuilder.Entity<AspNetUserLogin>(entity =>
            {
                entity.HasKey(e => new { e.LoginProvider, e.ProviderKey });
            });

            modelBuilder.Entity<AspNetUserRole>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RoleId });
            });

            modelBuilder.Entity<AspNetUserToken>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name });
            });

            modelBuilder.Entity<Attachment>(entity =>
            {
                entity.Property(e => e.AttachmentName).IsUnicode(false);
            });

            modelBuilder.Entity<BillAction>(entity =>
            {
                entity.Property(e => e.ActionName).IsUnicode(false);
            });

            modelBuilder.Entity<BillLog>(entity =>
            {
                entity.Property(e => e.ActionBy).IsUnicode(false);

                entity.Property(e => e.InvoiceNumber).IsUnicode(false);

                entity.HasOne(d => d.BillAction)
                    .WithMany(p => p.BillLogs)
                    .HasForeignKey(d => d.BillActionID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__BillLogs__BillAc__2BFE89A6");
            });

            modelBuilder.Entity<BillType>(entity =>
            {
                entity.Property(e => e.BillTypeName).IsUnicode(false);

                entity.Property(e => e.Notes).IsUnicode(false);

                entity.HasOne(d => d.BillingGroup)
                    .WithMany(p => p.BillTypes)
                    .HasForeignKey(d => d.BillingGroupID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__BillTypes__Billi__049AA3C2");
            });

            modelBuilder.Entity<BillingGroup>(entity =>
            {
                entity.Property(e => e.BillingGroupName).IsUnicode(false);
            });

            modelBuilder.Entity<BlogItem>(entity =>
            {
                entity.Property(e => e.Content).IsUnicode(false);

                entity.Property(e => e.Reference)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.Title).IsUnicode(false);
            });

            modelBuilder.Entity<CDCsUpdated>(entity =>
            {
                entity.Property(e => e.CPT).IsUnicode(false);
            });

            modelBuilder.Entity<CacheKey>(entity =>
            {
                entity.Property(e => e.CacheKeyID).HasDefaultValueSql("(newid())");

                entity.Property(e => e.Account).IsUnicode(false);

                entity.Property(e => e.Department).IsUnicode(false);

                entity.Property(e => e.GroupID).IsUnicode(false);

                entity.Property(e => e.Insurance).IsUnicode(false);

                entity.Property(e => e.SalesManager).IsUnicode(false);

                entity.Property(e => e.SalesRep).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.SubGroup).IsUnicode(false);

                entity.Property(e => e.Test).IsUnicode(false);

                entity.Property(e => e.TimeAggregator).IsUnicode(false);
            });

            modelBuilder.Entity<CacheReport>(entity =>
            {
                entity.Property(e => e.CacheReportID).ValueGeneratedNever();

                entity.Property(e => e.ReportType).IsUnicode(false);

                entity.Property(e => e.ReportVersion).IsUnicode(false);

                entity.Property(e => e.X).IsUnicode(false);
            });

            modelBuilder.Entity<Charge>(entity =>
            {
                entity.Property(e => e.BillTypeName).IsUnicode(false);

                entity.Property(e => e.Department).IsUnicode(false);

                entity.Property(e => e.InvoiceID).IsUnicode(false);

                entity.Property(e => e.Manager).IsUnicode(false);

                entity.Property(e => e.SalesRep).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.TestCode).IsUnicode(false);

                entity.Property(e => e.TestName).IsUnicode(false);

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.Charges)
                    .HasForeignKey(d => d.AccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Charges__Account__57C7FD4B");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.Charges)
                    .HasForeignKey(d => d.GroupID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Charges__GroupID__58BC2184");
            });

            modelBuilder.Entity<Coding_Activity>(entity =>
            {
                entity.HasKey(e => e.ActivityId);

                entity.HasIndex(e => e.Table, "Coding_Activity_Table")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.User, "Coding_Activity_User")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.PKey, "IX_Coding_Activity_PKey")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.ActivityId).ValueGeneratedOnAdd();

                entity.Property(e => e.Change).IsUnicode(false);

                entity.Property(e => e.PKey).IsUnicode(false);

                entity.Property(e => e.Table).IsUnicode(false);

                entity.Property(e => e.User).IsUnicode(false);
            });

            modelBuilder.Entity<Coding_Code>(entity =>
            {
                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.meaning).IsUnicode(false);
            });

            modelBuilder.Entity<Coding_Invoice>(entity =>
            {
                entity.HasIndex(e => new { e.InvoiceNo, e.BillType, e.Status, e.PrevBillType }, "Code_Invoices_Indexes")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.BillType, "Coding_Invoices_Billtype")
                    .HasFillFactor((byte)80);

                entity.HasIndex(e => e.Status, "Coding_Invoices_Status")
                    .HasFillFactor((byte)80);

                entity.Property(e => e.Active).HasDefaultValueSql("((1))");

                entity.Property(e => e.InvoiceNo).IsUnicode(false);

                entity.Property(e => e.Notes).IsUnicode(false);

                entity.Property(e => e.PrevBillType).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);
            });

            modelBuilder.Entity<Commission>(entity =>
            {
                entity.Property(e => e.OwnedBy).IsUnicode(false);

                entity.Property(e => e.PaidTo).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.Commissions)
                    .HasForeignKey(d => d.AccountID)
                    .HasConstraintName("FK__Commissio__Accou__216BEC9A");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.Commissions)
                    .HasForeignKey(d => d.GroupID)
                    .HasConstraintName("FK__Commissio__Group__2077C861");
            });

            modelBuilder.Entity<Commissions_Old>(entity =>
            {
                entity.Property(e => e.OwnedBy).IsUnicode(false);

                entity.Property(e => e.PaidTo).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.Commissions_Olds)
                    .HasForeignKey(d => d.AccountID)
                    .HasConstraintName("FK__Commissio__Accou__4E0988E7");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.Commissions_Olds)
                    .HasForeignKey(d => d.GroupID)
                    .HasConstraintName("FK__Commissio__Group__4EFDAD20");
            });

            modelBuilder.Entity<Commissions_bkup_Apr20>(entity =>
            {
                entity.Property(e => e.OwnedBy).IsUnicode(false);

                entity.Property(e => e.PaidTo).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);
            });

            modelBuilder.Entity<CommonDiagnosisCode>(entity =>
            {
                entity.HasKey(e => e.Code)
                    .HasName("PK_CommonlyUsedDiagnoses");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.CommonlyUsedDiagnoses).IsUnicode(false);
            });

            modelBuilder.Entity<County>(entity =>
            {
                entity.Property(e => e.ZipCode).ValueGeneratedNever();

                entity.Property(e => e.CountyName).IsUnicode(false);
            });

            modelBuilder.Entity<CriticalResult>(entity =>
            {
                entity.Property(e => e.AccessionNumber).IsUnicode(false);

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.CriticalResults)
                    .HasForeignKey(d => d.AccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__CriticalR__Accou__26CFC035");
            });

            modelBuilder.Entity<CriticalResultLine>(entity =>
            {
                entity.Property(e => e.ActionTaken).IsUnicode(false);

                entity.Property(e => e.PlacedBy).IsUnicode(false);

                entity.HasOne(d => d.CriticalResult)
                    .WithMany(p => p.CriticalResultLines)
                    .HasForeignKey(d => d.CriticalResultID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__CriticalR__Criti__27C3E46E");
            });

            modelBuilder.Entity<Department>(entity =>
            {
                entity.Property(e => e.Department1).IsUnicode(false);
            });

            modelBuilder.Entity<DiagnosisCode>(entity =>
            {
                entity.HasKey(e => e.Code)
                    .HasName("PK__Diagnosi__A25C5AA6CB242632");

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<DiagnosisHistoryLine>(entity =>
            {
                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.DiagnosisHistoryLineID).ValueGeneratedOnAdd();
                entity.HasKey(e => e.DiagnosisHistoryLineID);
            });

            modelBuilder.Entity<DiagnosisLine>(entity =>
            {
                entity.HasKey(e => e.DiagnosisLineID);
                entity.Property(e => e.DiagnosisCode).IsUnicode(false);

                entity.Property(e => e.DiagnosisLineID).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<DiagnosisRequest>(entity =>
            {
                entity.Property(e => e.AccessionNumber).IsUnicode(false);

                entity.Property(e => e.CompletedBy).IsUnicode(false);

                entity.Property(e => e.DiagnosisRequestID).ValueGeneratedOnAdd();

                entity.Property(e => e.LastPrintedBy).IsUnicode(false);

                entity.Property(e => e.Signature).IsUnicode(false);

                entity.Property(e => e.SignedBy).IsUnicode(false);
            });

            modelBuilder.Entity<DiagnosisRequestLine>(entity =>
            {
                entity.Property(e => e.CommonlyUsedDiagnoses).IsUnicode(false);

                entity.Property(e => e.DiagnosisRequestLineID).ValueGeneratedOnAdd();

                entity.Property(e => e.UncoveredCode).IsUnicode(false);

            });

            modelBuilder.Entity<DiagnosisRequestLine>()
            .HasKey(c => new { c.DiagnosisRequestLineID });

            modelBuilder.Entity<PatientDemographic>()
            .HasKey(c => new { c.AccessionNumber });

            modelBuilder.Entity<DiagnosisRequest>()
                .HasKey(c => new { c.DiagnosisRequestID });


            modelBuilder.Entity<DiagnosisRequest>()
                .HasOne(c => c.PatientDemographic)
                .WithOne()
                .HasForeignKey<DiagnosisRequest>(a => a.AccessionNumber);
            //              .HasForeignKey<Charges>(a => a.AccountID);

            modelBuilder.Entity<DiagnosisRequest>()
                .HasMany(d => d.DiagnosisHistoryLines)
                .WithOne(l => l.DiagnosisRequest)
                .HasForeignKey(d => d.DiagnosisRequestID);



            modelBuilder.Entity<DiagnosisRequests_20Feb2020>(entity =>
            {
                entity.Property(e => e.AccessionNumber).IsUnicode(false);

                entity.Property(e => e.CompletedBy).IsUnicode(false);

                entity.Property(e => e.LastPrintedBy).IsUnicode(false);

                entity.Property(e => e.Signature).IsUnicode(false);

                entity.Property(e => e.SignedBy).IsUnicode(false);

                entity.HasOne(d => d.AccessionNumberNavigation)
                    .WithMany(p => p.DiagnosisRequests_20Feb2020s)
                    .HasForeignKey(d => d.AccessionNumber)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Diagnosis__Acces__17786E0C");

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.DiagnosisRequests_20Feb2020Accounts)
                    .HasForeignKey(d => d.AccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Diagnosis__Accou__186C9245");

                entity.HasOne(d => d.Physician)
                    .WithMany(p => p.DiagnosisRequests_20Feb2020Physicians)
                    .HasForeignKey(d => d.PhysicianID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Diagnosis__Physi__1960B67E");
            });

            modelBuilder.Entity<DiagnosisRequests_Bkup20Apr>(entity =>
            {
                entity.Property(e => e.AccessionNumber).IsUnicode(false);

                entity.Property(e => e.CompletedBy).IsUnicode(false);

                entity.Property(e => e.LastPrintedBy).IsUnicode(false);

                entity.Property(e => e.Signature).IsUnicode(false);

                entity.Property(e => e.SignedBy).IsUnicode(false);
            });

            modelBuilder.Entity<DispatchContact>(entity =>
            {
                entity.Property(e => e.DispatchContactEmail).IsUnicode(false);

                entity.HasOne(d => d.DispatchTask)
                    .WithMany(p => p.DispatchContacts)
                    .HasForeignKey(d => d.DispatchTaskID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__DispatchC__Dispa__351DDF8C");
            });

            modelBuilder.Entity<DispatchStatus>(entity =>
            {
                entity.Property(e => e.DispatchStatusName).IsUnicode(false);
            });

            modelBuilder.Entity<DispatchTask>(entity =>
            {
                entity.Property(e => e.AddressLine1).IsUnicode(false);

                entity.Property(e => e.AddressLine2).IsUnicode(false);

                entity.Property(e => e.AssignedTo).IsUnicode(false);

                entity.Property(e => e.City).IsUnicode(false);

                entity.Property(e => e.ContactName).IsUnicode(false);

                entity.Property(e => e.CreatedBy).IsUnicode(false);

                entity.Property(e => e.CreatedDate).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Notes).IsUnicode(false);

                entity.Property(e => e.PickupTime).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.UpdatedBy).IsUnicode(false);

                entity.Property(e => e.Zip).IsUnicode(false);
            });

            modelBuilder.Entity<EmrNote>(entity =>
            {
                entity.Property(e => e.NoteContents).IsUnicode(false);

                entity.Property(e => e.PlacedBy).IsUnicode(false);

                entity.HasOne(d => d.EmrRequest)
                    .WithMany(p => p.EmrNotes)
                    .HasForeignKey(d => d.EmrRequestID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__EmrNotes__EmrReq__1CDC41A7");
            });

            modelBuilder.Entity<EmrRequest>(entity =>
            {
                entity.Property(e => e.ConnectionType).IsUnicode(false);

                entity.Property(e => e.CustomPanels).IsUnicode(false);

                entity.Property(e => e.DenialReason).IsUnicode(false);

                entity.Property(e => e.OfficeManagerEmail).IsUnicode(false);

                entity.Property(e => e.OfficeManagerName).IsUnicode(false);

                entity.Property(e => e.OfficeManagerPhone).IsUnicode(false);

                entity.Property(e => e.PhysicianName).IsUnicode(false);

                entity.Property(e => e.PhysicianSpecialty).IsUnicode(false);

                entity.Property(e => e.QuoteApprovedBy).IsUnicode(false);

                entity.Property(e => e.RequestedBy).IsUnicode(false);

                entity.Property(e => e.VendorContact).IsUnicode(false);

                entity.Property(e => e.VendorEmail).IsUnicode(false);

                entity.Property(e => e.VendorFax).IsUnicode(false);

                entity.Property(e => e.VendorPhone).IsUnicode(false);

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.EmrRequests)
                    .HasForeignKey(d => d.AccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__EmrReques__Accou__6BE40491");

                entity.HasOne(d => d.Attachment)
                    .WithMany(p => p.EmrRequests)
                    .HasForeignKey(d => d.AttachmentID)
                    .HasConstraintName("FK__EmrReques__Attac__2A363CC5");
            });

            modelBuilder.Entity<Finance>(entity =>
            {
                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Manager).IsUnicode(false);

                entity.Property(e => e.SalesRep).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.SubCategory).IsUnicode(false);

                entity.Property(e => e.Transaction).IsUnicode(false);

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.Finances)
                    .HasForeignKey(d => d.AccountID)
                    .HasConstraintName("FK__Finances__Accoun__31A25463");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.Finances)
                    .HasForeignKey(d => d.GroupID)
                    .HasConstraintName("FK__Finances__GroupI__3296789C");
            });

            modelBuilder.Entity<Finances_Old>(entity =>
            {
                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Manager).IsUnicode(false);

                entity.Property(e => e.SalesRep).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.SubCategory).IsUnicode(false);

                entity.Property(e => e.Transaction).IsUnicode(false);

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.Finances_Olds)
                    .HasForeignKey(d => d.AccountID)
                    .HasConstraintName("FK__Finances___Accou__51DA19CB");

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.Finances_Olds)
                    .HasForeignKey(d => d.GroupID)
                    .HasConstraintName("FK__Finances___Group__52CE3E04");
            });

            modelBuilder.Entity<Finances_bkup_Apr20>(entity =>
            {
                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Manager).IsUnicode(false);

                entity.Property(e => e.SalesRep).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.SubCategory).IsUnicode(false);

                entity.Property(e => e.Transaction).IsUnicode(false);
            });

            modelBuilder.Entity<Group>(entity =>
            {
                entity.Property(e => e.GroupID).ValueGeneratedNever();

                entity.Property(e => e.Manager).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.SalesRep).IsUnicode(false);

                entity.Property(e => e.Telephone).IsUnicode(false);
            });

            modelBuilder.Entity<HardwareAccount>(entity =>
            {
                entity.HasOne(d => d.Account)
                    .WithMany(p => p.HardwareAccounts)
                    .HasForeignKey(d => d.AccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HardwareAccounts_Accounts");

                entity.HasOne(d => d.HardwareItem)
                    .WithMany(p => p.HardwareAccounts)
                    .HasForeignKey(d => d.HardwareItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HardwareAccounts_HardwareItems");
            });

            modelBuilder.Entity<HardwareItem>(entity =>
            {
                entity.Property(e => e.Model).IsUnicode(false);

                entity.Property(e => e.SerialNumber).IsUnicode(false);

                entity.Property(e => e.TagNumber).IsUnicode(false);

                entity.HasOne(d => d.HardwareRequest)
                    .WithMany(p => p.HardwareItems)
                    .HasForeignKey(d => d.HardwareRequestID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__HardwareI__Hardw__1D9B5BB6");

                entity.HasOne(d => d.HardwareType)
                    .WithMany(p => p.HardwareItems)
                    .HasForeignKey(d => d.HardwareTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HardwareItems_HardwareTypes");

                entity.HasOne(d => d.ReturnedCondition)
                    .WithMany(p => p.HardwareItems)
                    .HasForeignKey(d => d.ReturnedConditionID)
                    .HasConstraintName("FK_HardwareItems_HardwareReturnCondition");
            });

            modelBuilder.Entity<HardwareRequest>(entity =>
            {
                entity.Property(e => e.AssignedTo).IsUnicode(false);

                entity.Property(e => e.TrackingNumber).IsUnicode(false);
            });

            modelBuilder.Entity<HardwareRequestAccount>(entity =>
            {
                entity.HasOne(d => d.Account)
                    .WithMany(p => p.HardwareRequestAccounts)
                    .HasForeignKey(d => d.AccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HardwareRequestAccounts_Accounts");

                entity.HasOne(d => d.HardwareRequest)
                    .WithMany(p => p.HardwareRequestAccounts)
                    .HasForeignKey(d => d.HardwareRequestID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HardwareRequestAccounts_HardwareRequest");
            });

            modelBuilder.Entity<HardwareRequestNote>(entity =>
            {
                entity.Property(e => e.Note).IsUnicode(false);

                entity.HasOne(d => d.HardwareRequest)
                    .WithMany(p => p.HardwareRequestNotes)
                    .HasForeignKey(d => d.HardwareRequestID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_HardwareRequestNotes_HardwareRequest");
            });

            modelBuilder.Entity<HardwareReturnCondition>(entity =>
            {
                entity.HasKey(e => e.ReturnedConditionID)
                    .HasName("PK_HardwareReturnCondition");

                entity.Property(e => e.ReturnedConditionDescription).IsUnicode(false);
            });

            modelBuilder.Entity<HardwareType>(entity =>
            {
                entity.Property(e => e.HardwareTypeDescription).IsUnicode(false);
            });

            modelBuilder.Entity<Insurance>(entity =>
            {
                entity.Property(e => e.BillType).IsUnicode(false);
            });

            modelBuilder.Entity<Invoice>(entity =>
            {
                entity.Property(e => e.InvoiceID).IsUnicode(false);

                entity.Property(e => e.BillTypePolicy).IsUnicode(false);

                entity.Property(e => e.Insurance1Policy).IsUnicode(false);

                entity.Property(e => e.Insurance2Policy).IsUnicode(false);

                entity.Property(e => e.PatientName).IsUnicode(false);

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.InvoiceAccounts)
                    .HasForeignKey(d => d.AccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Invoices__Accoun__0682EC34");

                entity.HasOne(d => d.BillType)
                    .WithMany(p => p.InvoiceBillTypes)
                    .HasForeignKey(d => d.BillTypeID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Invoices__BillTy__058EC7FB");

                entity.HasOne(d => d.Insurance1)
                    .WithMany(p => p.InvoiceInsurance1s)
                    .HasForeignKey(d => d.Insurance1ID)
                    .HasConstraintName("FK__Invoices__Insura__086B34A6");

                entity.HasOne(d => d.Insurance2)
                    .WithMany(p => p.InvoiceInsurance2s)
                    .HasForeignKey(d => d.Insurance2ID)
                    .HasConstraintName("FK__Invoices__Insura__095F58DF");

                entity.HasOne(d => d.Physician)
                    .WithMany(p => p.InvoicePhysicians)
                    .HasForeignKey(d => d.PhysicianID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Invoices__Physic__0777106D");
            });

            modelBuilder.Entity<InvoiceRequest>(entity =>
            {
                entity.Property(e => e.CheckNumber).IsUnicode(false);

                entity.Property(e => e.DenialReason).IsUnicode(false);

                entity.Property(e => e.PlacedBy).IsUnicode(false);

                entity.Property(e => e.Requester).IsUnicode(false);

                entity.Property(e => e.RequesterContact).IsUnicode(false);

                entity.Property(e => e.RequesterEmail).IsUnicode(false);

                entity.Property(e => e.RequesterPhone).IsUnicode(false);
            });

            modelBuilder.Entity<InvoiceRequestDetail>(entity =>
            {
                entity.Property(e => e.DetailNote).IsUnicode(false);

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.InvoiceRequestDetails)
                    .HasForeignKey(d => d.AccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__InvoiceRe__Accou__43F60EC8");

                entity.HasOne(d => d.EmrRequest)
                    .WithMany(p => p.InvoiceRequestDetails)
                    .HasForeignKey(d => d.EmrRequestID)
                    .HasConstraintName("FK__InvoiceRe__EmrRe__44EA3301");

                entity.HasOne(d => d.InvoiceRequest)
                    .WithMany(p => p.InvoiceRequestDetails)
                    .HasForeignKey(d => d.InvoiceRequestID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__InvoiceRe__Invoi__4301EA8F");
            });

            modelBuilder.Entity<Item>(entity =>
            {
                entity.Property(e => e.ItemDescription).IsUnicode(false);

                entity.Property(e => e.ItemName).IsUnicode(false);
            });

            modelBuilder.Entity<Manager>(entity =>
            {
                entity.Property(e => e.Managers).IsUnicode(false);
            });

            modelBuilder.Entity<PatientBill>(entity =>
            {
                entity.Property(e => e.InvoiceNumber).IsUnicode(false);

                entity.Property(e => e.Expiration).HasDefaultValueSql("('10/12/2018')");

                entity.Property(e => e.InsuranceName).IsUnicode(false);

                entity.Property(e => e.LastActionTaken).IsUnicode(false);

                entity.Property(e => e.PatientName).IsUnicode(false);

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.PatientBills)
                    .HasForeignKey(d => d.AccountID)
                    .HasConstraintName("FK__PatientBi__Accou__04E4BC85");
            });

            modelBuilder.Entity<PatientDemographic>(entity =>
            {
                entity.Property(e => e.AccessionNumber).IsUnicode(false);

                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.ChartNumber).IsUnicode(false);

                entity.Property(e => e.City).IsUnicode(false);

                entity.Property(e => e.FirstName).IsUnicode(false);

                entity.Property(e => e.Gender).IsUnicode(false);

                entity.Property(e => e.LastName).IsUnicode(false);

                entity.Property(e => e.MiddleInitial).IsUnicode(false);

                entity.Property(e => e.Phone).IsUnicode(false);

                entity.Property(e => e.SocialSecurity).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.Zip).IsUnicode(false);
            });

            modelBuilder.Entity<PhysicianRequest>(entity =>
            {
                entity.Property(e => e.PhysicianNPI).IsUnicode(false);

                entity.Property(e => e.PhysicianName).IsUnicode(false);

                entity.HasOne(d => d.AccountRequest)
                    .WithMany(p => p.PhysicianRequests)
                    .HasForeignKey(d => d.AccountRequestID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Physician__Accou__19DFD96B");
            });

            modelBuilder.Entity<QBInvoice>(entity =>
            {
                entity.Property(e => e.CustomerFullName).IsUnicode(false);

                entity.Property(e => e.TemplateRefFullName).IsUnicode(false);
            });

            modelBuilder.Entity<QBInvoiceItem>(entity =>
            {
                entity.HasKey(e => new { e.InvoiceID, e.ItemName });

                entity.Property(e => e.ItemName).IsUnicode(false);

                entity.HasOne(d => d.Invoice)
                    .WithMany(p => p.QBInvoiceItems)
                    .HasForeignKey(d => d.InvoiceID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__QBInvoice__Invoi__69C6B1F5");
            });

            modelBuilder.Entity<QuickbooksSecret>(entity =>
            {
                entity.HasKey(e => e.ClientID)
                    .HasName("PK__Quickboo__E67E1A0453D40465");

                entity.Property(e => e.ClientID).IsUnicode(false);

                entity.Property(e => e.AccessToken)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.ClientSecret).IsUnicode(false);

                entity.Property(e => e.RealmID).IsUnicode(false);

                entity.Property(e => e.RefreshToken).IsUnicode(false);
            });

            modelBuilder.Entity<RegistrationDetail>(entity =>
            {
                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.FirstName).IsUnicode(false);

                entity.Property(e => e.LastName).IsUnicode(false);

                entity.HasOne(d => d.User)
                    .WithOne(p => p.RegistrationDetail)
                    .HasForeignKey<RegistrationDetail>(d => d.UserID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Registrat__UserI__0A338187");
            });

            modelBuilder.Entity<RoleReference>(entity =>
            {
                entity.HasOne(d => d.User)
                    .WithMany(p => p.RoleReferences)
                    .HasForeignKey(d => d.UserID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__RoleRefer__UserI__093F5D4E");
            });

            modelBuilder.Entity<SalesExpense>(entity =>
            {
                entity.Property(e => e.ApprovalDescription).IsUnicode(false);

                entity.Property(e => e.ApprovedBy).IsUnicode(false);

                entity.Property(e => e.ExpenseDescription).IsUnicode(false);

                entity.Property(e => e.NPI).IsUnicode(false);

                entity.Property(e => e.PlacedBy).IsUnicode(false);

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.SalesExpenses)
                    .HasForeignKey(d => d.AccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__SalesExpe__Accou__5A4F643B");
            });

            modelBuilder.Entity<SalesRep>(entity =>
            {
                entity.Property(e => e.SalesRep1).IsUnicode(false);
            });

            modelBuilder.Entity<State>(entity =>
            {
                entity.Property(e => e.States).IsUnicode(false);
            });

            modelBuilder.Entity<SupplyOrder>(entity =>
            {
                entity.Property(e => e.EnteredBy).IsUnicode(false);

                entity.Property(e => e.OrderNotes).IsUnicode(false);

                entity.Property(e => e.TrackingNumber).IsUnicode(false);

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.SupplyOrders)
                    .HasForeignKey(d => d.AccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__SupplyOrd__Accou__6FB49575");
            });

            modelBuilder.Entity<SupplyOrderDetail>(entity =>
            {
                entity.Property(e => e.Description).IsUnicode(false);

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.SupplyOrderDetails)
                    .HasForeignKey(d => d.ItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__SupplyOrd__ItemI__7849DB76");

                entity.HasOne(d => d.SupplyOrder)
                    .WithMany(p => p.SupplyOrderDetails)
                    .HasForeignKey(d => d.SupplyOrderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__SupplyOrd__Suppl__73852659");
            });

            modelBuilder.Entity<TempExport>(entity =>
            {
                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.City).IsUnicode(false);

                entity.Property(e => e.County).IsUnicode(false);

                entity.Property(e => e.Invoice).IsUnicode(false);

                entity.Property(e => e.PatientName).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);

                entity.Property(e => e.Zip).IsUnicode(false);
            });

            modelBuilder.Entity<Test>(entity =>
            {
                entity.Property(e => e.Test1).IsUnicode(false);
            });

            modelBuilder.Entity<Ticket>(entity =>
            {
                entity.Property(e => e.AdditionalContactInfo).IsUnicode(false);

                entity.Property(e => e.EnteredBy).IsUnicode(false);

                entity.Property(e => e.Examples).IsUnicode(false);

                entity.Property(e => e.TicketDescription).IsUnicode(false);

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.Tickets)
                    .HasForeignKey(d => d.AccountID)
                    .HasConstraintName("FK__Tickets__Account__60C757A0");

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.Tickets)
                    .HasForeignKey(d => d.VendorID)
                    .HasConstraintName("FK__Tickets__VendorI__5FD33367");
            });

            modelBuilder.Entity<TicketAction>(entity =>
            {
                entity.Property(e => e.ActionBy).IsUnicode(false);

                entity.Property(e => e.ActionTaken).IsUnicode(false);

                entity.HasOne(d => d.Ticket)
                    .WithMany(p => p.TicketActions)
                    .HasForeignKey(d => d.TicketID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__TicketAct__Ticke__72E607DB");
            });

            modelBuilder.Entity<TicketAttachment>(entity =>
            {
                entity.HasOne(d => d.Attachment)
                    .WithMany(p => p.TicketAttachments)
                    .HasForeignKey(d => d.AttachmentID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__TicketAtt__Attac__19FFD4FC");

                entity.HasOne(d => d.Ticket)
                    .WithMany(p => p.TicketAttachments)
                    .HasForeignKey(d => d.TicketID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__TicketAtt__Ticke__190BB0C3");
            });

            modelBuilder.Entity<TicketContact>(entity =>
            {
                entity.Property(e => e.TicketContactEmail).IsUnicode(false);
            });

            modelBuilder.Entity<UserNotification>(entity =>
            {
                entity.HasOne(d => d.Notification)
                    .WithMany(p => p.UserNotifications)
                    .HasForeignKey(d => d.NotificationId)
                    .HasConstraintName("FK_UserNotifications_Notifications");
            });

            modelBuilder.Entity<Vendor>(entity =>
            {
                entity.Property(e => e.Name).IsUnicode(false);
            });

            modelBuilder.Entity<t_CDC_bkup_Apr2020>(entity =>
            {
                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.CommonlyUsedDiagnoses).IsUnicode(false);
            });

            modelBuilder.Entity<t_Coding_Team>(entity =>
            {
                entity.Property(e => e.AccuApp_User).IsUnicode(false);

                entity.Property(e => e.AccuFinance_User).IsUnicode(false);

                entity.Property(e => e.FirstName).IsUnicode(false);

                entity.Property(e => e.LastName).IsUnicode(false);

                entity.Property(e => e.MiddleName).IsUnicode(false);

                entity.Property(e => e.PKey).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<t_bonusCalculation>(entity =>
            {
                entity.Property(e => e.RowID).ValueGeneratedOnAdd();

                entity.Property(e => e.Sales_Rep).IsUnicode(false);
            });

            modelBuilder.Entity<t_bonusCalculation_2July>(entity =>
            {
                entity.Property(e => e.RowID).ValueGeneratedOnAdd();

                entity.Property(e => e.Sales_Rep).IsUnicode(false);
            });

            modelBuilder.Entity<t_bonusCalculation_bkup290620>(entity =>
            {
                entity.Property(e => e.Sales_Rep).IsUnicode(false);
            });

            modelBuilder.Entity<t_bonusParam>(entity =>
            {
                entity.Property(e => e.RowID).ValueGeneratedOnAdd();

                entity.Property(e => e.SalesRep).IsUnicode(false);
            });

            modelBuilder.Entity<t_bonusParams_2July>(entity =>
            {
                entity.Property(e => e.RowID).ValueGeneratedOnAdd();

                entity.Property(e => e.SalesRep).IsUnicode(false);
            });

            modelBuilder.Entity<t_bonusParams_bkup290620>(entity =>
            {
                entity.Property(e => e.SalesRep).IsUnicode(false);
            });

            modelBuilder.Entity<t_bonusParams_bkupforbrandonsreagentcost>(entity =>
            {
                entity.Property(e => e.RowID).ValueGeneratedOnAdd();

                entity.Property(e => e.SalesRep).IsUnicode(false);
            });

            modelBuilder.Entity<t_bonus_SalaryParam_Excluded>(entity =>
            {
                entity.Property(e => e.Sales_Rep).IsUnicode(false);
            });

            modelBuilder.Entity<t_bonus_type>(entity =>
            {
                entity.Property(e => e.BonusTypeId).ValueGeneratedOnAdd();

                entity.Property(e => e.ModifiedBy).IsUnicode(false);

                entity.Property(e => e.SalesRep).IsUnicode(false);

                entity.Property(e => e.SharedWith).IsUnicode(false);
            });

            modelBuilder.Entity<t_bonus_type_bkup>(entity =>
            {
                entity.Property(e => e.BonusTypeId).ValueGeneratedOnAdd();

                entity.Property(e => e.ModifiedBy).IsUnicode(false);

                entity.Property(e => e.SalesRep).IsUnicode(false);

                entity.Property(e => e.SharedWith).IsUnicode(false);
            });

            modelBuilder.Entity<t_gpbc_Rate>(entity =>
            {
                entity.Property(e => e.SalesRep).IsUnicode(false);
            });

            modelBuilder.Entity<t_gpbc_Share_Rate>(entity =>
            {
                entity.Property(e => e.SalesRep).IsUnicode(false);
            });

            modelBuilder.Entity<t_gpbc_bonusCalculation_GroupLevel>(entity =>
            {
                entity.HasKey(e => e.RowID)
                    .HasName("PK__t_gpbc_b__FFEE74516996E959");

                entity.Property(e => e.RowID).HasDefaultValueSql("(newid())");

                entity.Property(e => e.SalesRep).IsUnicode(false);
            });

            modelBuilder.Entity<t_gpbc_bonusParams_GroupLevel>(entity =>
            {
                entity.HasKey(e => e.RowID)
                    .HasName("PK__t_gpbc_b__FFEE7451772D5BCE");

                entity.Property(e => e.RowID).HasDefaultValueSql("(newid())");

                entity.Property(e => e.SalesRep).IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}