// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore;
using Microsoft.Data.SqlClient;
using System;
using System.Data;
using System.Threading.Tasks;
using DataModel.Finance;

namespace DataModel.Finance
{
    public partial class FINANCEContextProcedures
    {
        private readonly FINANCEContext _context;

        public FINANCEContextProcedures(FINANCEContext context)
        {
            _context = context;
        }

        public async Task<sp_account_existsResult[]> sp_account_exists(string account, OutputParameter<int> returnValue = null)
        {
            var parameteraccount = new SqlParameter
            {
                ParameterName = "account",
                Size = 255,
                Value = account ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_account_existsResult>("EXEC @returnValue = [dbo].[sp_account_exists] @account", parameteraccount, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_add_call(string user, string action, OutputParameter<int> returnValue = null)
        {
            var parameteruser = new SqlParameter
            {
                ParameterName = "user",
                Size = 50,
                Value = user ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameteraction = new SqlParameter
            {
                ParameterName = "action",
                Size = 255,
                Value = action ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_add_call] @user, @action", parameteruser, parameteraction, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_add_client_bill(int? client, DateTime? date, string bnum, OutputParameter<int> returnValue = null)
        {
            var parameterclient = new SqlParameter
            {
                ParameterName = "client",
                Value = client ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterdate = new SqlParameter
            {
                ParameterName = "date",
                Value = date ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterbnum = new SqlParameter
            {
                ParameterName = "bnum",
                Size = 10,
                Value = bnum ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_add_client_bill] @client, @date, @bnum", parameterclient, parameterdate, parameterbnum, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_add_coding_invoice(string invoice, int? btype, string status, string notes, string user, OutputParameter<int> returnValue = null)
        {
            var parameterinvoice = new SqlParameter
            {
                ParameterName = "invoice",
                Size = 50,
                Value = invoice ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterbtype = new SqlParameter
            {
                ParameterName = "btype",
                Value = btype ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterstatus = new SqlParameter
            {
                ParameterName = "status",
                Size = 5,
                Value = status ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameternotes = new SqlParameter
            {
                ParameterName = "notes",
                Size = 255,
                Value = notes ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameteruser = new SqlParameter
            {
                ParameterName = "user",
                Size = 50,
                Value = user ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_add_coding_invoice] @invoice, @btype, @status, @notes, @user", parameterinvoice, parameterbtype, parameterstatus, parameternotes, parameteruser, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_add_company_cost(DateTime? date, decimal? equipment, decimal? labor, decimal? overhead, OutputParameter<int> returnValue = null)
        {
            var parameterdate = new SqlParameter
            {
                ParameterName = "date",
                Value = date ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterequipment = new SqlParameter
            {
                ParameterName = "equipment",
                Value = equipment ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };

            var parameterlabor = new SqlParameter
            {
                ParameterName = "labor",
                Value = labor ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };

            var parameteroverhead = new SqlParameter
            {
                ParameterName = "overhead",
                Value = overhead ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_add_company_cost] @date, @equipment, @labor, @overhead", parameterdate, parameterequipment, parameterlabor, parameteroverhead, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_add_dx_history_line(int? id, string code, OutputParameter<int> returnValue = null)
        {
            var parameterid = new SqlParameter
            {
                ParameterName = "id",
                Value = id ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parametercode = new SqlParameter
            {
                ParameterName = "code",
                Size = 50,
                Value = code ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_add_dx_history_line] @id, @code", parameterid, parametercode, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_add_dx_request_line(int? id, string code, OutputParameter<int> returnValue = null)
        {
            var parameterid = new SqlParameter
            {
                ParameterName = "id",
                Value = id ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parametercode = new SqlParameter
            {
                ParameterName = "code",
                Size = 50,
                Value = code ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_add_dx_request_line] @id, @code", parameterid, parametercode, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_add_emr_install(int? account, int? vendor, DateTime? live, int? count, OutputParameter<int> returnValue = null)
        {
            var parameteraccount = new SqlParameter
            {
                ParameterName = "account",
                Value = account ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parametervendor = new SqlParameter
            {
                ParameterName = "vendor",
                Value = vendor ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterlive = new SqlParameter
            {
                ParameterName = "live",
                Value = live ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parametercount = new SqlParameter
            {
                ParameterName = "count",
                Value = count ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_add_emr_install] @account, @vendor, @live, @count", parameteraccount, parametervendor, parameterlive, parametercount, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_add_emr_maint(int? key, bool? vendor, DateTime? date, decimal? amount, OutputParameter<int> returnValue = null)
        {
            var parameterkey = new SqlParameter
            {
                ParameterName = "key",
                Value = key ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parametervendor = new SqlParameter
            {
                ParameterName = "vendor",
                Value = vendor ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };

            var parameterdate = new SqlParameter
            {
                ParameterName = "date",
                Value = date ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameteramount = new SqlParameter
            {
                ParameterName = "amount",
                Value = amount ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_add_emr_maint] @key, @vendor, @date, @amount", parameterkey, parametervendor, parameterdate, parameteramount, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_add_group(int? gnum, string gname, string gtel, string guser, string grep, string gmanager, double? gbonus, bool? gsubg, bool? gactive, bool? gnegative, bool? glead, int? gmap, OutputParameter<int> returnValue = null)
        {
            var parametergnum = new SqlParameter
            {
                ParameterName = "gnum",
                Value = gnum ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parametergname = new SqlParameter
            {
                ParameterName = "gname",
                Size = 50,
                Value = gname ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergtel = new SqlParameter
            {
                ParameterName = "gtel",
                Size = 15,
                Value = gtel ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterguser = new SqlParameter
            {
                ParameterName = "guser",
                Size = 50,
                Value = guser ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergrep = new SqlParameter
            {
                ParameterName = "grep",
                Size = 50,
                Value = grep ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergmanager = new SqlParameter
            {
                ParameterName = "gmanager",
                Size = 50,
                Value = gmanager ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergbonus = new SqlParameter
            {
                ParameterName = "gbonus",
                Value = gbonus ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };

            var parametergsubg = new SqlParameter
            {
                ParameterName = "gsubg",
                Value = gsubg ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };

            var parametergactive = new SqlParameter
            {
                ParameterName = "gactive",
                Value = gactive ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };

            var parametergnegative = new SqlParameter
            {
                ParameterName = "gnegative",
                Value = gnegative ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };

            var parameterglead = new SqlParameter
            {
                ParameterName = "glead",
                Value = glead ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };

            var parametergmap = new SqlParameter
            {
                ParameterName = "gmap",
                Value = gmap ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_add_group] @gnum, @gname, @gtel, @guser, @grep, @gmanager, @gbonus, @gsubg, @gactive, @gnegative, @glead, @gmap", parametergnum, parametergname, parametergtel, parameterguser, parametergrep, parametergmanager, parametergbonus, parametergsubg, parametergactive, parametergnegative, parameterglead, parametergmap, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_add_phleb_distribution(long? empl, DateTime? date, double? dist, int? mapped, string cat, string user, OutputParameter<int> returnValue = null)
        {
            var parameterempl = new SqlParameter
            {
                ParameterName = "empl",
                Value = empl ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.BigInt,
            };

            var parameterdate = new SqlParameter
            {
                ParameterName = "date",
                Value = date ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterdist = new SqlParameter
            {
                ParameterName = "dist",
                Value = dist ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };

            var parametermapped = new SqlParameter
            {
                ParameterName = "mapped",
                Value = mapped ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parametercat = new SqlParameter
            {
                ParameterName = "cat",
                Size = 50,
                Value = cat ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameteruser = new SqlParameter
            {
                ParameterName = "user",
                Size = 50,
                Value = user ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_add_phleb_distribution] @empl, @date, @dist, @mapped, @cat, @user", parameterempl, parameterdate, parameterdist, parametermapped, parametercat, parameteruser, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_add_phleb_expense(string empl, string rep, string account, DateTime? date, bool? phlebtype, string notes, decimal? amount, OutputParameter<int> returnValue = null)
        {
            var parameterempl = new SqlParameter
            {
                ParameterName = "empl",
                Size = 50,
                Value = empl ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterrep = new SqlParameter
            {
                ParameterName = "rep",
                Size = 255,
                Value = rep ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameteraccount = new SqlParameter
            {
                ParameterName = "account",
                Size = 255,
                Value = account ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterdate = new SqlParameter
            {
                ParameterName = "date",
                Value = date ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterphlebtype = new SqlParameter
            {
                ParameterName = "phlebtype",
                Value = phlebtype ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };

            var parameternotes = new SqlParameter
            {
                ParameterName = "notes",
                Size = 255,
                Value = notes ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameteramount = new SqlParameter
            {
                ParameterName = "amount",
                Value = amount ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_add_phleb_expense] @empl, @rep, @account, @date, @phlebtype, @notes, @amount", parameterempl, parameterrep, parameteraccount, parameterdate, parameterphlebtype, parameternotes, parameteramount, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_add_phleb_group(string name, OutputParameter<int> returnValue = null)
        {
            var parametername = new SqlParameter
            {
                ParameterName = "name",
                Size = 250,
                Value = name ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_add_phleb_group] @name", parametername, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_add_phlebotomist(int? name, OutputParameter<int> returnValue = null)
        {
            var parametername = new SqlParameter
            {
                ParameterName = "name",
                Value = name ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_add_phlebotomist] @name", parametername, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_add_pl_note(string note, string sr, int? gr, decimal? sg, int? ac, string an, OutputParameter<int> returnValue = null)
        {
            var parameternote = new SqlParameter
            {
                ParameterName = "note",
                Size = 255,
                Value = note ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametersr = new SqlParameter
            {
                ParameterName = "sr",
                Size = 50,
                Value = sr ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergr = new SqlParameter
            {
                ParameterName = "gr",
                Value = gr ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parametersg = new SqlParameter
            {
                ParameterName = "sg",
                Precision = 10,
                Scale = 3,
                Value = sg ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };

            var parameterac = new SqlParameter
            {
                ParameterName = "ac",
                Value = ac ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameteran = new SqlParameter
            {
                ParameterName = "an",
                Size = 50,
                Value = an ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_add_pl_note] @note, @sr, @gr, @sg, @ac, @an", parameternote, parametersr, parametergr, parametersg, parameterac, parameteran, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_add_pos_cup_entry(string account, DateTime? date, int? number, decimal? amount, string trans, string method, OutputParameter<int> returnValue = null)
        {
            var parameteraccount = new SqlParameter
            {
                ParameterName = "account",
                Size = 50,
                Value = account ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterdate = new SqlParameter
            {
                ParameterName = "date",
                Value = date ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameternumber = new SqlParameter
            {
                ParameterName = "number",
                Value = number ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameteramount = new SqlParameter
            {
                ParameterName = "amount",
                Value = amount ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };

            var parametertrans = new SqlParameter
            {
                ParameterName = "trans",
                Size = 50,
                Value = trans ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametermethod = new SqlParameter
            {
                ParameterName = "method",
                Size = 50,
                Value = method ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_add_pos_cup_entry] @account, @date, @number, @amount, @trans, @method", parameteraccount, parameterdate, parameternumber, parameteramount, parametertrans, parametermethod, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_add_prospective_rep(string name, string contact, OutputParameter<int> returnValue = null)
        {
            var parametername = new SqlParameter
            {
                ParameterName = "name",
                Size = 50,
                Value = name ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametercontact = new SqlParameter
            {
                ParameterName = "contact",
                Size = 50,
                Value = contact ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_add_prospective_rep] @name, @contact", parametername, parametercontact, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_add_rent(int? account, DateTime? date, OutputParameter<int> returnValue = null)
        {
            var parameteraccount = new SqlParameter
            {
                ParameterName = "account",
                Value = account ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterdate = new SqlParameter
            {
                ParameterName = "date",
                Value = date ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_add_rent] @account, @date", parameteraccount, parameterdate, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_add_sales_rep_expense(DateTime? date1, decimal? amount, string rep, OutputParameter<int> returnValue = null)
        {
            var parameterdate1 = new SqlParameter
            {
                ParameterName = "date1",
                Value = date1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameteramount = new SqlParameter
            {
                ParameterName = "amount",
                Value = amount ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };

            var parameterrep = new SqlParameter
            {
                ParameterName = "rep",
                Size = 50,
                Value = rep ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_add_sales_rep_expense] @date1, @amount, @rep", parameterdate1, parameteramount, parameterrep, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_add_user(string username, string password, int? permissions, string mapping, string name, OutputParameter<int> returnValue = null)
        {
            var parameterusername = new SqlParameter
            {
                ParameterName = "username",
                Size = 50,
                Value = username ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterpassword = new SqlParameter
            {
                ParameterName = "password",
                Size = 10,
                Value = password ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterpermissions = new SqlParameter
            {
                ParameterName = "permissions",
                Value = permissions ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parametermapping = new SqlParameter
            {
                ParameterName = "mapping",
                Size = 50,
                Value = mapping ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametername = new SqlParameter
            {
                ParameterName = "name",
                Size = 50,
                Value = name ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_add_user] @username, @password, @permissions, @mapping, @name", parameterusername, parameterpassword, parameterpermissions, parametermapping, parametername, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_alterdiagram(string diagramname, int? owner_id, int? version, byte[] definition, OutputParameter<int> returnValue = null)
        {
            var parameterdiagramname = new SqlParameter
            {
                ParameterName = "diagramname",
                Size = 256,
                Value = diagramname ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };

            var parameterowner_id = new SqlParameter
            {
                ParameterName = "owner_id",
                Value = owner_id ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterversion = new SqlParameter
            {
                ParameterName = "version",
                Value = version ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterdefinition = new SqlParameter
            {
                ParameterName = "definition",
                Value = definition ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarBinary,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_alterdiagram] @diagramname, @owner_id, @version, @definition", parameterdiagramname, parameterowner_id, parameterversion, parameterdefinition, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_change_subgroup(int? accountnum, int? newsubgroup, int? newsubgroupgrp, OutputParameter<int> returnValue = null)
        {
            var parameteraccountnum = new SqlParameter
            {
                ParameterName = "accountnum",
                Value = accountnum ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameternewsubgroup = new SqlParameter
            {
                ParameterName = "newsubgroup",
                Value = newsubgroup ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameternewsubgroupgrp = new SqlParameter
            {
                ParameterName = "newsubgroupgrp",
                Value = newsubgroupgrp ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_change_subgroup] @accountnum, @newsubgroup, @newsubgroupgrp", parameteraccountnum, parameternewsubgroup, parameternewsubgroupgrp, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_change_user(string username, string password, int? permissions, string mapping, string name, OutputParameter<int> returnValue = null)
        {
            var parameterusername = new SqlParameter
            {
                ParameterName = "username",
                Size = 50,
                Value = username ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterpassword = new SqlParameter
            {
                ParameterName = "password",
                Size = 20,
                Value = password ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterpermissions = new SqlParameter
            {
                ParameterName = "permissions",
                Value = permissions ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parametermapping = new SqlParameter
            {
                ParameterName = "mapping",
                Size = 50,
                Value = mapping ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametername = new SqlParameter
            {
                ParameterName = "name",
                Size = 50,
                Value = name ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_change_user] @username, @password, @permissions, @mapping, @name", parameterusername, parameterpassword, parameterpermissions, parametermapping, parametername, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_clear_phleb_distribution(long? empl, DateTime? date, OutputParameter<int> returnValue = null)
        {
            var parameterempl = new SqlParameter
            {
                ParameterName = "empl",
                Value = empl ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.BigInt,
            };

            var parameterdate = new SqlParameter
            {
                ParameterName = "date",
                Value = date ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_clear_phleb_distribution] @empl, @date", parameterempl, parameterdate, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_coding_invoice_existsResult[]> sp_coding_invoice_exists(string invoice, int? btype, OutputParameter<int> returnValue = null)
        {
            var parameterinvoice = new SqlParameter
            {
                ParameterName = "invoice",
                Size = 50,
                Value = invoice ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterbtype = new SqlParameter
            {
                ParameterName = "btype",
                Value = btype ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_coding_invoice_existsResult>("EXEC @returnValue = [dbo].[sp_coding_invoice_exists] @invoice, @btype", parameterinvoice, parameterbtype, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_company_cost_existsResult[]> sp_company_cost_exists(DateTime? date, OutputParameter<int> returnValue = null)
        {
            var parameterdate = new SqlParameter
            {
                ParameterName = "date",
                Value = date ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_company_cost_existsResult>("EXEC @returnValue = [dbo].[sp_company_cost_exists] @date", parameterdate, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_confirm_phleb_distribution(int? id, OutputParameter<int> returnValue = null)
        {
            var parameterid = new SqlParameter
            {
                ParameterName = "id",
                Value = id ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_confirm_phleb_distribution] @id", parameterid, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_count_emr_maintResult[]> sp_count_emr_maint(string filter0, string filter1, string filter2, DateTime? filter3, DateTime? filter4, string filter5, OutputParameter<int> returnValue = null)
        {
            var parameterfilter0 = new SqlParameter
            {
                ParameterName = "filter0",
                Size = 50,
                Value = filter0 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter1 = new SqlParameter
            {
                ParameterName = "filter1",
                Size = 50,
                Value = filter1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter2 = new SqlParameter
            {
                ParameterName = "filter2",
                Size = 50,
                Value = filter2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter3 = new SqlParameter
            {
                ParameterName = "filter3",
                Value = filter3 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterfilter4 = new SqlParameter
            {
                ParameterName = "filter4",
                Value = filter4 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterfilter5 = new SqlParameter
            {
                ParameterName = "filter5",
                Size = 50,
                Value = filter5 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_count_emr_maintResult>("EXEC @returnValue = [dbo].[sp_count_emr_maint] @filter0, @filter1, @filter2, @filter3, @filter4, @filter5", parameterfilter0, parameterfilter1, parameterfilter2, parameterfilter3, parameterfilter4, parameterfilter5, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_create_dx_requestResult[]> sp_create_dx_request(string user, string invoice, OutputParameter<int> returnValue = null)
        {
            var parameteruser = new SqlParameter
            {
                ParameterName = "user",
                Size = 255,
                Value = user ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterinvoice = new SqlParameter
            {
                ParameterName = "invoice",
                Size = 50,
                Value = invoice ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_create_dx_requestResult>("EXEC @returnValue = [dbo].[sp_create_dx_request] @user, @invoice", parameteruser, parameterinvoice, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_create_mr_request(string user, string chart, string invoice, string note, OutputParameter<int> returnValue = null)
        {
            var parameteruser = new SqlParameter
            {
                ParameterName = "user",
                Size = 50,
                Value = user ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterchart = new SqlParameter
            {
                ParameterName = "chart",
                Size = 50,
                Value = chart ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterinvoice = new SqlParameter
            {
                ParameterName = "invoice",
                Size = 50,
                Value = invoice ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameternote = new SqlParameter
            {
                ParameterName = "note",
                Size = 250,
                Value = note ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_create_mr_request] @user, @chart, @invoice, @note", parameteruser, parameterchart, parameterinvoice, parameternote, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_creatediagram(string diagramname, int? owner_id, int? version, byte[] definition, OutputParameter<int> returnValue = null)
        {
            var parameterdiagramname = new SqlParameter
            {
                ParameterName = "diagramname",
                Size = 256,
                Value = diagramname ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };

            var parameterowner_id = new SqlParameter
            {
                ParameterName = "owner_id",
                Value = owner_id ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterversion = new SqlParameter
            {
                ParameterName = "version",
                Value = version ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterdefinition = new SqlParameter
            {
                ParameterName = "definition",
                Value = definition ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarBinary,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_creatediagram] @diagramname, @owner_id, @version, @definition", parameterdiagramname, parameterowner_id, parameterversion, parameterdefinition, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_deactivate_pl_notes(string sr, int? gr, decimal? sg, int? ac, string an, OutputParameter<int> returnValue = null)
        {
            var parametersr = new SqlParameter
            {
                ParameterName = "sr",
                Size = 50,
                Value = sr ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergr = new SqlParameter
            {
                ParameterName = "gr",
                Value = gr ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parametersg = new SqlParameter
            {
                ParameterName = "sg",
                Precision = 10,
                Scale = 3,
                Value = sg ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };

            var parameterac = new SqlParameter
            {
                ParameterName = "ac",
                Value = ac ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameteran = new SqlParameter
            {
                ParameterName = "an",
                Size = 50,
                Value = an ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_deactivate_pl_notes] @sr, @gr, @sg, @ac, @an", parametersr, parametergr, parametersg, parameterac, parameteran, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_delete_client_bill(int? client, DateTime? date, DateTime? dsent, OutputParameter<int> returnValue = null)
        {
            var parameterclient = new SqlParameter
            {
                ParameterName = "client",
                Value = client ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterdate = new SqlParameter
            {
                ParameterName = "date",
                Value = date ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterdsent = new SqlParameter
            {
                ParameterName = "dsent",
                Value = dsent ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_delete_client_bill] @client, @date, @dsent", parameterclient, parameterdate, parameterdsent, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_delete_company_cost(string date, OutputParameter<int> returnValue = null)
        {
            var parameterdate = new SqlParameter
            {
                ParameterName = "date",
                Size = 100,
                Value = date ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_delete_company_cost] @date", parameterdate, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_delete_duplicate_phleb_assigns(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_delete_duplicate_phleb_assigns]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_delete_emr_install(int? key, OutputParameter<int> returnValue = null)
        {
            var parameterkey = new SqlParameter
            {
                ParameterName = "key",
                Value = key ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_delete_emr_install] @key", parameterkey, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_delete_emr_maint(int? key, OutputParameter<int> returnValue = null)
        {
            var parameterkey = new SqlParameter
            {
                ParameterName = "key",
                Value = key ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_delete_emr_maint] @key", parameterkey, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_delete_phleb_dist(int? key, OutputParameter<int> returnValue = null)
        {
            var parameterkey = new SqlParameter
            {
                ParameterName = "key",
                Value = key ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_delete_phleb_dist] @key", parameterkey, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_delete_phleb_distribution(long? empl, DateTime? date, double? dist, int? mapped, string cat, string user, OutputParameter<int> returnValue = null)
        {
            var parameterempl = new SqlParameter
            {
                ParameterName = "empl",
                Value = empl ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.BigInt,
            };

            var parameterdate = new SqlParameter
            {
                ParameterName = "date",
                Value = date ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterdist = new SqlParameter
            {
                ParameterName = "dist",
                Value = dist ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };

            var parametermapped = new SqlParameter
            {
                ParameterName = "mapped",
                Value = mapped ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parametercat = new SqlParameter
            {
                ParameterName = "cat",
                Size = 50,
                Value = cat ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameteruser = new SqlParameter
            {
                ParameterName = "user",
                Size = 50,
                Value = user ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_delete_phleb_distribution] @empl, @date, @dist, @mapped, @cat, @user", parameterempl, parameterdate, parameterdist, parametermapped, parametercat, parameteruser, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_delete_phleb_expense(int? key, OutputParameter<int> returnValue = null)
        {
            var parameterkey = new SqlParameter
            {
                ParameterName = "key",
                Value = key ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_delete_phleb_expense] @key", parameterkey, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_delete_pos_cup_entry(string entry, OutputParameter<int> returnValue = null)
        {
            var parameterentry = new SqlParameter
            {
                ParameterName = "entry",
                Size = 50,
                Value = entry ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_delete_pos_cup_entry] @entry", parameterentry, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_delete_rent(int? key, OutputParameter<int> returnValue = null)
        {
            var parameterkey = new SqlParameter
            {
                ParameterName = "key",
                Value = key ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_delete_rent] @key", parameterkey, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_delete_sr_expense(DateTime? date1, decimal? amount, string rep, OutputParameter<int> returnValue = null)
        {
            var parameterdate1 = new SqlParameter
            {
                ParameterName = "date1",
                Value = date1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameteramount = new SqlParameter
            {
                ParameterName = "amount",
                Value = amount ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };

            var parameterrep = new SqlParameter
            {
                ParameterName = "rep",
                Size = 50,
                Value = rep ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_delete_sr_expense] @date1, @amount, @rep", parameterdate1, parameteramount, parameterrep, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_delete_user(string username, OutputParameter<int> returnValue = null)
        {
            var parameterusername = new SqlParameter
            {
                ParameterName = "username",
                Size = 50,
                Value = username ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_delete_user] @username", parameterusername, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_dropdiagram(string diagramname, int? owner_id, OutputParameter<int> returnValue = null)
        {
            var parameterdiagramname = new SqlParameter
            {
                ParameterName = "diagramname",
                Size = 256,
                Value = diagramname ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };

            var parameterowner_id = new SqlParameter
            {
                ParameterName = "owner_id",
                Value = owner_id ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_dropdiagram] @diagramname, @owner_id", parameterdiagramname, parameterowner_id, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_dx_changed(string invoice, string user, OutputParameter<int> returnValue = null)
        {
            var parameterinvoice = new SqlParameter
            {
                ParameterName = "invoice",
                Size = 50,
                Value = invoice ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameteruser = new SqlParameter
            {
                ParameterName = "user",
                Size = 50,
                Value = user ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_dx_changed] @invoice, @user", parameterinvoice, parameteruser, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_dx_request_existsResult[]> sp_dx_request_exists(string invoice, OutputParameter<int> returnValue = null)
        {
            var parameterinvoice = new SqlParameter
            {
                ParameterName = "invoice",
                Size = 50,
                Value = invoice ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_dx_request_existsResult>("EXEC @returnValue = [dbo].[sp_dx_request_exists] @invoice", parameterinvoice, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_edit_marketing_account(int? account, string email, string site, string special, bool? multi, string dba, OutputParameter<int> returnValue = null)
        {
            var parameteraccount = new SqlParameter
            {
                ParameterName = "account",
                Value = account ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameteremail = new SqlParameter
            {
                ParameterName = "email",
                Size = 50,
                Value = email ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametersite = new SqlParameter
            {
                ParameterName = "site",
                Size = 50,
                Value = site ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterspecial = new SqlParameter
            {
                ParameterName = "special",
                Size = 50,
                Value = special ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametermulti = new SqlParameter
            {
                ParameterName = "multi",
                Value = multi ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };

            var parameterdba = new SqlParameter
            {
                ParameterName = "dba",
                Size = 255,
                Value = dba ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_edit_marketing_account] @account, @email, @site, @special, @multi, @dba", parameteraccount, parameteremail, parametersite, parameterspecial, parametermulti, parameterdba, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_emr_activeResult[]> sp_emr_active(int? key, bool? vendor, DateTime? date, OutputParameter<int> returnValue = null)
        {
            var parameterkey = new SqlParameter
            {
                ParameterName = "key",
                Value = key ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parametervendor = new SqlParameter
            {
                ParameterName = "vendor",
                Value = vendor ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };

            var parameterdate = new SqlParameter
            {
                ParameterName = "date",
                Value = date ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_emr_activeResult>("EXEC @returnValue = [dbo].[sp_emr_active] @key, @vendor, @date", parameterkey, parametervendor, parameterdate, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_etl_all_payments_by_patient_name(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_etl_all_payments_by_patient_name]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_file_uploaded(string invoice, OutputParameter<int> returnValue = null)
        {
            var parameterinvoice = new SqlParameter
            {
                ParameterName = "invoice",
                Size = 50,
                Value = invoice ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_file_uploaded] @invoice", parameterinvoice, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_fin_curierResult[]> sp_fin_curier(int? month_substruct, OutputParameter<int> returnValue = null)
        {
            var parametermonth_substruct = new SqlParameter
            {
                ParameterName = "month_substruct",
                Value = month_substruct ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_fin_curierResult>("EXEC @returnValue = [dbo].[sp_fin_curier] @month_substruct", parametermonth_substruct, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_generate_emr_install(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_generate_emr_install]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_generate_emr_maint(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_generate_emr_maint]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_generate_phleb_expenses(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_generate_phleb_expenses]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_generate_phleb_payroll(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_generate_phleb_payroll]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_generate_rent(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_generate_rent]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_generate_subgroups(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_generate_subgroups]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_accsResult[]> sp_get_accs(string invoice, OutputParameter<int> returnValue = null)
        {
            var parameterinvoice = new SqlParameter
            {
                ParameterName = "invoice",
                Size = 50,
                Value = invoice ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_accsResult>("EXEC @returnValue = [dbo].[sp_get_accs] @invoice", parameterinvoice, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_activityResult[]> sp_get_activity(string user, string action, DateTime? date1, DateTime? date2, string group, string reason, int? page, OutputParameter<int> returnValue = null)
        {
            var parameteruser = new SqlParameter
            {
                ParameterName = "user",
                Size = 50,
                Value = user ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameteraction = new SqlParameter
            {
                ParameterName = "action",
                Size = 50,
                Value = action ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterdate1 = new SqlParameter
            {
                ParameterName = "date1",
                Value = date1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };

            var parameterdate2 = new SqlParameter
            {
                ParameterName = "date2",
                Value = date2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };

            var parametergroup = new SqlParameter
            {
                ParameterName = "group",
                Size = 50,
                Value = group ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreason = new SqlParameter
            {
                ParameterName = "reason",
                Size = 100,
                Value = reason ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterpage = new SqlParameter
            {
                ParameterName = "page",
                Value = page ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_activityResult>("EXEC @returnValue = [dbo].[sp_get_activity] @user, @action, @date1, @date2, @group, @reason, @page", parameteruser, parameteraction, parameterdate1, parameterdate2, parametergroup, parameterreason, parameterpage, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_activity_sizeResult[]> sp_get_activity_size(string user, string action, DateTime? date1, DateTime? date2, string reason, string group, OutputParameter<int> returnValue = null)
        {
            var parameteruser = new SqlParameter
            {
                ParameterName = "user",
                Size = 50,
                Value = user ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameteraction = new SqlParameter
            {
                ParameterName = "action",
                Size = 50,
                Value = action ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterdate1 = new SqlParameter
            {
                ParameterName = "date1",
                Value = date1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };

            var parameterdate2 = new SqlParameter
            {
                ParameterName = "date2",
                Value = date2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };

            var parameterreason = new SqlParameter
            {
                ParameterName = "reason",
                Size = 100,
                Value = reason ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergroup = new SqlParameter
            {
                ParameterName = "group",
                Size = 50,
                Value = group ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_activity_sizeResult>("EXEC @returnValue = [dbo].[sp_get_activity_size] @user, @action, @date1, @date2, @reason, @group", parameteruser, parameteraction, parameterdate1, parameterdate2, parameterreason, parametergroup, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_alertsResult[]> sp_get_alerts(string user, string group, string invoice, int? page, OutputParameter<int> returnValue = null)
        {
            var parameteruser = new SqlParameter
            {
                ParameterName = "user",
                Size = 50,
                Value = user ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergroup = new SqlParameter
            {
                ParameterName = "group",
                Size = 50,
                Value = group ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterinvoice = new SqlParameter
            {
                ParameterName = "invoice",
                Size = 50,
                Value = invoice ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterpage = new SqlParameter
            {
                ParameterName = "page",
                Value = page ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_alertsResult>("EXEC @returnValue = [dbo].[sp_get_alerts] @user, @group, @invoice, @page", parameteruser, parametergroup, parameterinvoice, parameterpage, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_bclu_accessionsResult[]> sp_get_bclu_accessions(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_bclu_accessionsResult>("EXEC @returnValue = [dbo].[sp_get_bclu_accessions]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_bill_groupsResult[]> sp_get_bill_groups(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_bill_groupsResult>("EXEC @returnValue = [dbo].[sp_get_bill_groups]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_bill_typesResult[]> sp_get_bill_types(string filter0, string filter1, string filter2, OutputParameter<int> returnValue = null)
        {
            var parameterfilter0 = new SqlParameter
            {
                ParameterName = "filter0",
                Size = 255,
                Value = filter0 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter1 = new SqlParameter
            {
                ParameterName = "filter1",
                Size = 255,
                Value = filter1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter2 = new SqlParameter
            {
                ParameterName = "filter2",
                Size = 255,
                Value = filter2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_bill_typesResult>("EXEC @returnValue = [dbo].[sp_get_bill_types] @filter0, @filter1, @filter2", parameterfilter0, parameterfilter1, parameterfilter2, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_bill_types_headersResult[]> sp_get_bill_types_headers(string filter0, string filter1, string filter2, OutputParameter<int> returnValue = null)
        {
            var parameterfilter0 = new SqlParameter
            {
                ParameterName = "filter0",
                Size = 255,
                Value = filter0 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter1 = new SqlParameter
            {
                ParameterName = "filter1",
                Size = 255,
                Value = filter1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter2 = new SqlParameter
            {
                ParameterName = "filter2",
                Size = 255,
                Value = filter2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_bill_types_headersResult>("EXEC @returnValue = [dbo].[sp_get_bill_types_headers] @filter0, @filter1, @filter2", parameterfilter0, parameterfilter1, parameterfilter2, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_client_billingResult[]> sp_get_client_billing(DateTime? date1, DateTime? date2, string bill, string client, OutputParameter<int> returnValue = null)
        {
            var parameterdate1 = new SqlParameter
            {
                ParameterName = "date1",
                Value = date1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterdate2 = new SqlParameter
            {
                ParameterName = "date2",
                Value = date2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterbill = new SqlParameter
            {
                ParameterName = "bill",
                Size = 20,
                Value = bill ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterclient = new SqlParameter
            {
                ParameterName = "client",
                Size = 20,
                Value = client ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_client_billingResult>("EXEC @returnValue = [dbo].[sp_get_client_billing] @date1, @date2, @bill, @client", parameterdate1, parameterdate2, parameterbill, parameterclient, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_client_billsResult[]> sp_get_client_bills(int? client, DateTime? date, OutputParameter<int> returnValue = null)
        {
            var parameterclient = new SqlParameter
            {
                ParameterName = "client",
                Value = client ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterdate = new SqlParameter
            {
                ParameterName = "date",
                Value = date ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_client_billsResult>("EXEC @returnValue = [dbo].[sp_get_client_bills] @client, @date", parameterclient, parameterdate, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_codersResult[]> sp_get_coders(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_codersResult>("EXEC @returnValue = [dbo].[sp_get_coders]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_coding_codesResult[]> sp_get_coding_codes(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_coding_codesResult>("EXEC @returnValue = [dbo].[sp_get_coding_codes]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_coding_invoiceResult[]> sp_get_coding_invoice(int? key, OutputParameter<int> returnValue = null)
        {
            var parameterkey = new SqlParameter
            {
                ParameterName = "key",
                Value = key ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_coding_invoiceResult>("EXEC @returnValue = [dbo].[sp_get_coding_invoice] @key", parameterkey, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_coding_invoicesResult[]> sp_get_coding_invoices(string invoice, int? page, string status, string btype, string user, DateTime? date, OutputParameter<int> returnValue = null)
        {
            var parameterinvoice = new SqlParameter
            {
                ParameterName = "invoice",
                Size = 50,
                Value = invoice ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterpage = new SqlParameter
            {
                ParameterName = "page",
                Value = page ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterstatus = new SqlParameter
            {
                ParameterName = "status",
                Size = 50,
                Value = status ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterbtype = new SqlParameter
            {
                ParameterName = "btype",
                Size = 10,
                Value = btype ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameteruser = new SqlParameter
            {
                ParameterName = "user",
                Size = 50,
                Value = user ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterdate = new SqlParameter
            {
                ParameterName = "date",
                Value = date ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_coding_invoicesResult>("EXEC @returnValue = [dbo].[sp_get_coding_invoices] @invoice, @page, @status, @btype, @user, @date", parameterinvoice, parameterpage, parameterstatus, parameterbtype, parameteruser, parameterdate, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_company_costsResult[]> sp_get_company_costs(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_company_costsResult>("EXEC @returnValue = [dbo].[sp_get_company_costs]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_count_accsResult[]> sp_get_count_accs(string invoice, OutputParameter<int> returnValue = null)
        {
            var parameterinvoice = new SqlParameter
            {
                ParameterName = "invoice",
                Size = 50,
                Value = invoice ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_count_accsResult>("EXEC @returnValue = [dbo].[sp_get_count_accs] @invoice", parameterinvoice, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_count_bcluResult[]> sp_get_count_bclu(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_count_bcluResult>("EXEC @returnValue = [dbo].[sp_get_count_bclu]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_count_coding_invoicesResult[]> sp_get_count_coding_invoices(string invoice, string status, string btype, string user, DateTime? date, OutputParameter<int> returnValue = null)
        {
            var parameterinvoice = new SqlParameter
            {
                ParameterName = "invoice",
                Size = 50,
                Value = invoice ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterstatus = new SqlParameter
            {
                ParameterName = "status",
                Size = 5,
                Value = status ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterbtype = new SqlParameter
            {
                ParameterName = "btype",
                Size = 10,
                Value = btype ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameteruser = new SqlParameter
            {
                ParameterName = "user",
                Size = 50,
                Value = user ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterdate = new SqlParameter
            {
                ParameterName = "date",
                Value = date ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_count_coding_invoicesResult>("EXEC @returnValue = [dbo].[sp_get_count_coding_invoices] @invoice, @status, @btype, @user, @date", parameterinvoice, parameterstatus, parameterbtype, parameteruser, parameterdate, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_count_dxResult[]> sp_get_count_dx(string invoice, string insurance, OutputParameter<int> returnValue = null)
        {
            var parameterinvoice = new SqlParameter
            {
                ParameterName = "invoice",
                Size = 50,
                Value = invoice ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterinsurance = new SqlParameter
            {
                ParameterName = "insurance",
                Size = 50,
                Value = insurance ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_count_dxResult>("EXEC @returnValue = [dbo].[sp_get_count_dx] @invoice, @insurance", parameterinvoice, parameterinsurance, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_count_phlebotomistsResult[]> sp_get_count_phlebotomists(string group, string lname, string fname, string empl, OutputParameter<int> returnValue = null)
        {
            var parametergroup = new SqlParameter
            {
                ParameterName = "group",
                Size = 50,
                Value = group ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterlname = new SqlParameter
            {
                ParameterName = "lname",
                Size = 50,
                Value = lname ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfname = new SqlParameter
            {
                ParameterName = "fname",
                Size = 50,
                Value = fname ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterempl = new SqlParameter
            {
                ParameterName = "empl",
                Size = 10,
                Value = empl ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_count_phlebotomistsResult>("EXEC @returnValue = [dbo].[sp_get_count_phlebotomists] @group, @lname, @fname, @empl", parametergroup, parameterlname, parameterfname, parameterempl, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_get_count_pl_charges_pivot(int? pagesize, int? inclusions, int? exclusions, DateTime? date1, DateTime? date2, string sr, string group, string subgroup, string manager, string accounts, string state, string insurance, string zero, string gm, OutputParameter<int> returnValue = null)
        {
            var parameterpagesize = new SqlParameter
            {
                ParameterName = "pagesize",
                Value = pagesize ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterinclusions = new SqlParameter
            {
                ParameterName = "inclusions",
                Value = inclusions ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterexclusions = new SqlParameter
            {
                ParameterName = "exclusions",
                Value = exclusions ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterdate1 = new SqlParameter
            {
                ParameterName = "date1",
                Value = date1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterdate2 = new SqlParameter
            {
                ParameterName = "date2",
                Value = date2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parametersr = new SqlParameter
            {
                ParameterName = "sr",
                Value = sr ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergroup = new SqlParameter
            {
                ParameterName = "group",
                Value = group ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametersubgroup = new SqlParameter
            {
                ParameterName = "subgroup",
                Value = subgroup ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametermanager = new SqlParameter
            {
                ParameterName = "manager",
                Value = manager ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameteraccounts = new SqlParameter
            {
                ParameterName = "accounts",
                Value = accounts ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterstate = new SqlParameter
            {
                ParameterName = "state",
                Value = state ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterinsurance = new SqlParameter
            {
                ParameterName = "insurance",
                Value = insurance ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterzero = new SqlParameter
            {
                ParameterName = "zero",
                Value = zero ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergm = new SqlParameter
            {
                ParameterName = "gm",
                Value = gm ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_get_count_pl_charges_pivot] @pagesize, @inclusions, @exclusions, @date1, @date2, @sr, @group, @subgroup, @manager, @accounts, @state, @insurance, @zero, @gm", parameterpagesize, parameterinclusions, parameterexclusions, parameterdate1, parameterdate2, parametersr, parametergroup, parametersubgroup, parametermanager, parameteraccounts, parameterstate, parameterinsurance, parameterzero, parametergm, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_get_count_pl_data_pivot(int? inclusions, int? exclusions, DateTime? date1, DateTime? date2, string sr, string group, string subgroup, string manager, string accounts, string state, string negative, string transaction, OutputParameter<int> returnValue = null)
        {
            var parameterinclusions = new SqlParameter
            {
                ParameterName = "inclusions",
                Value = inclusions ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterexclusions = new SqlParameter
            {
                ParameterName = "exclusions",
                Value = exclusions ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterdate1 = new SqlParameter
            {
                ParameterName = "date1",
                Value = date1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterdate2 = new SqlParameter
            {
                ParameterName = "date2",
                Value = date2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parametersr = new SqlParameter
            {
                ParameterName = "sr",
                Value = sr ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergroup = new SqlParameter
            {
                ParameterName = "group",
                Value = group ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametersubgroup = new SqlParameter
            {
                ParameterName = "subgroup",
                Value = subgroup ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametermanager = new SqlParameter
            {
                ParameterName = "manager",
                Value = manager ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameteraccounts = new SqlParameter
            {
                ParameterName = "accounts",
                Value = accounts ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterstate = new SqlParameter
            {
                ParameterName = "state",
                Value = state ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameternegative = new SqlParameter
            {
                ParameterName = "negative",
                Value = negative ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametertransaction = new SqlParameter
            {
                ParameterName = "transaction",
                Value = transaction ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_get_count_pl_data_pivot] @inclusions, @exclusions, @date1, @date2, @sr, @group, @subgroup, @manager, @accounts, @state, @negative, @transaction", parameterinclusions, parameterexclusions, parameterdate1, parameterdate2, parametersr, parametergroup, parametersubgroup, parametermanager, parameteraccounts, parameterstate, parameternegative, parametertransaction, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_get_count_pl_payments_pivot2(int? pagesize, int? inclusions, int? exclusions, DateTime? date1, DateTime? date2, string sr, string group, string subgroup, string manager, string accounts, string state, string insurance, OutputParameter<int> returnValue = null)
        {
            var parameterpagesize = new SqlParameter
            {
                ParameterName = "pagesize",
                Value = pagesize ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterinclusions = new SqlParameter
            {
                ParameterName = "inclusions",
                Value = inclusions ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterexclusions = new SqlParameter
            {
                ParameterName = "exclusions",
                Value = exclusions ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterdate1 = new SqlParameter
            {
                ParameterName = "date1",
                Value = date1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterdate2 = new SqlParameter
            {
                ParameterName = "date2",
                Value = date2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parametersr = new SqlParameter
            {
                ParameterName = "sr",
                Value = sr ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergroup = new SqlParameter
            {
                ParameterName = "group",
                Value = group ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametersubgroup = new SqlParameter
            {
                ParameterName = "subgroup",
                Value = subgroup ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametermanager = new SqlParameter
            {
                ParameterName = "manager",
                Value = manager ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameteraccounts = new SqlParameter
            {
                ParameterName = "accounts",
                Value = accounts ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterstate = new SqlParameter
            {
                ParameterName = "state",
                Value = state ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterinsurance = new SqlParameter
            {
                ParameterName = "insurance",
                Value = insurance ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_get_count_pl_payments_pivot2] @pagesize, @inclusions, @exclusions, @date1, @date2, @sr, @group, @subgroup, @manager, @accounts, @state, @insurance", parameterpagesize, parameterinclusions, parameterexclusions, parameterdate1, parameterdate2, parametersr, parametergroup, parametersubgroup, parametermanager, parameteraccounts, parameterstate, parameterinsurance, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_get_count_pl_reagents_pivot(int? pagenum, int? pagesize, int? inclusions, int? exclusions, DateTime? date1, DateTime? date2, string sr, string group, string subgroup, string manager, string accounts, string state, string ttype, string tname, string tnum, OutputParameter<int> returnValue = null)
        {
            var parameterpagenum = new SqlParameter
            {
                ParameterName = "pagenum",
                Value = pagenum ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterpagesize = new SqlParameter
            {
                ParameterName = "pagesize",
                Value = pagesize ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterinclusions = new SqlParameter
            {
                ParameterName = "inclusions",
                Value = inclusions ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterexclusions = new SqlParameter
            {
                ParameterName = "exclusions",
                Value = exclusions ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterdate1 = new SqlParameter
            {
                ParameterName = "date1",
                Value = date1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterdate2 = new SqlParameter
            {
                ParameterName = "date2",
                Value = date2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parametersr = new SqlParameter
            {
                ParameterName = "sr",
                Value = sr ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergroup = new SqlParameter
            {
                ParameterName = "group",
                Value = group ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametersubgroup = new SqlParameter
            {
                ParameterName = "subgroup",
                Value = subgroup ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametermanager = new SqlParameter
            {
                ParameterName = "manager",
                Value = manager ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameteraccounts = new SqlParameter
            {
                ParameterName = "accounts",
                Value = accounts ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterstate = new SqlParameter
            {
                ParameterName = "state",
                Value = state ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterttype = new SqlParameter
            {
                ParameterName = "ttype",
                Value = ttype ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametertname = new SqlParameter
            {
                ParameterName = "tname",
                Value = tname ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametertnum = new SqlParameter
            {
                ParameterName = "tnum",
                Value = tnum ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_get_count_pl_reagents_pivot] @pagenum, @pagesize, @inclusions, @exclusions, @date1, @date2, @sr, @group, @subgroup, @manager, @accounts, @state, @ttype, @tname, @tnum", parameterpagenum, parameterpagesize, parameterinclusions, parameterexclusions, parameterdate1, parameterdate2, parametersr, parametergroup, parametersubgroup, parametermanager, parameteraccounts, parameterstate, parameterttype, parametertname, parametertnum, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_count_rentResult[]> sp_get_count_rent(string filter0, DateTime? filter1, DateTime? filter2, string filter3, string filter4, string filter5, string filter6, string filter7, string filter8, string filter9, string filter10, string filter11, OutputParameter<int> returnValue = null)
        {
            var parameterfilter0 = new SqlParameter
            {
                ParameterName = "filter0",
                Size = 50,
                Value = filter0 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter1 = new SqlParameter
            {
                ParameterName = "filter1",
                Value = filter1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterfilter2 = new SqlParameter
            {
                ParameterName = "filter2",
                Value = filter2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterfilter3 = new SqlParameter
            {
                ParameterName = "filter3",
                Size = 255,
                Value = filter3 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter4 = new SqlParameter
            {
                ParameterName = "filter4",
                Size = 255,
                Value = filter4 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter5 = new SqlParameter
            {
                ParameterName = "filter5",
                Size = 255,
                Value = filter5 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter6 = new SqlParameter
            {
                ParameterName = "filter6",
                Size = 50,
                Value = filter6 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter7 = new SqlParameter
            {
                ParameterName = "filter7",
                Size = 50,
                Value = filter7 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter8 = new SqlParameter
            {
                ParameterName = "filter8",
                Size = 50,
                Value = filter8 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter9 = new SqlParameter
            {
                ParameterName = "filter9",
                Size = 50,
                Value = filter9 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter10 = new SqlParameter
            {
                ParameterName = "filter10",
                Size = 50,
                Value = filter10 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter11 = new SqlParameter
            {
                ParameterName = "filter11",
                Size = 50,
                Value = filter11 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_count_rentResult>("EXEC @returnValue = [dbo].[sp_get_count_rent] @filter0, @filter1, @filter2, @filter3, @filter4, @filter5, @filter6, @filter7, @filter8, @filter9, @filter10, @filter11", parameterfilter0, parameterfilter1, parameterfilter2, parameterfilter3, parameterfilter4, parameterfilter5, parameterfilter6, parameterfilter7, parameterfilter8, parameterfilter9, parameterfilter10, parameterfilter11, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_get_done_prospective_reps(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_get_done_prospective_reps]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_dx_history_linesResult[]> sp_get_dx_history_lines(string DiagnosisRequestID, OutputParameter<int> returnValue = null)
        {
            var parameterDiagnosisRequestID = new SqlParameter
            {
                ParameterName = "DiagnosisRequestID",
                Size = 50,
                Value = DiagnosisRequestID ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_dx_history_linesResult>("EXEC @returnValue = [dbo].[sp_get_dx_history_lines] @DiagnosisRequestID", parameterDiagnosisRequestID, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_dx_requestsResult[]> sp_get_dx_requests(int? page, string invoice, string insurance, OutputParameter<int> returnValue = null)
        {
            var parameterpage = new SqlParameter
            {
                ParameterName = "page",
                Value = page ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterinvoice = new SqlParameter
            {
                ParameterName = "invoice",
                Size = 50,
                Value = invoice ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterinsurance = new SqlParameter
            {
                ParameterName = "insurance",
                Size = 50,
                Value = insurance ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_dx_requestsResult>("EXEC @returnValue = [dbo].[sp_get_dx_requests] @page, @invoice, @insurance", parameterpage, parameterinvoice, parameterinsurance, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_employeeResult[]> sp_get_employee(long? empl, OutputParameter<int> returnValue = null)
        {
            var parameterempl = new SqlParameter
            {
                ParameterName = "empl",
                Value = empl ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.BigInt,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_employeeResult>("EXEC @returnValue = [dbo].[sp_get_employee] @empl", parameterempl, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_employeesResult[]> sp_get_employees(string user, OutputParameter<int> returnValue = null)
        {
            var parameteruser = new SqlParameter
            {
                ParameterName = "user",
                Size = 100,
                Value = user ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_employeesResult>("EXEC @returnValue = [dbo].[sp_get_employees] @user", parameteruser, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_emr_installResult[]> sp_get_emr_install(string filter0, string filter1, string filter2, DateTime? filter3, DateTime? filter4, string filter5, string filter6, string filter7, string filter8, string filter9, OutputParameter<int> returnValue = null)
        {
            var parameterfilter0 = new SqlParameter
            {
                ParameterName = "filter0",
                Size = 50,
                Value = filter0 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter1 = new SqlParameter
            {
                ParameterName = "filter1",
                Size = 50,
                Value = filter1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter2 = new SqlParameter
            {
                ParameterName = "filter2",
                Size = 50,
                Value = filter2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter3 = new SqlParameter
            {
                ParameterName = "filter3",
                Value = filter3 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterfilter4 = new SqlParameter
            {
                ParameterName = "filter4",
                Value = filter4 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterfilter5 = new SqlParameter
            {
                ParameterName = "filter5",
                Size = 50,
                Value = filter5 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter6 = new SqlParameter
            {
                ParameterName = "filter6",
                Size = 50,
                Value = filter6 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter7 = new SqlParameter
            {
                ParameterName = "filter7",
                Size = 50,
                Value = filter7 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter8 = new SqlParameter
            {
                ParameterName = "filter8",
                Size = 50,
                Value = filter8 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter9 = new SqlParameter
            {
                ParameterName = "filter9",
                Size = 2,
                Value = filter9 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_emr_installResult>("EXEC @returnValue = [dbo].[sp_get_emr_install] @filter0, @filter1, @filter2, @filter3, @filter4, @filter5, @filter6, @filter7, @filter8, @filter9", parameterfilter0, parameterfilter1, parameterfilter2, parameterfilter3, parameterfilter4, parameterfilter5, parameterfilter6, parameterfilter7, parameterfilter8, parameterfilter9, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_emr_maintResult[]> sp_get_emr_maint(string filter0, string filter1, string filter2, DateTime? filter3, DateTime? filter4, string filter5, int? page, OutputParameter<int> returnValue = null)
        {
            var parameterfilter0 = new SqlParameter
            {
                ParameterName = "filter0",
                Size = 50,
                Value = filter0 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter1 = new SqlParameter
            {
                ParameterName = "filter1",
                Size = 50,
                Value = filter1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter2 = new SqlParameter
            {
                ParameterName = "filter2",
                Size = 50,
                Value = filter2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter3 = new SqlParameter
            {
                ParameterName = "filter3",
                Value = filter3 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterfilter4 = new SqlParameter
            {
                ParameterName = "filter4",
                Value = filter4 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterfilter5 = new SqlParameter
            {
                ParameterName = "filter5",
                Size = 50,
                Value = filter5 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterpage = new SqlParameter
            {
                ParameterName = "page",
                Value = page ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_emr_maintResult>("EXEC @returnValue = [dbo].[sp_get_emr_maint] @filter0, @filter1, @filter2, @filter3, @filter4, @filter5, @page", parameterfilter0, parameterfilter1, parameterfilter2, parameterfilter3, parameterfilter4, parameterfilter5, parameterpage, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_emrsResult[]> sp_get_emrs(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_emrsResult>("EXEC @returnValue = [dbo].[sp_get_emrs]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_groupsResult[]> sp_get_groups(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_groupsResult>("EXEC @returnValue = [dbo].[sp_get_groups]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_icd_codes_listResult[]> sp_get_icd_codes_list(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_icd_codes_listResult>("EXEC @returnValue = [dbo].[sp_get_icd_codes_list]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_invoice_chartResult[]> sp_get_invoice_chart(string invoice, OutputParameter<int> returnValue = null)
        {
            var parameterinvoice = new SqlParameter
            {
                ParameterName = "invoice",
                Size = 50,
                Value = invoice ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_invoice_chartResult>("EXEC @returnValue = [dbo].[sp_get_invoice_chart] @invoice", parameterinvoice, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_last_importResult[]> sp_get_last_import(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_last_importResult>("EXEC @returnValue = [dbo].[sp_get_last_import]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_marketing_accountsResult[]> sp_get_marketing_accounts(int? pagenum, int? pagesize, string filter0, string filter1, string filter2, string filter3, string filter4, string filter5, string filter6, string filter7, string filter8, string filter9, string filter10, string filter11, string filter12, string filter13, string filter14, string filter15, string filter16, string filter17, string filter18, string filter19, string filter20, OutputParameter<int> returnValue = null)
        {
            var parameterpagenum = new SqlParameter
            {
                ParameterName = "pagenum",
                Value = pagenum ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterpagesize = new SqlParameter
            {
                ParameterName = "pagesize",
                Value = pagesize ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterfilter0 = new SqlParameter
            {
                ParameterName = "filter0",
                Size = 255,
                Value = filter0 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter1 = new SqlParameter
            {
                ParameterName = "filter1",
                Size = 255,
                Value = filter1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter2 = new SqlParameter
            {
                ParameterName = "filter2",
                Size = 255,
                Value = filter2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter3 = new SqlParameter
            {
                ParameterName = "filter3",
                Size = 255,
                Value = filter3 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter4 = new SqlParameter
            {
                ParameterName = "filter4",
                Size = 255,
                Value = filter4 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter5 = new SqlParameter
            {
                ParameterName = "filter5",
                Size = 255,
                Value = filter5 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter6 = new SqlParameter
            {
                ParameterName = "filter6",
                Size = 255,
                Value = filter6 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter7 = new SqlParameter
            {
                ParameterName = "filter7",
                Size = 255,
                Value = filter7 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter8 = new SqlParameter
            {
                ParameterName = "filter8",
                Size = 255,
                Value = filter8 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter9 = new SqlParameter
            {
                ParameterName = "filter9",
                Size = 255,
                Value = filter9 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter10 = new SqlParameter
            {
                ParameterName = "filter10",
                Size = 255,
                Value = filter10 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter11 = new SqlParameter
            {
                ParameterName = "filter11",
                Size = 255,
                Value = filter11 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter12 = new SqlParameter
            {
                ParameterName = "filter12",
                Size = 255,
                Value = filter12 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter13 = new SqlParameter
            {
                ParameterName = "filter13",
                Size = 255,
                Value = filter13 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter14 = new SqlParameter
            {
                ParameterName = "filter14",
                Size = 255,
                Value = filter14 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter15 = new SqlParameter
            {
                ParameterName = "filter15",
                Size = 255,
                Value = filter15 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter16 = new SqlParameter
            {
                ParameterName = "filter16",
                Size = 255,
                Value = filter16 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter17 = new SqlParameter
            {
                ParameterName = "filter17",
                Size = 255,
                Value = filter17 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter18 = new SqlParameter
            {
                ParameterName = "filter18",
                Size = 255,
                Value = filter18 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter19 = new SqlParameter
            {
                ParameterName = "filter19",
                Size = 255,
                Value = filter19 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter20 = new SqlParameter
            {
                ParameterName = "filter20",
                Size = 255,
                Value = filter20 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_marketing_accountsResult>("EXEC @returnValue = [dbo].[sp_get_marketing_accounts] @pagenum, @pagesize, @filter0, @filter1, @filter2, @filter3, @filter4, @filter5, @filter6, @filter7, @filter8, @filter9, @filter10, @filter11, @filter12, @filter13, @filter14, @filter15, @filter16, @filter17, @filter18, @filter19, @filter20", parameterpagenum, parameterpagesize, parameterfilter0, parameterfilter1, parameterfilter2, parameterfilter3, parameterfilter4, parameterfilter5, parameterfilter6, parameterfilter7, parameterfilter8, parameterfilter9, parameterfilter10, parameterfilter11, parameterfilter12, parameterfilter13, parameterfilter14, parameterfilter15, parameterfilter16, parameterfilter17, parameterfilter18, parameterfilter19, parameterfilter20, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_marketing_specialtiesResult[]> sp_get_marketing_specialties(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_marketing_specialtiesResult>("EXEC @returnValue = [dbo].[sp_get_marketing_specialties]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_missing_distributionResult[]> sp_get_missing_distribution(string user, OutputParameter<int> returnValue = null)
        {
            var parameteruser = new SqlParameter
            {
                ParameterName = "user",
                Size = 100,
                Value = user ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_missing_distributionResult>("EXEC @returnValue = [dbo].[sp_get_missing_distribution] @user", parameteruser, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_mr_clientsResult[]> sp_get_mr_clients(string filter0, string filter1, OutputParameter<int> returnValue = null)
        {
            var parameterfilter0 = new SqlParameter
            {
                ParameterName = "filter0",
                Size = 50,
                Value = filter0 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter1 = new SqlParameter
            {
                ParameterName = "filter1",
                Size = 50,
                Value = filter1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_mr_clientsResult>("EXEC @returnValue = [dbo].[sp_get_mr_clients] @filter0, @filter1", parameterfilter0, parameterfilter1, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_mr_requestResult[]> sp_get_mr_request(string chart, string invoice, OutputParameter<int> returnValue = null)
        {
            var parameterchart = new SqlParameter
            {
                ParameterName = "chart",
                Size = 50,
                Value = chart ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterinvoice = new SqlParameter
            {
                ParameterName = "invoice",
                Size = 50,
                Value = invoice ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_mr_requestResult>("EXEC @returnValue = [dbo].[sp_get_mr_request] @chart, @invoice", parameterchart, parameterinvoice, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_mr_requestsResult[]> sp_get_mr_requests(int? client, OutputParameter<int> returnValue = null)
        {
            var parameterclient = new SqlParameter
            {
                ParameterName = "client",
                Value = client ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_mr_requestsResult>("EXEC @returnValue = [dbo].[sp_get_mr_requests] @client", parameterclient, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_mr_valuesResult[]> sp_get_mr_values(int? client, OutputParameter<int> returnValue = null)
        {
            var parameterclient = new SqlParameter
            {
                ParameterName = "client",
                Value = client ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_mr_valuesResult>("EXEC @returnValue = [dbo].[sp_get_mr_values] @client", parameterclient, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_num_accountsResult[]> sp_get_num_accounts(string filter0, string filter1, string filter2, string filter3, string filter4, string filter5, string filter6, string filter7, string filter8, string filter9, string filter10, string filter11, string filter12, string filter13, string filter14, OutputParameter<int> returnValue = null)
        {
            var parameterfilter0 = new SqlParameter
            {
                ParameterName = "filter0",
                Size = 255,
                Value = filter0 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter1 = new SqlParameter
            {
                ParameterName = "filter1",
                Size = 255,
                Value = filter1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter2 = new SqlParameter
            {
                ParameterName = "filter2",
                Size = 255,
                Value = filter2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter3 = new SqlParameter
            {
                ParameterName = "filter3",
                Size = 255,
                Value = filter3 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter4 = new SqlParameter
            {
                ParameterName = "filter4",
                Size = 255,
                Value = filter4 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter5 = new SqlParameter
            {
                ParameterName = "filter5",
                Size = 255,
                Value = filter5 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter6 = new SqlParameter
            {
                ParameterName = "filter6",
                Size = 255,
                Value = filter6 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter7 = new SqlParameter
            {
                ParameterName = "filter7",
                Size = 255,
                Value = filter7 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter8 = new SqlParameter
            {
                ParameterName = "filter8",
                Size = 255,
                Value = filter8 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter9 = new SqlParameter
            {
                ParameterName = "filter9",
                Size = 255,
                Value = filter9 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter10 = new SqlParameter
            {
                ParameterName = "filter10",
                Size = 255,
                Value = filter10 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter11 = new SqlParameter
            {
                ParameterName = "filter11",
                Size = 255,
                Value = filter11 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter12 = new SqlParameter
            {
                ParameterName = "filter12",
                Size = 255,
                Value = filter12 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter13 = new SqlParameter
            {
                ParameterName = "filter13",
                Size = 255,
                Value = filter13 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter14 = new SqlParameter
            {
                ParameterName = "filter14",
                Size = 255,
                Value = filter14 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_num_accountsResult>("EXEC @returnValue = [dbo].[sp_get_num_accounts] @filter0, @filter1, @filter2, @filter3, @filter4, @filter5, @filter6, @filter7, @filter8, @filter9, @filter10, @filter11, @filter12, @filter13, @filter14", parameterfilter0, parameterfilter1, parameterfilter2, parameterfilter3, parameterfilter4, parameterfilter5, parameterfilter6, parameterfilter7, parameterfilter8, parameterfilter9, parameterfilter10, parameterfilter11, parameterfilter12, parameterfilter13, parameterfilter14, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_num_actionsResult[]> sp_get_num_actions(string user, DateTime? date1, DateTime? date2, string action, string reason, string group, OutputParameter<int> returnValue = null)
        {
            var parameteruser = new SqlParameter
            {
                ParameterName = "user",
                Size = 50,
                Value = user ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterdate1 = new SqlParameter
            {
                ParameterName = "date1",
                Value = date1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };

            var parameterdate2 = new SqlParameter
            {
                ParameterName = "date2",
                Value = date2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };

            var parameteraction = new SqlParameter
            {
                ParameterName = "action",
                Size = 50,
                Value = action ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreason = new SqlParameter
            {
                ParameterName = "reason",
                Size = 100,
                Value = reason ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergroup = new SqlParameter
            {
                ParameterName = "group",
                Size = 50,
                Value = group ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_num_actionsResult>("EXEC @returnValue = [dbo].[sp_get_num_actions] @user, @date1, @date2, @action, @reason, @group", parameteruser, parameterdate1, parameterdate2, parameteraction, parameterreason, parametergroup, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_num_alertsResult[]> sp_get_num_alerts(string user, string group, string invoice, OutputParameter<int> returnValue = null)
        {
            var parameteruser = new SqlParameter
            {
                ParameterName = "user",
                Size = 50,
                Value = user ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergroup = new SqlParameter
            {
                ParameterName = "group",
                Size = 50,
                Value = group ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterinvoice = new SqlParameter
            {
                ParameterName = "invoice",
                Size = 50,
                Value = invoice ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_num_alertsResult>("EXEC @returnValue = [dbo].[sp_get_num_alerts] @user, @group, @invoice", parameteruser, parametergroup, parameterinvoice, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_num_ukraine_actionsResult[]> sp_get_num_ukraine_actions(string user, DateTime? date1, DateTime? date2, string action, string source, OutputParameter<int> returnValue = null)
        {
            var parameteruser = new SqlParameter
            {
                ParameterName = "user",
                Size = 50,
                Value = user ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterdate1 = new SqlParameter
            {
                ParameterName = "date1",
                Value = date1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };

            var parameterdate2 = new SqlParameter
            {
                ParameterName = "date2",
                Value = date2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };

            var parameteraction = new SqlParameter
            {
                ParameterName = "action",
                Size = 50,
                Value = action ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametersource = new SqlParameter
            {
                ParameterName = "source",
                Size = 50,
                Value = source ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_num_ukraine_actionsResult>("EXEC @returnValue = [dbo].[sp_get_num_ukraine_actions] @user, @date1, @date2, @action, @source", parameteruser, parameterdate1, parameterdate2, parameteraction, parametersource, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_num_ukraine_alertsResult[]> sp_get_num_ukraine_alerts(string user, string source, OutputParameter<int> returnValue = null)
        {
            var parameteruser = new SqlParameter
            {
                ParameterName = "user",
                Size = 50,
                Value = user ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametersource = new SqlParameter
            {
                ParameterName = "source",
                Size = 50,
                Value = source ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_num_ukraine_alertsResult>("EXEC @returnValue = [dbo].[sp_get_num_ukraine_alerts] @user, @source", parameteruser, parametersource, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_permsResult[]> sp_get_perms(string user, OutputParameter<int> returnValue = null)
        {
            var parameteruser = new SqlParameter
            {
                ParameterName = "user",
                Size = 50,
                Value = user ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_permsResult>("EXEC @returnValue = [dbo].[sp_get_perms] @user", parameteruser, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_get_pgx_reports(string file, OutputParameter<int> returnValue = null)
        {
            var parameterfile = new SqlParameter
            {
                ParameterName = "file",
                Size = 255,
                Value = file ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_get_pgx_reports] @file", parameterfile, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_phleb_distributionResult[]> sp_get_phleb_distribution(string filter0, string filter1, string filter2, string filter3, string filter4, string filter5, string filter6, string filter7, string filter10, DateTime? date1, DateTime? date2, int? page, string user, OutputParameter<int> returnValue = null)
        {
            var parameterfilter0 = new SqlParameter
            {
                ParameterName = "filter0",
                Size = 255,
                Value = filter0 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter1 = new SqlParameter
            {
                ParameterName = "filter1",
                Size = 255,
                Value = filter1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter2 = new SqlParameter
            {
                ParameterName = "filter2",
                Size = 255,
                Value = filter2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter3 = new SqlParameter
            {
                ParameterName = "filter3",
                Size = 255,
                Value = filter3 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter4 = new SqlParameter
            {
                ParameterName = "filter4",
                Size = 255,
                Value = filter4 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter5 = new SqlParameter
            {
                ParameterName = "filter5",
                Size = 255,
                Value = filter5 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter6 = new SqlParameter
            {
                ParameterName = "filter6",
                Size = 255,
                Value = filter6 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter7 = new SqlParameter
            {
                ParameterName = "filter7",
                Size = 255,
                Value = filter7 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter10 = new SqlParameter
            {
                ParameterName = "filter10",
                Size = 10,
                Value = filter10 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterdate1 = new SqlParameter
            {
                ParameterName = "date1",
                Value = date1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterdate2 = new SqlParameter
            {
                ParameterName = "date2",
                Value = date2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterpage = new SqlParameter
            {
                ParameterName = "page",
                Value = page ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameteruser = new SqlParameter
            {
                ParameterName = "user",
                Size = 100,
                Value = user ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_phleb_distributionResult>("EXEC @returnValue = [dbo].[sp_get_phleb_distribution] @filter0, @filter1, @filter2, @filter3, @filter4, @filter5, @filter6, @filter7, @filter10, @date1, @date2, @page, @user", parameterfilter0, parameterfilter1, parameterfilter2, parameterfilter3, parameterfilter4, parameterfilter5, parameterfilter6, parameterfilter7, parameterfilter10, parameterdate1, parameterdate2, parameterpage, parameteruser, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_phleb_expensesResult[]> sp_get_phleb_expenses(DateTime? date1, DateTime? date2, string rep, string phleb, string account, OutputParameter<int> returnValue = null)
        {
            var parameterdate1 = new SqlParameter
            {
                ParameterName = "date1",
                Value = date1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterdate2 = new SqlParameter
            {
                ParameterName = "date2",
                Value = date2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterrep = new SqlParameter
            {
                ParameterName = "rep",
                Size = 50,
                Value = rep ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterphleb = new SqlParameter
            {
                ParameterName = "phleb",
                Size = 50,
                Value = phleb ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameteraccount = new SqlParameter
            {
                ParameterName = "account",
                Size = 50,
                Value = account ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_phleb_expensesResult>("EXEC @returnValue = [dbo].[sp_get_phleb_expenses] @date1, @date2, @rep, @phleb, @account", parameterdate1, parameterdate2, parameterrep, parameterphleb, parameteraccount, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_phleb_groupsResult[]> sp_get_phleb_groups(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_phleb_groupsResult>("EXEC @returnValue = [dbo].[sp_get_phleb_groups]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_phlebotomistsResult[]> sp_get_phlebotomists(string group, string empl, string lname, string fname, int? page, OutputParameter<int> returnValue = null)
        {
            var parametergroup = new SqlParameter
            {
                ParameterName = "group",
                Size = 50,
                Value = group ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterempl = new SqlParameter
            {
                ParameterName = "empl",
                Size = 10,
                Value = empl ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterlname = new SqlParameter
            {
                ParameterName = "lname",
                Size = 50,
                Value = lname ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfname = new SqlParameter
            {
                ParameterName = "fname",
                Size = 50,
                Value = fname ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterpage = new SqlParameter
            {
                ParameterName = "page",
                Value = page ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_phlebotomistsResult>("EXEC @returnValue = [dbo].[sp_get_phlebotomists] @group, @empl, @lname, @fname, @page", parametergroup, parameterempl, parameterlname, parameterfname, parameterpage, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_pivot_reportResult[]> sp_get_pivot_report(string filter0, string filter1, string filter2, string filter3, string filter4, string filter5, OutputParameter<int> returnValue = null)
        {
            var parameterfilter0 = new SqlParameter
            {
                ParameterName = "filter0",
                Size = 255,
                Value = filter0 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter1 = new SqlParameter
            {
                ParameterName = "filter1",
                Size = 50,
                Value = filter1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter2 = new SqlParameter
            {
                ParameterName = "filter2",
                Size = 50,
                Value = filter2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter3 = new SqlParameter
            {
                ParameterName = "filter3",
                Size = 50,
                Value = filter3 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter4 = new SqlParameter
            {
                ParameterName = "filter4",
                Size = 50,
                Value = filter4 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter5 = new SqlParameter
            {
                ParameterName = "filter5",
                Size = 50,
                Value = filter5 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_pivot_reportResult>("EXEC @returnValue = [dbo].[sp_get_pivot_report] @filter0, @filter1, @filter2, @filter3, @filter4, @filter5", parameterfilter0, parameterfilter1, parameterfilter2, parameterfilter3, parameterfilter4, parameterfilter5, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_pl_accountsResult[]> sp_get_pl_accounts(int? pagenum, int? pagesize, string filter0, string filter1, string filter2, string filter3, string filter4, string filter5, string filter6, string filter7, string filter8, string filter9, string filter10, string filter11, string filter12, string filter13, string filter14, string filter15, OutputParameter<int> returnValue = null)
        {
            var parameterpagenum = new SqlParameter
            {
                ParameterName = "pagenum",
                Value = pagenum ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterpagesize = new SqlParameter
            {
                ParameterName = "pagesize",
                Value = pagesize ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterfilter0 = new SqlParameter
            {
                ParameterName = "filter0",
                Size = 255,
                Value = filter0 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter1 = new SqlParameter
            {
                ParameterName = "filter1",
                Size = 255,
                Value = filter1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter2 = new SqlParameter
            {
                ParameterName = "filter2",
                Size = 255,
                Value = filter2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter3 = new SqlParameter
            {
                ParameterName = "filter3",
                Size = 255,
                Value = filter3 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter4 = new SqlParameter
            {
                ParameterName = "filter4",
                Size = 255,
                Value = filter4 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter5 = new SqlParameter
            {
                ParameterName = "filter5",
                Size = 255,
                Value = filter5 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter6 = new SqlParameter
            {
                ParameterName = "filter6",
                Size = 255,
                Value = filter6 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter7 = new SqlParameter
            {
                ParameterName = "filter7",
                Size = 255,
                Value = filter7 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter8 = new SqlParameter
            {
                ParameterName = "filter8",
                Size = 255,
                Value = filter8 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter9 = new SqlParameter
            {
                ParameterName = "filter9",
                Size = 255,
                Value = filter9 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter10 = new SqlParameter
            {
                ParameterName = "filter10",
                Size = 255,
                Value = filter10 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter11 = new SqlParameter
            {
                ParameterName = "filter11",
                Size = 255,
                Value = filter11 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter12 = new SqlParameter
            {
                ParameterName = "filter12",
                Size = 255,
                Value = filter12 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter13 = new SqlParameter
            {
                ParameterName = "filter13",
                Size = 255,
                Value = filter13 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter14 = new SqlParameter
            {
                ParameterName = "filter14",
                Size = 255,
                Value = filter14 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter15 = new SqlParameter
            {
                ParameterName = "filter15",
                Size = 255,
                Value = filter15 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_pl_accountsResult>("EXEC @returnValue = [dbo].[sp_get_pl_accounts] @pagenum, @pagesize, @filter0, @filter1, @filter2, @filter3, @filter4, @filter5, @filter6, @filter7, @filter8, @filter9, @filter10, @filter11, @filter12, @filter13, @filter14, @filter15", parameterpagenum, parameterpagesize, parameterfilter0, parameterfilter1, parameterfilter2, parameterfilter3, parameterfilter4, parameterfilter5, parameterfilter6, parameterfilter7, parameterfilter8, parameterfilter9, parameterfilter10, parameterfilter11, parameterfilter12, parameterfilter13, parameterfilter14, parameterfilter15, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_get_pl_bonuses_pivot(int? pagenum, int? pagesize, int? inclusions, int? exclusions, DateTime? date1, DateTime? date2, string sr, string group, string subgroup, string accounts, string transaction, OutputParameter<int> returnValue = null)
        {
            var parameterpagenum = new SqlParameter
            {
                ParameterName = "pagenum",
                Value = pagenum ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterpagesize = new SqlParameter
            {
                ParameterName = "pagesize",
                Value = pagesize ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterinclusions = new SqlParameter
            {
                ParameterName = "inclusions",
                Value = inclusions ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterexclusions = new SqlParameter
            {
                ParameterName = "exclusions",
                Value = exclusions ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterdate1 = new SqlParameter
            {
                ParameterName = "date1",
                Value = date1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterdate2 = new SqlParameter
            {
                ParameterName = "date2",
                Value = date2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parametersr = new SqlParameter
            {
                ParameterName = "sr",
                Value = sr ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergroup = new SqlParameter
            {
                ParameterName = "group",
                Value = group ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametersubgroup = new SqlParameter
            {
                ParameterName = "subgroup",
                Value = subgroup ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameteraccounts = new SqlParameter
            {
                ParameterName = "accounts",
                Value = accounts ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametertransaction = new SqlParameter
            {
                ParameterName = "transaction",
                Value = transaction ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_get_pl_bonuses_pivot] @pagenum, @pagesize, @inclusions, @exclusions, @date1, @date2, @sr, @group, @subgroup, @accounts, @transaction", parameterpagenum, parameterpagesize, parameterinclusions, parameterexclusions, parameterdate1, parameterdate2, parametersr, parametergroup, parametersubgroup, parameteraccounts, parametertransaction, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_pl_charges_excelResult[]> sp_get_pl_charges_excel(int? pagenum, int? pagesize, int? inclusions, int? exclusions, DateTime? date1, DateTime? date2, string sr, string group, string subgroup, string manager, string accounts, string state, string insurance, string zero, string gm, string user, OutputParameter<int> returnValue = null)
        {
            var parameterpagenum = new SqlParameter
            {
                ParameterName = "pagenum",
                Value = pagenum ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterpagesize = new SqlParameter
            {
                ParameterName = "pagesize",
                Value = pagesize ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterinclusions = new SqlParameter
            {
                ParameterName = "inclusions",
                Value = inclusions ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterexclusions = new SqlParameter
            {
                ParameterName = "exclusions",
                Value = exclusions ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterdate1 = new SqlParameter
            {
                ParameterName = "date1",
                Value = date1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterdate2 = new SqlParameter
            {
                ParameterName = "date2",
                Value = date2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parametersr = new SqlParameter
            {
                ParameterName = "sr",
                Value = sr ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergroup = new SqlParameter
            {
                ParameterName = "group",
                Value = group ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametersubgroup = new SqlParameter
            {
                ParameterName = "subgroup",
                Value = subgroup ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametermanager = new SqlParameter
            {
                ParameterName = "manager",
                Value = manager ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameteraccounts = new SqlParameter
            {
                ParameterName = "accounts",
                Value = accounts ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterstate = new SqlParameter
            {
                ParameterName = "state",
                Value = state ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterinsurance = new SqlParameter
            {
                ParameterName = "insurance",
                Value = insurance ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterzero = new SqlParameter
            {
                ParameterName = "zero",
                Value = zero ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergm = new SqlParameter
            {
                ParameterName = "gm",
                Value = gm ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameteruser = new SqlParameter
            {
                ParameterName = "user",
                Size = 50,
                Value = user ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_pl_charges_excelResult>("EXEC @returnValue = [dbo].[sp_get_pl_charges_excel] @pagenum, @pagesize, @inclusions, @exclusions, @date1, @date2, @sr, @group, @subgroup, @manager, @accounts, @state, @insurance, @zero, @gm, @user", parameterpagenum, parameterpagesize, parameterinclusions, parameterexclusions, parameterdate1, parameterdate2, parametersr, parametergroup, parametersubgroup, parametermanager, parameteraccounts, parameterstate, parameterinsurance, parameterzero, parametergm, parameteruser, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_pl_charges_insurancesResult[]> sp_get_pl_charges_insurances(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_pl_charges_insurancesResult>("EXEC @returnValue = [dbo].[sp_get_pl_charges_insurances]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_get_pl_charges_pivot(int? pagenum, int? pagesize, int? inclusions, int? exclusions, DateTime? date1, DateTime? date2, string sr, string group, string subgroup, string manager, string accounts, string state, string insurance, string zero, string gm, OutputParameter<int> returnValue = null)
        {
            var parameterpagenum = new SqlParameter
            {
                ParameterName = "pagenum",
                Value = pagenum ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterpagesize = new SqlParameter
            {
                ParameterName = "pagesize",
                Value = pagesize ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterinclusions = new SqlParameter
            {
                ParameterName = "inclusions",
                Value = inclusions ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterexclusions = new SqlParameter
            {
                ParameterName = "exclusions",
                Value = exclusions ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterdate1 = new SqlParameter
            {
                ParameterName = "date1",
                Value = date1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterdate2 = new SqlParameter
            {
                ParameterName = "date2",
                Value = date2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parametersr = new SqlParameter
            {
                ParameterName = "sr",
                Value = sr ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergroup = new SqlParameter
            {
                ParameterName = "group",
                Value = group ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametersubgroup = new SqlParameter
            {
                ParameterName = "subgroup",
                Value = subgroup ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametermanager = new SqlParameter
            {
                ParameterName = "manager",
                Value = manager ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameteraccounts = new SqlParameter
            {
                ParameterName = "accounts",
                Value = accounts ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterstate = new SqlParameter
            {
                ParameterName = "state",
                Value = state ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterinsurance = new SqlParameter
            {
                ParameterName = "insurance",
                Value = insurance ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterzero = new SqlParameter
            {
                ParameterName = "zero",
                Value = zero ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergm = new SqlParameter
            {
                ParameterName = "gm",
                Value = gm ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_get_pl_charges_pivot] @pagenum, @pagesize, @inclusions, @exclusions, @date1, @date2, @sr, @group, @subgroup, @manager, @accounts, @state, @insurance, @zero, @gm", parameterpagenum, parameterpagesize, parameterinclusions, parameterexclusions, parameterdate1, parameterdate2, parametersr, parametergroup, parametersubgroup, parametermanager, parameteraccounts, parameterstate, parameterinsurance, parameterzero, parametergm, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_pl_data_accountsResult[]> sp_get_pl_data_accounts(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_pl_data_accountsResult>("EXEC @returnValue = [dbo].[sp_get_pl_data_accounts]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_pl_data_groupsResult[]> sp_get_pl_data_groups(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_pl_data_groupsResult>("EXEC @returnValue = [dbo].[sp_get_pl_data_groups]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_pl_data_managersResult[]> sp_get_pl_data_managers(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_pl_data_managersResult>("EXEC @returnValue = [dbo].[sp_get_pl_data_managers]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_get_pl_data_pivot(int? pagenum, int? pagesize, int? inclusions, int? exclusions, DateTime? date1, DateTime? date2, string sr, string group, string subgroup, string manager, string accounts, string state, string negative, string transaction, OutputParameter<int> returnValue = null)
        {
            var parameterpagenum = new SqlParameter
            {
                ParameterName = "pagenum",
                Value = pagenum ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterpagesize = new SqlParameter
            {
                ParameterName = "pagesize",
                Value = pagesize ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterinclusions = new SqlParameter
            {
                ParameterName = "inclusions",
                Value = inclusions ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterexclusions = new SqlParameter
            {
                ParameterName = "exclusions",
                Value = exclusions ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterdate1 = new SqlParameter
            {
                ParameterName = "date1",
                Value = date1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterdate2 = new SqlParameter
            {
                ParameterName = "date2",
                Value = date2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parametersr = new SqlParameter
            {
                ParameterName = "sr",
                Value = sr ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergroup = new SqlParameter
            {
                ParameterName = "group",
                Value = group ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametersubgroup = new SqlParameter
            {
                ParameterName = "subgroup",
                Value = subgroup ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametermanager = new SqlParameter
            {
                ParameterName = "manager",
                Value = manager ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameteraccounts = new SqlParameter
            {
                ParameterName = "accounts",
                Value = accounts ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterstate = new SqlParameter
            {
                ParameterName = "state",
                Value = state ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameternegative = new SqlParameter
            {
                ParameterName = "negative",
                Value = negative ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametertransaction = new SqlParameter
            {
                ParameterName = "transaction",
                Value = transaction ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_get_pl_data_pivot] @pagenum, @pagesize, @inclusions, @exclusions, @date1, @date2, @sr, @group, @subgroup, @manager, @accounts, @state, @negative, @transaction", parameterpagenum, parameterpagesize, parameterinclusions, parameterexclusions, parameterdate1, parameterdate2, parametersr, parametergroup, parametersubgroup, parametermanager, parameteraccounts, parameterstate, parameternegative, parametertransaction, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_pl_data_repsResult[]> sp_get_pl_data_reps(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_pl_data_repsResult>("EXEC @returnValue = [dbo].[sp_get_pl_data_reps]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_pl_data_statesResult[]> sp_get_pl_data_states(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_pl_data_statesResult>("EXEC @returnValue = [dbo].[sp_get_pl_data_states]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_pl_data_subgroupsResult[]> sp_get_pl_data_subgroups(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_pl_data_subgroupsResult>("EXEC @returnValue = [dbo].[sp_get_pl_data_subgroups]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_pl_data_test_numbersResult[]> sp_get_pl_data_test_numbers(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_pl_data_test_numbersResult>("EXEC @returnValue = [dbo].[sp_get_pl_data_test_numbers]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_pl_groupsResult[]> sp_get_pl_groups(string filter0, string filter1, string filter2, string filter4, string filter5, string filter6, string filter7, string filter8, string filter9, string filter10, string filter11, OutputParameter<int> returnValue = null)
        {
            var parameterfilter0 = new SqlParameter
            {
                ParameterName = "filter0",
                Size = 255,
                Value = filter0 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter1 = new SqlParameter
            {
                ParameterName = "filter1",
                Size = 255,
                Value = filter1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter2 = new SqlParameter
            {
                ParameterName = "filter2",
                Size = 255,
                Value = filter2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter4 = new SqlParameter
            {
                ParameterName = "filter4",
                Size = 255,
                Value = filter4 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter5 = new SqlParameter
            {
                ParameterName = "filter5",
                Size = 255,
                Value = filter5 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter6 = new SqlParameter
            {
                ParameterName = "filter6",
                Size = 255,
                Value = filter6 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter7 = new SqlParameter
            {
                ParameterName = "filter7",
                Size = 255,
                Value = filter7 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter8 = new SqlParameter
            {
                ParameterName = "filter8",
                Size = 255,
                Value = filter8 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter9 = new SqlParameter
            {
                ParameterName = "filter9",
                Size = 255,
                Value = filter9 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter10 = new SqlParameter
            {
                ParameterName = "filter10",
                Size = 255,
                Value = filter10 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter11 = new SqlParameter
            {
                ParameterName = "filter11",
                Size = 255,
                Value = filter11 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_pl_groupsResult>("EXEC @returnValue = [dbo].[sp_get_pl_groups] @filter0, @filter1, @filter2, @filter4, @filter5, @filter6, @filter7, @filter8, @filter9, @filter10, @filter11", parameterfilter0, parameterfilter1, parameterfilter2, parameterfilter4, parameterfilter5, parameterfilter6, parameterfilter7, parameterfilter8, parameterfilter9, parameterfilter10, parameterfilter11, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_pl_noteResult[]> sp_get_pl_note(string sr, int? gr, decimal? sg, int? ac, string an, OutputParameter<int> returnValue = null)
        {
            var parametersr = new SqlParameter
            {
                ParameterName = "sr",
                Size = 50,
                Value = sr ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergr = new SqlParameter
            {
                ParameterName = "gr",
                Value = gr ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parametersg = new SqlParameter
            {
                ParameterName = "sg",
                Precision = 10,
                Scale = 3,
                Value = sg ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };

            var parameterac = new SqlParameter
            {
                ParameterName = "ac",
                Value = ac ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameteran = new SqlParameter
            {
                ParameterName = "an",
                Size = 50,
                Value = an ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_pl_noteResult>("EXEC @returnValue = [dbo].[sp_get_pl_note] @sr, @gr, @sg, @ac, @an", parametersr, parametergr, parametersg, parameterac, parameteran, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_pl_payments_insurancesResult[]> sp_get_pl_payments_insurances(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_pl_payments_insurancesResult>("EXEC @returnValue = [dbo].[sp_get_pl_payments_insurances]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_get_pl_payments_pivot(int? pagenum, int? pagesize, int? inclusions, int? exclusions, DateTime? date1, DateTime? date2, string sr, string group, string subgroup, string manager, string accounts, string state, OutputParameter<int> returnValue = null)
        {
            var parameterpagenum = new SqlParameter
            {
                ParameterName = "pagenum",
                Value = pagenum ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterpagesize = new SqlParameter
            {
                ParameterName = "pagesize",
                Value = pagesize ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterinclusions = new SqlParameter
            {
                ParameterName = "inclusions",
                Value = inclusions ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterexclusions = new SqlParameter
            {
                ParameterName = "exclusions",
                Value = exclusions ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterdate1 = new SqlParameter
            {
                ParameterName = "date1",
                Value = date1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterdate2 = new SqlParameter
            {
                ParameterName = "date2",
                Value = date2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parametersr = new SqlParameter
            {
                ParameterName = "sr",
                Value = sr ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergroup = new SqlParameter
            {
                ParameterName = "group",
                Value = group ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametersubgroup = new SqlParameter
            {
                ParameterName = "subgroup",
                Value = subgroup ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametermanager = new SqlParameter
            {
                ParameterName = "manager",
                Value = manager ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameteraccounts = new SqlParameter
            {
                ParameterName = "accounts",
                Value = accounts ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterstate = new SqlParameter
            {
                ParameterName = "state",
                Value = state ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_get_pl_payments_pivot] @pagenum, @pagesize, @inclusions, @exclusions, @date1, @date2, @sr, @group, @subgroup, @manager, @accounts, @state", parameterpagenum, parameterpagesize, parameterinclusions, parameterexclusions, parameterdate1, parameterdate2, parametersr, parametergroup, parametersubgroup, parametermanager, parameteraccounts, parameterstate, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_get_pl_payments_pivot2(int? pagenum, int? pagesize, int? inclusions, int? exclusions, DateTime? date1, DateTime? date2, string sr, string group, string subgroup, string manager, string accounts, string state, string insurance, OutputParameter<int> returnValue = null)
        {
            var parameterpagenum = new SqlParameter
            {
                ParameterName = "pagenum",
                Value = pagenum ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterpagesize = new SqlParameter
            {
                ParameterName = "pagesize",
                Value = pagesize ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterinclusions = new SqlParameter
            {
                ParameterName = "inclusions",
                Value = inclusions ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterexclusions = new SqlParameter
            {
                ParameterName = "exclusions",
                Value = exclusions ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterdate1 = new SqlParameter
            {
                ParameterName = "date1",
                Value = date1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterdate2 = new SqlParameter
            {
                ParameterName = "date2",
                Value = date2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parametersr = new SqlParameter
            {
                ParameterName = "sr",
                Value = sr ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergroup = new SqlParameter
            {
                ParameterName = "group",
                Value = group ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametersubgroup = new SqlParameter
            {
                ParameterName = "subgroup",
                Value = subgroup ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametermanager = new SqlParameter
            {
                ParameterName = "manager",
                Value = manager ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameteraccounts = new SqlParameter
            {
                ParameterName = "accounts",
                Value = accounts ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterstate = new SqlParameter
            {
                ParameterName = "state",
                Value = state ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterinsurance = new SqlParameter
            {
                ParameterName = "insurance",
                Value = insurance ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_get_pl_payments_pivot2] @pagenum, @pagesize, @inclusions, @exclusions, @date1, @date2, @sr, @group, @subgroup, @manager, @accounts, @state, @insurance", parameterpagenum, parameterpagesize, parameterinclusions, parameterexclusions, parameterdate1, parameterdate2, parametersr, parametergroup, parametersubgroup, parametermanager, parameteraccounts, parameterstate, parameterinsurance, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_get_pl_reagents_pivot(int? pagenum, int? pagesize, int? inclusions, int? exclusions, DateTime? date1, DateTime? date2, string sr, string group, string subgroup, string manager, string accounts, string state, string tname, string tnum, string ttype, OutputParameter<int> returnValue = null)
        {
            var parameterpagenum = new SqlParameter
            {
                ParameterName = "pagenum",
                Value = pagenum ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterpagesize = new SqlParameter
            {
                ParameterName = "pagesize",
                Value = pagesize ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterinclusions = new SqlParameter
            {
                ParameterName = "inclusions",
                Value = inclusions ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterexclusions = new SqlParameter
            {
                ParameterName = "exclusions",
                Value = exclusions ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterdate1 = new SqlParameter
            {
                ParameterName = "date1",
                Value = date1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterdate2 = new SqlParameter
            {
                ParameterName = "date2",
                Value = date2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parametersr = new SqlParameter
            {
                ParameterName = "sr",
                Value = sr ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergroup = new SqlParameter
            {
                ParameterName = "group",
                Value = group ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametersubgroup = new SqlParameter
            {
                ParameterName = "subgroup",
                Value = subgroup ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametermanager = new SqlParameter
            {
                ParameterName = "manager",
                Value = manager ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameteraccounts = new SqlParameter
            {
                ParameterName = "accounts",
                Value = accounts ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterstate = new SqlParameter
            {
                ParameterName = "state",
                Value = state ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametertname = new SqlParameter
            {
                ParameterName = "tname",
                Value = tname ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametertnum = new SqlParameter
            {
                ParameterName = "tnum",
                Value = tnum ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterttype = new SqlParameter
            {
                ParameterName = "ttype",
                Value = ttype ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_get_pl_reagents_pivot] @pagenum, @pagesize, @inclusions, @exclusions, @date1, @date2, @sr, @group, @subgroup, @manager, @accounts, @state, @tname, @tnum, @ttype", parameterpagenum, parameterpagesize, parameterinclusions, parameterexclusions, parameterdate1, parameterdate2, parametersr, parametergroup, parametersubgroup, parametermanager, parameteraccounts, parameterstate, parametertname, parametertnum, parameterttype, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_pl_reagents_xlResult[]> sp_get_pl_reagents_xl(int? pagenum, int? pagesize, int? inclusions, int? exclusions, DateTime? date1, DateTime? date2, string sr, string group, string subgroup, string manager, string accounts, string state, string tname, string tnum, string ttype, string user, OutputParameter<int> returnValue = null)
        {
            var parameterpagenum = new SqlParameter
            {
                ParameterName = "pagenum",
                Value = pagenum ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterpagesize = new SqlParameter
            {
                ParameterName = "pagesize",
                Value = pagesize ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterinclusions = new SqlParameter
            {
                ParameterName = "inclusions",
                Value = inclusions ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterexclusions = new SqlParameter
            {
                ParameterName = "exclusions",
                Value = exclusions ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterdate1 = new SqlParameter
            {
                ParameterName = "date1",
                Value = date1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterdate2 = new SqlParameter
            {
                ParameterName = "date2",
                Value = date2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parametersr = new SqlParameter
            {
                ParameterName = "sr",
                Value = sr ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergroup = new SqlParameter
            {
                ParameterName = "group",
                Value = group ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametersubgroup = new SqlParameter
            {
                ParameterName = "subgroup",
                Value = subgroup ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametermanager = new SqlParameter
            {
                ParameterName = "manager",
                Value = manager ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameteraccounts = new SqlParameter
            {
                ParameterName = "accounts",
                Value = accounts ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterstate = new SqlParameter
            {
                ParameterName = "state",
                Value = state ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametertname = new SqlParameter
            {
                ParameterName = "tname",
                Value = tname ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametertnum = new SqlParameter
            {
                ParameterName = "tnum",
                Value = tnum ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterttype = new SqlParameter
            {
                ParameterName = "ttype",
                Value = ttype ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameteruser = new SqlParameter
            {
                ParameterName = "user",
                Size = 50,
                Value = user ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_pl_reagents_xlResult>("EXEC @returnValue = [dbo].[sp_get_pl_reagents_xl] @pagenum, @pagesize, @inclusions, @exclusions, @date1, @date2, @sr, @group, @subgroup, @manager, @accounts, @state, @tname, @tnum, @ttype, @user", parameterpagenum, parameterpagesize, parameterinclusions, parameterexclusions, parameterdate1, parameterdate2, parametersr, parametergroup, parametersubgroup, parametermanager, parameteraccounts, parameterstate, parametertname, parametertnum, parameterttype, parameteruser, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_pl_repsResult[]> sp_get_pl_reps(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_pl_repsResult>("EXEC @returnValue = [dbo].[sp_get_pl_reps]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_pos_cup_entriesResult[]> sp_get_pos_cup_entries(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_pos_cup_entriesResult>("EXEC @returnValue = [dbo].[sp_get_pos_cup_entries]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_prospective_repsResult[]> sp_get_prospective_reps(DateTime? hire1, DateTime? hire2, DateTime? term1, DateTime? term2, decimal? amount, string rep, int? group, bool? compliance, OutputParameter<int> returnValue = null)
        {
            var parameterhire1 = new SqlParameter
            {
                ParameterName = "hire1",
                Value = hire1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterhire2 = new SqlParameter
            {
                ParameterName = "hire2",
                Value = hire2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterterm1 = new SqlParameter
            {
                ParameterName = "term1",
                Value = term1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterterm2 = new SqlParameter
            {
                ParameterName = "term2",
                Value = term2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameteramount = new SqlParameter
            {
                ParameterName = "amount",
                Value = amount ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };

            var parameterrep = new SqlParameter
            {
                ParameterName = "rep",
                Size = 50,
                Value = rep ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergroup = new SqlParameter
            {
                ParameterName = "group",
                Value = group ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parametercompliance = new SqlParameter
            {
                ParameterName = "compliance",
                Value = compliance ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_prospective_repsResult>("EXEC @returnValue = [dbo].[sp_get_prospective_reps] @hire1, @hire2, @term1, @term2, @amount, @rep, @group, @compliance", parameterhire1, parameterhire2, parameterterm1, parameterterm2, parameteramount, parameterrep, parametergroup, parametercompliance, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_pt_infoResult[]> sp_get_pt_info(string invoice, OutputParameter<int> returnValue = null)
        {
            var parameterinvoice = new SqlParameter
            {
                ParameterName = "invoice",
                Size = 50,
                Value = invoice ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_pt_infoResult>("EXEC @returnValue = [dbo].[sp_get_pt_info] @invoice", parameterinvoice, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_rentResult[]> sp_get_rent(string filter0, DateTime? filter1, DateTime? filter2, string filter3, string filter4, string filter5, string filter6, string filter7, string filter8, string filter9, string filter10, string filter11, string filter12, int? page, int? pagesize, OutputParameter<int> returnValue = null)
        {
            var parameterfilter0 = new SqlParameter
            {
                ParameterName = "filter0",
                Size = 50,
                Value = filter0 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter1 = new SqlParameter
            {
                ParameterName = "filter1",
                Value = filter1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterfilter2 = new SqlParameter
            {
                ParameterName = "filter2",
                Value = filter2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterfilter3 = new SqlParameter
            {
                ParameterName = "filter3",
                Size = 255,
                Value = filter3 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter4 = new SqlParameter
            {
                ParameterName = "filter4",
                Size = 255,
                Value = filter4 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter5 = new SqlParameter
            {
                ParameterName = "filter5",
                Size = 255,
                Value = filter5 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter6 = new SqlParameter
            {
                ParameterName = "filter6",
                Size = 50,
                Value = filter6 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter7 = new SqlParameter
            {
                ParameterName = "filter7",
                Size = 50,
                Value = filter7 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter8 = new SqlParameter
            {
                ParameterName = "filter8",
                Size = 50,
                Value = filter8 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter9 = new SqlParameter
            {
                ParameterName = "filter9",
                Size = 50,
                Value = filter9 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter10 = new SqlParameter
            {
                ParameterName = "filter10",
                Size = 50,
                Value = filter10 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter11 = new SqlParameter
            {
                ParameterName = "filter11",
                Size = 50,
                Value = filter11 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfilter12 = new SqlParameter
            {
                ParameterName = "filter12",
                Size = 50,
                Value = filter12 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterpage = new SqlParameter
            {
                ParameterName = "page",
                Value = page ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterpagesize = new SqlParameter
            {
                ParameterName = "pagesize",
                Value = pagesize ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_rentResult>("EXEC @returnValue = [dbo].[sp_get_rent] @filter0, @filter1, @filter2, @filter3, @filter4, @filter5, @filter6, @filter7, @filter8, @filter9, @filter10, @filter11, @filter12, @page, @pagesize", parameterfilter0, parameterfilter1, parameterfilter2, parameterfilter3, parameterfilter4, parameterfilter5, parameterfilter6, parameterfilter7, parameterfilter8, parameterfilter9, parameterfilter10, parameterfilter11, parameterfilter12, parameterpage, parameterpagesize, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public SqlDataReader sp_get_report(bool typ,int? pagenum, int? pagesize, string select, string groupby, string where, string having, string user, int? sorttype, int? usertype, string orderby)
        {
            var parametertyp = new SqlParameter
            {
                ParameterName = "typ",
                Value = typ,
                SqlDbType = System.Data.SqlDbType.Bit,
            };
            var parameterpagenum = new SqlParameter
            {
                ParameterName = "pagenum",
                Value = pagenum ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterpagesize = new SqlParameter
            {
                ParameterName = "pagesize",
                Value = pagesize ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterselect = new SqlParameter
            {
                ParameterName = "select",
                Size = 6000,
                Value = select ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergroupby = new SqlParameter
            {
                ParameterName = "groupby",
                Size = 6000,
                Value = groupby ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterwhere = new SqlParameter
            {
                ParameterName = "where",
                Value = where ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterhaving = new SqlParameter
            {
                ParameterName = "having",
                Size = 6000,
                Value = having ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameteruser = new SqlParameter
            {           
                ParameterName = "user",
                Size = 50,
                Value = user ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametersorttype = new SqlParameter
            {
                ParameterName = "sorttype",
                Value = sorttype ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterusertype = new SqlParameter
            {
                ParameterName = "usertype",
                Value = usertype ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterorderby = new SqlParameter
            {
                ParameterName = "orderby",
                Size = 300,
                Value = orderby ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            SqlConnection conn = _context.Database.GetDbConnection() as SqlConnection;

            SqlCommand cmd = new SqlCommand("sp_get_report_v2", conn);
            cmd.CommandType = CommandType.StoredProcedure;

            cmd.Parameters.Add(parametertyp);
            cmd.Parameters.Add(parameterselect);
            cmd.Parameters.Add(parametergroupby);
            cmd.Parameters.Add(parameterhaving);
            cmd.Parameters.Add(parameterorderby);
            cmd.Parameters.Add(parameterpagenum);
            cmd.Parameters.Add(parameterpagesize);
            cmd.Parameters.Add(parametersorttype);
            cmd.Parameters.Add(parameterwhere);
            cmd.Parameters.Add(parameteruser);
            cmd.Parameters.Add(parameterusertype);

            cmd.CommandTimeout = 180;

            if (conn.State != ConnectionState.Open)
                conn.Open();

            var result = cmd.ExecuteReader();

            return result;
        }

        public async Task<sp_get_report_xlResult[]> sp_get_report_xl(string cols, string select, string groupby, string where, string having, string user, int? sorttype, string filename, OutputParameter<int> returnValue = null)
        {
            var parametercols = new SqlParameter
            {
                ParameterName = "cols",
                Size = 1000,
                Value = cols ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterselect = new SqlParameter
            {
                ParameterName = "select",
                Size = 1200,
                Value = select ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergroupby = new SqlParameter
            {
                ParameterName = "groupby",
                Size = 600,
                Value = groupby ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterwhere = new SqlParameter
            {
                ParameterName = "where",
                Size = 5000,
                Value = where ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterhaving = new SqlParameter
            {
                ParameterName = "having",
                Size = 300,
                Value = having ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameteruser = new SqlParameter
            {
                ParameterName = "user",
                Size = 50,
                Value = user ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametersorttype = new SqlParameter
            {
                ParameterName = "sorttype",
                Value = sorttype ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterfilename = new SqlParameter
            {
                ParameterName = "filename",
                Size = 255,
                Value = filename ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_report_xlResult>("EXEC @returnValue = [dbo].[sp_get_report_xl] @cols, @select, @groupby, @where, @having, @user, @sorttype, @filename", parametercols, parameterselect, parametergroupby, parameterwhere, parameterhaving, parameteruser, parametersorttype, parameterfilename, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_sr_expensesResult[]> sp_get_sr_expenses(DateTime? date1, DateTime? date2, string rep, OutputParameter<int> returnValue = null)
        {
            var parameterdate1 = new SqlParameter
            {
                ParameterName = "date1",
                Value = date1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterdate2 = new SqlParameter
            {
                ParameterName = "date2",
                Value = date2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterrep = new SqlParameter
            {
                ParameterName = "rep",
                Size = 50,
                Value = rep ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_sr_expensesResult>("EXEC @returnValue = [dbo].[sp_get_sr_expenses] @date1, @date2, @rep", parameterdate1, parameterdate2, parameterrep, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_sr_expenses_totalResult[]> sp_get_sr_expenses_total(DateTime? date1, DateTime? date2, string rep, OutputParameter<int> returnValue = null)
        {
            var parameterdate1 = new SqlParameter
            {
                ParameterName = "date1",
                Value = date1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterdate2 = new SqlParameter
            {
                ParameterName = "date2",
                Value = date2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterrep = new SqlParameter
            {
                ParameterName = "rep",
                Size = 50,
                Value = rep ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_sr_expenses_totalResult>("EXEC @returnValue = [dbo].[sp_get_sr_expenses_total] @date1, @date2, @rep", parameterdate1, parameterdate2, parameterrep, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_sr_expenses_xlResult[]> sp_get_sr_expenses_xl(DateTime? date1, DateTime? date2, string rep, string user, OutputParameter<int> returnValue = null)
        {
            var parameterdate1 = new SqlParameter
            {
                ParameterName = "date1",
                Value = date1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterdate2 = new SqlParameter
            {
                ParameterName = "date2",
                Value = date2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterrep = new SqlParameter
            {
                ParameterName = "rep",
                Size = 50,
                Value = rep ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameteruser = new SqlParameter
            {
                ParameterName = "user",
                Size = 50,
                Value = user ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_sr_expenses_xlResult>("EXEC @returnValue = [dbo].[sp_get_sr_expenses_xl] @date1, @date2, @rep, @user", parameterdate1, parameterdate2, parameterrep, parameteruser, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_get_totals(string where, string having, OutputParameter<int> returnValue = null)
        {
            var parameterwhere = new SqlParameter
            {
                ParameterName = "where",
                Value = where ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterhaving = new SqlParameter
            {
                ParameterName = "having",
                Size = 300,
                Value = having ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_get_totals] @where, @having", parameterwhere, parameterhaving, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_ukraine_activityResult[]> sp_get_ukraine_activity(string user, string action, DateTime? date1, DateTime? date2, string source, int? page, OutputParameter<int> returnValue = null)
        {
            var parameteruser = new SqlParameter
            {
                ParameterName = "user",
                Size = 50,
                Value = user ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameteraction = new SqlParameter
            {
                ParameterName = "action",
                Size = 50,
                Value = action ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterdate1 = new SqlParameter
            {
                ParameterName = "date1",
                Value = date1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };

            var parameterdate2 = new SqlParameter
            {
                ParameterName = "date2",
                Value = date2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };

            var parametersource = new SqlParameter
            {
                ParameterName = "source",
                Size = 50,
                Value = source ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterpage = new SqlParameter
            {
                ParameterName = "page",
                Value = page ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_ukraine_activityResult>("EXEC @returnValue = [dbo].[sp_get_ukraine_activity] @user, @action, @date1, @date2, @source, @page", parameteruser, parameteraction, parameterdate1, parameterdate2, parametersource, parameterpage, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_ukraine_activity_sizeResult[]> sp_get_ukraine_activity_size(string user, string action, DateTime? date1, DateTime? date2, string source, OutputParameter<int> returnValue = null)
        {
            var parameteruser = new SqlParameter
            {
                ParameterName = "user",
                Size = 50,
                Value = user ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameteraction = new SqlParameter
            {
                ParameterName = "action",
                Size = 50,
                Value = action ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterdate1 = new SqlParameter
            {
                ParameterName = "date1",
                Value = date1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };

            var parameterdate2 = new SqlParameter
            {
                ParameterName = "date2",
                Value = date2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.DateTime,
            };

            var parametersource = new SqlParameter
            {
                ParameterName = "source",
                Size = 50,
                Value = source ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_ukraine_activity_sizeResult>("EXEC @returnValue = [dbo].[sp_get_ukraine_activity_size] @user, @action, @date1, @date2, @source", parameteruser, parameteraction, parameterdate1, parameterdate2, parametersource, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_ukraine_usersResult[]> sp_get_ukraine_users(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_ukraine_usersResult>("EXEC @returnValue = [dbo].[sp_get_ukraine_users]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_uncovered_codes_listResult[]> sp_get_uncovered_codes_list(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_uncovered_codes_listResult>("EXEC @returnValue = [dbo].[sp_get_uncovered_codes_list]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_unmapped_groupsResult[]> sp_get_unmapped_groups(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_unmapped_groupsResult>("EXEC @returnValue = [dbo].[sp_get_unmapped_groups]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_get_users(int? type, string group, OutputParameter<int> returnValue = null)
        {
            var parametertype = new SqlParameter
            {
                ParameterName = "type",
                Value = type ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parametergroup = new SqlParameter
            {
                ParameterName = "group",
                Size = 50,
                Value = group ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_get_users] @type, @group", parametertype, parametergroup, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_get_vendorsResult[]> sp_get_vendors(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_get_vendorsResult>("EXEC @returnValue = [dbo].[sp_get_vendors]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_group_existsResult[]> sp_group_exists(int? gnum, OutputParameter<int> returnValue = null)
        {
            var parametergnum = new SqlParameter
            {
                ParameterName = "gnum",
                Value = gnum ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_group_existsResult>("EXEC @returnValue = [dbo].[sp_group_exists] @gnum", parametergnum, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_helpdiagramdefinition(string diagramname, int? owner_id, OutputParameter<int> returnValue = null)
        {
            var parameterdiagramname = new SqlParameter
            {
                ParameterName = "diagramname",
                Size = 256,
                Value = diagramname ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };

            var parameterowner_id = new SqlParameter
            {
                ParameterName = "owner_id",
                Value = owner_id ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_helpdiagramdefinition] @diagramname, @owner_id", parameterdiagramname, parameterowner_id, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_helpdiagrams(string diagramname, int? owner_id, OutputParameter<int> returnValue = null)
        {
            var parameterdiagramname = new SqlParameter
            {
                ParameterName = "diagramname",
                Size = 256,
                Value = diagramname ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };

            var parameterowner_id = new SqlParameter
            {
                ParameterName = "owner_id",
                Value = owner_id ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_helpdiagrams] @diagramname, @owner_id", parameterdiagramname, parameterowner_id, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_Import_Florida_DriverCosts_Into_PL_Driver_Dist(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Import_Florida_DriverCosts_Into_PL_Driver_Dist]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_Import_Florida_DriverCosts_Into_PL_Driver_Dist_Backup(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_Import_Florida_DriverCosts_Into_PL_Driver_Dist_Backup]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_insert_extra_overheadcosts(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_insert_extra_overheadcosts]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_insert_extra_overheadcosts_24547(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_insert_extra_overheadcosts_24547]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_insert_extra_overheadcosts_34821(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_insert_extra_overheadcosts_34821]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_insert_extra_overheadcosts_fromWarehouse(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_insert_extra_overheadcosts_fromWarehouse]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_insert_extra_overheadcosts_subgroup_0000(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_insert_extra_overheadcosts_subgroup_0.000]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_insert_extra_overheadcosts_subgroup_0001(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_insert_extra_overheadcosts_subgroup_0.001]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_insert_extra_overheadcosts_subgroup_7001(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_insert_extra_overheadcosts_subgroup_7.001]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_link_group(int? gnum, int? gmap, OutputParameter<int> returnValue = null)
        {
            var parametergnum = new SqlParameter
            {
                ParameterName = "gnum",
                Value = gnum ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parametergmap = new SqlParameter
            {
                ParameterName = "gmap",
                Value = gmap ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_link_group] @gnum, @gmap", parametergnum, parametergmap, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_maintenance_line_existsResult[]> sp_maintenance_line_exists(int? key, bool? vendor, DateTime? date, OutputParameter<int> returnValue = null)
        {
            var parameterkey = new SqlParameter
            {
                ParameterName = "key",
                Value = key ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parametervendor = new SqlParameter
            {
                ParameterName = "vendor",
                Value = vendor ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };

            var parameterdate = new SqlParameter
            {
                ParameterName = "date",
                Value = date ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_maintenance_line_existsResult>("EXEC @returnValue = [dbo].[sp_maintenance_line_exists] @key, @vendor, @date", parameterkey, parametervendor, parameterdate, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_mark_client(int? client, OutputParameter<int> returnValue = null)
        {
            var parameterclient = new SqlParameter
            {
                ParameterName = "client",
                Value = client ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_mark_client] @client", parameterclient, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_mark_invoice(string user, string invoice, decimal? balance, int? process, string action, OutputParameter<int> returnValue = null)
        {
            var parameteruser = new SqlParameter
            {
                ParameterName = "user",
                Size = 50,
                Value = user ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterinvoice = new SqlParameter
            {
                ParameterName = "invoice",
                Size = 50,
                Value = invoice ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterbalance = new SqlParameter
            {
                ParameterName = "balance",
                Value = balance ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };

            var parameterprocess = new SqlParameter
            {
                ParameterName = "process",
                Value = process ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameteraction = new SqlParameter
            {
                ParameterName = "action",
                Size = 255,
                Value = action ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_mark_invoice] @user, @invoice, @balance, @process, @action", parameteruser, parameterinvoice, parameterbalance, parameterprocess, parameteraction, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_modify_bill_types(string id, string newAgent, string newName, int? newTimely, bool? newNetwork, string newNotes, int? newAppeal, OutputParameter<int> returnValue = null)
        {
            var parameterid = new SqlParameter
            {
                ParameterName = "id",
                Size = 50,
                Value = id ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameternewAgent = new SqlParameter
            {
                ParameterName = "newAgent",
                Size = 50,
                Value = newAgent ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameternewName = new SqlParameter
            {
                ParameterName = "newName",
                Size = 255,
                Value = newName ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameternewTimely = new SqlParameter
            {
                ParameterName = "newTimely",
                Value = newTimely ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameternewNetwork = new SqlParameter
            {
                ParameterName = "newNetwork",
                Value = newNetwork ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };

            var parameternewNotes = new SqlParameter
            {
                ParameterName = "newNotes",
                Size = 250,
                Value = newNotes ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameternewAppeal = new SqlParameter
            {
                ParameterName = "newAppeal",
                Value = newAppeal ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_modify_bill_types] @id, @newAgent, @newName, @newTimely, @newNetwork, @newNotes, @newAppeal", parameterid, parameternewAgent, parameternewName, parameternewTimely, parameternewNetwork, parameternewNotes, parameternewAppeal, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_modify_company_cost(string date, decimal? equipment, decimal? labor, decimal? overhead, OutputParameter<int> returnValue = null)
        {
            var parameterdate = new SqlParameter
            {
                ParameterName = "date",
                Size = 100,
                Value = date ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterequipment = new SqlParameter
            {
                ParameterName = "equipment",
                Value = equipment ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };

            var parameterlabor = new SqlParameter
            {
                ParameterName = "labor",
                Value = labor ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };

            var parameteroverhead = new SqlParameter
            {
                ParameterName = "overhead",
                Value = overhead ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_modify_company_cost] @date, @equipment, @labor, @overhead", parameterdate, parameterequipment, parameterlabor, parameteroverhead, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_modify_pl_group(string group, string group4, string group5, string group6, string group7, string group8, string group9, string group10, string group11, OutputParameter<int> returnValue = null)
        {
            var parametergroup = new SqlParameter
            {
                ParameterName = "group",
                Size = 50,
                Value = group ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergroup4 = new SqlParameter
            {
                ParameterName = "group4",
                Size = 50,
                Value = group4 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergroup5 = new SqlParameter
            {
                ParameterName = "group5",
                Size = 50,
                Value = group5 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergroup6 = new SqlParameter
            {
                ParameterName = "group6",
                Size = 50,
                Value = group6 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergroup7 = new SqlParameter
            {
                ParameterName = "group7",
                Size = 50,
                Value = group7 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergroup8 = new SqlParameter
            {
                ParameterName = "group8",
                Size = 50,
                Value = group8 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergroup9 = new SqlParameter
            {
                ParameterName = "group9",
                Size = 50,
                Value = group9 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergroup10 = new SqlParameter
            {
                ParameterName = "group10",
                Size = 50,
                Value = group10 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergroup11 = new SqlParameter
            {
                ParameterName = "group11",
                Size = 50,
                Value = group11 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_modify_pl_group] @group, @group4, @group5, @group6, @group7, @group8, @group9, @group10, @group11", parametergroup, parametergroup4, parametergroup5, parametergroup6, parametergroup7, parametergroup8, parametergroup9, parametergroup10, parametergroup11, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_modify_pos_cup_entry(string entry, string number, string amount, string trans, string method, OutputParameter<int> returnValue = null)
        {
            var parameterentry = new SqlParameter
            {
                ParameterName = "entry",
                Size = 50,
                Value = entry ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameternumber = new SqlParameter
            {
                ParameterName = "number",
                Size = 50,
                Value = number ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameteramount = new SqlParameter
            {
                ParameterName = "amount",
                Size = 50,
                Value = amount ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametertrans = new SqlParameter
            {
                ParameterName = "trans",
                Size = 50,
                Value = trans ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametermethod = new SqlParameter
            {
                ParameterName = "method",
                Size = 50,
                Value = method ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_modify_pos_cup_entry] @entry, @number, @amount, @trans, @method", parameterentry, parameternumber, parameteramount, parametertrans, parametermethod, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_mr_request_existsResult[]> sp_mr_request_exists(string chart, string invoice, OutputParameter<int> returnValue = null)
        {
            var parameterchart = new SqlParameter
            {
                ParameterName = "chart",
                Size = 50,
                Value = chart ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterinvoice = new SqlParameter
            {
                ParameterName = "invoice",
                Size = 50,
                Value = invoice ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_mr_request_existsResult>("EXEC @returnValue = [dbo].[sp_mr_request_exists] @chart, @invoice", parameterchart, parameterinvoice, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_nullify_subgroup(int? accountnum, OutputParameter<int> returnValue = null)
        {
            var parameteraccountnum = new SqlParameter
            {
                ParameterName = "accountnum",
                Value = accountnum ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_nullify_subgroup] @accountnum", parameteraccountnum, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_phleb_delete_validResult[]> sp_phleb_delete_valid(int? key, OutputParameter<int> returnValue = null)
        {
            var parameterkey = new SqlParameter
            {
                ParameterName = "key",
                Value = key ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_phleb_delete_validResult>("EXEC @returnValue = [dbo].[sp_phleb_delete_valid] @key", parameterkey, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_pos_cup_entry_existsResult[]> sp_pos_cup_entry_exists(string account, DateTime? date, OutputParameter<int> returnValue = null)
        {
            var parameteraccount = new SqlParameter
            {
                ParameterName = "account",
                Size = 50,
                Value = account ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterdate = new SqlParameter
            {
                ParameterName = "date",
                Value = date ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_pos_cup_entry_existsResult>("EXEC @returnValue = [dbo].[sp_pos_cup_entry_exists] @account, @date", parameteraccount, parameterdate, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_process_mr_requestResult[]> sp_process_mr_request(string invoice, OutputParameter<int> returnValue = null)
        {
            var parameterinvoice = new SqlParameter
            {
                ParameterName = "invoice",
                Size = 50,
                Value = invoice ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_process_mr_requestResult>("EXEC @returnValue = [dbo].[sp_process_mr_request] @invoice", parameterinvoice, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_query_accounts_by_testResult[]> sp_query_accounts_by_test(string test, DateTime? date1, DateTime? date2, OutputParameter<int> returnValue = null)
        {
            var parametertest = new SqlParameter
            {
                ParameterName = "test",
                Size = 10,
                Value = test ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterdate1 = new SqlParameter
            {
                ParameterName = "date1",
                Value = date1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterdate2 = new SqlParameter
            {
                ParameterName = "date2",
                Value = date2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_query_accounts_by_testResult>("EXEC @returnValue = [dbo].[sp_query_accounts_by_test] @test, @date1, @date2", parametertest, parameterdate1, parameterdate2, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_query_unbilledResult[]> sp_query_unbilled(string state, OutputParameter<int> returnValue = null)
        {
            var parameterstate = new SqlParameter
            {
                ParameterName = "state",
                Size = 50,
                Value = state ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_query_unbilledResult>("EXEC @returnValue = [dbo].[sp_query_unbilled] @state", parameterstate, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_refresh_bonus(DateTime? date, OutputParameter<int> returnValue = null)
        {
            var parameterdate = new SqlParameter
            {
                ParameterName = "date",
                Value = date ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_refresh_bonus] @date", parameterdate, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_refresh_bonus_addnlForNewAccounts(DateTime? date, OutputParameter<int> returnValue = null)
        {
            var parameterdate = new SqlParameter
            {
                ParameterName = "date",
                Value = date ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_refresh_bonus_addnlForNewAccounts] @date", parameterdate, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_refresh_client_bill_data(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_refresh_client_bill_data]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_refresh_commissions_newplan_step1(DateTime? date, OutputParameter<int> returnValue = null)
        {
            var parameterdate = new SqlParameter
            {
                ParameterName = "date",
                Value = date ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_refresh_commissions_newplan_step1] @date", parameterdate, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_refresh_commissions_newplan_step2(DateTime? date, OutputParameter<int> returnValue = null)
        {
            var parameterdate = new SqlParameter
            {
                ParameterName = "date",
                Value = date ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_refresh_commissions_newplan_step2] @date", parameterdate, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_refresh_expenses_lacouriercosts(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_refresh_expenses_lacouriercosts]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_refresh_expenses_merabiphlebcosts(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_refresh_expenses_merabiphlebcosts]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_refresh_expenses_rent(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_refresh_expenses_rent]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_refresh_expenses_utilities(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_refresh_expenses_utilities]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_refresh_pl_charges_pivot(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_refresh_pl_charges_pivot]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_refresh_pl_data_pivot(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_refresh_pl_data_pivot]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_refresh_pl_payments_pivot(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_refresh_pl_payments_pivot]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_refresh_pl_payments_pivot2(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_refresh_pl_payments_pivot2]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_refresh_pl_reagents_pivot(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_refresh_pl_reagents_pivot]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_register_tox(string file, string machine, string src, OutputParameter<int> returnValue = null)
        {
            var parameterfile = new SqlParameter
            {
                ParameterName = "file",
                Size = 255,
                Value = file ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametermachine = new SqlParameter
            {
                ParameterName = "machine",
                Size = 255,
                Value = machine ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametersrc = new SqlParameter
            {
                ParameterName = "src",
                Size = 255,
                Value = src ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_register_tox] @file, @machine, @src", parameterfile, parametermachine, parametersrc, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_renamediagram(string diagramname, int? owner_id, string new_diagramname, OutputParameter<int> returnValue = null)
        {
            var parameterdiagramname = new SqlParameter
            {
                ParameterName = "diagramname",
                Size = 256,
                Value = diagramname ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };

            var parameterowner_id = new SqlParameter
            {
                ParameterName = "owner_id",
                Value = owner_id ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameternew_diagramname = new SqlParameter
            {
                ParameterName = "new_diagramname",
                Size = 256,
                Value = new_diagramname ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.NVarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_renamediagram] @diagramname, @owner_id, @new_diagramname", parameterdiagramname, parameterowner_id, parameternew_diagramname, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_send_dx_request(string user, string invoice, OutputParameter<int> returnValue = null)
        {
            var parameteruser = new SqlParameter
            {
                ParameterName = "user",
                Size = 50,
                Value = user ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterinvoice = new SqlParameter
            {
                ParameterName = "invoice",
                Size = 50,
                Value = invoice ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_send_dx_request] @user, @invoice", parameteruser, parameterinvoice, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_terminate_subgroup(string subgroupgrp, string subgroup, OutputParameter<int> returnValue = null)
        {
            var parametersubgroupgrp = new SqlParameter
            {
                ParameterName = "subgroupgrp",
                Size = 50,
                Value = subgroupgrp ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametersubgroup = new SqlParameter
            {
                ParameterName = "subgroup",
                Size = 50,
                Value = subgroup ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_terminate_subgroup] @subgroupgrp, @subgroup", parametersubgroupgrp, parametersubgroup, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_testlog_export(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_testlog_export]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_update_bill_groups(string group, string name, string lead, OutputParameter<int> returnValue = null)
        {
            var parametergroup = new SqlParameter
            {
                ParameterName = "group",
                Size = 50,
                Value = group ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametername = new SqlParameter
            {
                ParameterName = "name",
                Size = 50,
                Value = name ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterlead = new SqlParameter
            {
                ParameterName = "lead",
                Size = 50,
                Value = lead ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_update_bill_groups] @group, @name, @lead", parametergroup, parametername, parameterlead, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_update_client_bill(int? client, DateTime? date, string bill, decimal? balance, DateTime? sent, OutputParameter<int> returnValue = null)
        {
            var parameterclient = new SqlParameter
            {
                ParameterName = "client",
                Value = client ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterdate = new SqlParameter
            {
                ParameterName = "date",
                Value = date ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterbill = new SqlParameter
            {
                ParameterName = "bill",
                Size = 10,
                Value = bill ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterbalance = new SqlParameter
            {
                ParameterName = "balance",
                Value = balance ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };

            var parametersent = new SqlParameter
            {
                ParameterName = "sent",
                Value = sent ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_update_client_bill] @client, @date, @bill, @balance, @sent", parameterclient, parameterdate, parameterbill, parameterbalance, parametersent, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_update_coding_invoice(int? key, string invoice, int? btype, string status, string notes, string user, OutputParameter<int> returnValue = null)
        {
            var parameterkey = new SqlParameter
            {
                ParameterName = "key",
                Value = key ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterinvoice = new SqlParameter
            {
                ParameterName = "invoice",
                Size = 50,
                Value = invoice ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterbtype = new SqlParameter
            {
                ParameterName = "btype",
                Value = btype ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterstatus = new SqlParameter
            {
                ParameterName = "status",
                Size = 20,
                Value = status ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameternotes = new SqlParameter
            {
                ParameterName = "notes",
                Size = 255,
                Value = notes ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameteruser = new SqlParameter
            {
                ParameterName = "user",
                Size = 50,
                Value = user ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_update_coding_invoice] @key, @invoice, @btype, @status, @notes, @user", parameterkey, parameterinvoice, parameterbtype, parameterstatus, parameternotes, parameteruser, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_update_dx_requestResult[]> sp_update_dx_request(string user, string invoice, OutputParameter<int> returnValue = null)
        {
            var parameteruser = new SqlParameter
            {
                ParameterName = "user",
                Size = 255,
                Value = user ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterinvoice = new SqlParameter
            {
                ParameterName = "invoice",
                Size = 50,
                Value = invoice ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_update_dx_requestResult>("EXEC @returnValue = [dbo].[sp_update_dx_request] @user, @invoice", parameteruser, parameterinvoice, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_update_emr_install(int? key, DateTime? live, DateTime? cterm, DateTime? vterm, bool? cancel, decimal? c0, decimal? c1, decimal? c2, decimal? c3, decimal? c4, OutputParameter<int> returnValue = null)
        {
            var parameterkey = new SqlParameter
            {
                ParameterName = "key",
                Value = key ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterlive = new SqlParameter
            {
                ParameterName = "live",
                Value = live ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parametercterm = new SqlParameter
            {
                ParameterName = "cterm",
                Value = cterm ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parametervterm = new SqlParameter
            {
                ParameterName = "vterm",
                Value = vterm ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parametercancel = new SqlParameter
            {
                ParameterName = "cancel",
                Value = cancel ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };

            var parameterc0 = new SqlParameter
            {
                ParameterName = "c0",
                Value = c0 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };

            var parameterc1 = new SqlParameter
            {
                ParameterName = "c1",
                Value = c1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };

            var parameterc2 = new SqlParameter
            {
                ParameterName = "c2",
                Value = c2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };

            var parameterc3 = new SqlParameter
            {
                ParameterName = "c3",
                Value = c3 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };

            var parameterc4 = new SqlParameter
            {
                ParameterName = "c4",
                Value = c4 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_update_emr_install] @key, @live, @cterm, @vterm, @cancel, @c0, @c1, @c2, @c3, @c4", parameterkey, parameterlive, parametercterm, parametervterm, parametercancel, parameterc0, parameterc1, parameterc2, parameterc3, parameterc4, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_update_emr_maint(int? key, decimal? amount, bool? auto, OutputParameter<int> returnValue = null)
        {
            var parameterkey = new SqlParameter
            {
                ParameterName = "key",
                Value = key ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameteramount = new SqlParameter
            {
                ParameterName = "amount",
                Value = amount ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };

            var parameterauto = new SqlParameter
            {
                ParameterName = "auto",
                Value = auto ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_update_emr_maint] @key, @amount, @auto", parameterkey, parameteramount, parameterauto, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_update_mr_request(string user, string chart, string invoice, string note, OutputParameter<int> returnValue = null)
        {
            var parameteruser = new SqlParameter
            {
                ParameterName = "user",
                Size = 50,
                Value = user ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterchart = new SqlParameter
            {
                ParameterName = "chart",
                Size = 50,
                Value = chart ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterinvoice = new SqlParameter
            {
                ParameterName = "invoice",
                Size = 50,
                Value = invoice ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameternote = new SqlParameter
            {
                ParameterName = "note",
                Size = 255,
                Value = note ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_update_mr_request] @user, @chart, @invoice, @note", parameteruser, parameterchart, parameterinvoice, parameternote, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_update_phleb_distribution(long? empl, DateTime? date, double? dist, int? mapped, string cat, string user, OutputParameter<int> returnValue = null)
        {
            var parameterempl = new SqlParameter
            {
                ParameterName = "empl",
                Value = empl ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.BigInt,
            };

            var parameterdate = new SqlParameter
            {
                ParameterName = "date",
                Value = date ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterdist = new SqlParameter
            {
                ParameterName = "dist",
                Value = dist ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };

            var parametermapped = new SqlParameter
            {
                ParameterName = "mapped",
                Value = mapped ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parametercat = new SqlParameter
            {
                ParameterName = "cat",
                Size = 50,
                Value = cat ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameteruser = new SqlParameter
            {
                ParameterName = "user",
                Size = 50,
                Value = user ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_update_phleb_distribution] @empl, @date, @dist, @mapped, @cat, @user", parameterempl, parameterdate, parameterdist, parametermapped, parametercat, parameteruser, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_update_phleb_groups(int? group, string name, OutputParameter<int> returnValue = null)
        {
            var parametergroup = new SqlParameter
            {
                ParameterName = "group",
                Value = group ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parametername = new SqlParameter
            {
                ParameterName = "name",
                Size = 100,
                Value = name ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_update_phleb_groups] @group, @name", parametergroup, parametername, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_update_phlebotomist(int? empl, string name, string lname, string map, OutputParameter<int> returnValue = null)
        {
            var parameterempl = new SqlParameter
            {
                ParameterName = "empl",
                Value = empl ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parametername = new SqlParameter
            {
                ParameterName = "name",
                Size = 50,
                Value = name ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterlname = new SqlParameter
            {
                ParameterName = "lname",
                Size = 50,
                Value = lname ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametermap = new SqlParameter
            {
                ParameterName = "map",
                Size = 250,
                Value = map ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_update_phlebotomist] @empl, @name, @lname, @map", parameterempl, parametername, parameterlname, parametermap, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_update_pl_note(string date, string sr, int? gr, decimal? sg, int? ac, string an, OutputParameter<int> returnValue = null)
        {
            var parameterdate = new SqlParameter
            {
                ParameterName = "date",
                Size = 50,
                Value = date ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametersr = new SqlParameter
            {
                ParameterName = "sr",
                Size = 50,
                Value = sr ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parametergr = new SqlParameter
            {
                ParameterName = "gr",
                Value = gr ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parametersg = new SqlParameter
            {
                ParameterName = "sg",
                Precision = 10,
                Scale = 3,
                Value = sg ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Decimal,
            };

            var parameterac = new SqlParameter
            {
                ParameterName = "ac",
                Value = ac ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameteran = new SqlParameter
            {
                ParameterName = "an",
                Size = 50,
                Value = an ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_update_pl_note] @date, @sr, @gr, @sg, @ac, @an", parameterdate, parametersr, parametergr, parametersg, parameterac, parameteran, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_update_prospective_rep(int? field0, string field1, string field2, DateTime? field3, DateTime? field4, DateTime? field5, decimal? field6, double? field7, double? field8, int? field9, DateTime? field10, string field11, OutputParameter<int> returnValue = null)
        {
            var parameterfield0 = new SqlParameter
            {
                ParameterName = "field0",
                Value = field0 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterfield1 = new SqlParameter
            {
                ParameterName = "field1",
                Size = 10,
                Value = field1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfield2 = new SqlParameter
            {
                ParameterName = "field2",
                Size = 10,
                Value = field2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfield3 = new SqlParameter
            {
                ParameterName = "field3",
                Value = field3 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterfield4 = new SqlParameter
            {
                ParameterName = "field4",
                Value = field4 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterfield5 = new SqlParameter
            {
                ParameterName = "field5",
                Value = field5 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterfield6 = new SqlParameter
            {
                ParameterName = "field6",
                Value = field6 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Money,
            };

            var parameterfield7 = new SqlParameter
            {
                ParameterName = "field7",
                Value = field7 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };

            var parameterfield8 = new SqlParameter
            {
                ParameterName = "field8",
                Value = field8 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Float,
            };

            var parameterfield9 = new SqlParameter
            {
                ParameterName = "field9",
                Value = field9 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterfield10 = new SqlParameter
            {
                ParameterName = "field10",
                Value = field10 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Date,
            };

            var parameterfield11 = new SqlParameter
            {
                ParameterName = "field11",
                Size = 500,
                Value = field11 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_update_prospective_rep] @field0, @field1, @field2, @field3, @field4, @field5, @field6, @field7, @field8, @field9, @field10, @field11", parameterfield0, parameterfield1, parameterfield2, parameterfield3, parameterfield4, parameterfield5, parameterfield6, parameterfield7, parameterfield8, parameterfield9, parameterfield10, parameterfield11, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_update_rent(int? key, string field0, string field1, string field2, string field3, string field4, string field5, string field6, string field7, string field8, string field9, bool? field10, bool? field11, OutputParameter<int> returnValue = null)
        {
            var parameterkey = new SqlParameter
            {
                ParameterName = "key",
                Value = key ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterfield0 = new SqlParameter
            {
                ParameterName = "field0",
                Size = 255,
                Value = field0 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfield1 = new SqlParameter
            {
                ParameterName = "field1",
                Size = 255,
                Value = field1 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfield2 = new SqlParameter
            {
                ParameterName = "field2",
                Size = 255,
                Value = field2 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfield3 = new SqlParameter
            {
                ParameterName = "field3",
                Size = 255,
                Value = field3 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfield4 = new SqlParameter
            {
                ParameterName = "field4",
                Size = 255,
                Value = field4 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfield5 = new SqlParameter
            {
                ParameterName = "field5",
                Size = 255,
                Value = field5 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfield6 = new SqlParameter
            {
                ParameterName = "field6",
                Size = 255,
                Value = field6 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfield7 = new SqlParameter
            {
                ParameterName = "field7",
                Size = 255,
                Value = field7 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfield8 = new SqlParameter
            {
                ParameterName = "field8",
                Size = 255,
                Value = field8 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfield9 = new SqlParameter
            {
                ParameterName = "field9",
                Size = 255,
                Value = field9 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterfield10 = new SqlParameter
            {
                ParameterName = "field10",
                Value = field10 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };

            var parameterfield11 = new SqlParameter
            {
                ParameterName = "field11",
                Value = field11 ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Bit,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_update_rent] @key, @field0, @field1, @field2, @field3, @field4, @field5, @field6, @field7, @field8, @field9, @field10, @field11", parameterkey, parameterfield0, parameterfield1, parameterfield2, parameterfield3, parameterfield4, parameterfield5, parameterfield6, parameterfield7, parameterfield8, parameterfield9, parameterfield10, parameterfield11, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_update_tox(string file, OutputParameter<int> returnValue = null)
        {
            var parameterfile = new SqlParameter
            {
                ParameterName = "file",
                Size = 255,
                Value = file ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_update_tox] @file", parameterfile, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_upgraddiagrams(OutputParameter<int> returnValue = null)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_upgraddiagrams]", parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sp_upload_mr_request(string invoice, OutputParameter<int> returnValue = null)
        {
            var parameterinvoice = new SqlParameter
            {
                ParameterName = "invoice",
                Size = 50,
                Value = invoice ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sp_upload_mr_request] @invoice", parameterinvoice, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_user_existsResult[]> sp_user_exists(string username, OutputParameter<int> returnValue = null)
        {
            var parameterusername = new SqlParameter
            {
                ParameterName = "username",
                Size = 255,
                Value = username ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_user_existsResult>("EXEC @returnValue = [dbo].[sp_user_exists] @username", parameterusername, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_user_loginResult[]> sp_user_login(string username, string password, OutputParameter<int> returnValue = null)
        {
            var parameterusername = new SqlParameter
            {
                ParameterName = "username",
                Size = 255,
                Value = username ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterpassword = new SqlParameter
            {
                ParameterName = "password",
                Size = 255,
                Value = password ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_user_loginResult>("EXEC @returnValue = [dbo].[sp_user_login] @username, @password", parameterusername, parameterpassword, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<sp_validate_phleb_idResult[]> sp_validate_phleb_id(int? id, OutputParameter<int> returnValue = null)
        {
            var parameterid = new SqlParameter
            {
                ParameterName = "id",
                Value = id ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.SqlQuery<sp_validate_phleb_idResult>("EXEC @returnValue = [dbo].[sp_validate_phleb_id] @id", parameterid, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public async Task<int> sysp_show_locks(short? spid, OutputParameter<int> returnValue = null)
        {
            var parameterspid = new SqlParameter
            {
                ParameterName = "spid",
                Value = spid ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.SmallInt,
            };

            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[sysp_show_locks] @spid", parameterspid, parameterreturnValue);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
