// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace DataModel.Finance
{
    public partial class FINANCEContext : DbContext
    {
        public FINANCEContext()
        {
        }

        public FINANCEContext(DbContextOptions<FINANCEContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ARPIT_Codes> ARPIT_Codes { get; set; }
        public virtual DbSet<Allergy_Codes> Allergy_Codes { get; set; }
        public virtual DbSet<Analytical_Codes> Analytical_Codes { get; set; }
        public virtual DbSet<AspNetRoleClaims> AspNetRoleClaims { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserRoles> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUserTokens> AspNetUserTokens { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<BillTypeClasses> BillTypeClasses { get; set; }
        public virtual DbSet<Bill_Activity> Bill_Activity { get; set; }
        public virtual DbSet<Bill_Data> Bill_Data { get; set; }
        public virtual DbSet<Bill_Groups> Bill_Groups { get; set; }
        public virtual DbSet<Bill_Inspection> Bill_Inspection { get; set; }
        public virtual DbSet<Bill_Medical_Record_Request> Bill_Medical_Record_Request { get; set; }
        public virtual DbSet<Bill_Medical_Records> Bill_Medical_Records { get; set; }
        public virtual DbSet<Bill_Reps> Bill_Reps { get; set; }
        public virtual DbSet<Bill_Types> Bill_Types { get; set; }
        public virtual DbSet<Bill_Users> Bill_Users { get; set; }
        public virtual DbSet<Bill_alert_exceptions> Bill_alert_exceptions { get; set; }
        public virtual DbSet<Bill_alert_periods> Bill_alert_periods { get; set; }
        public virtual DbSet<BillingLag> BillingLag { get; set; }
        public virtual DbSet<Blood_Bank_Codes> Blood_Bank_Codes { get; set; }
        public virtual DbSet<Capri_View> Capri_View { get; set; }
        public virtual DbSet<Cardoso_view> Cardoso_view { get; set; }
        public virtual DbSet<Casey_view> Casey_view { get; set; }
        public virtual DbSet<Charges_Past> Charges_Past { get; set; }
        public virtual DbSet<ClientData> ClientData { get; set; }
        public virtual DbSet<Client_Bill_Data> Client_Bill_Data { get; set; }
        public virtual DbSet<Client_Billing_Marks> Client_Billing_Marks { get; set; }
        public virtual DbSet<Client_Bills> Client_Bills { get; set; }
        public virtual DbSet<Coding_Activity> Coding_Activity { get; set; }
        public virtual DbSet<Coding_Codes> Coding_Codes { get; set; }
        public virtual DbSet<Coding_Invoices> Coding_Invoices { get; set; }
        public virtual DbSet<Cytology_Codes> Cytology_Codes { get; set; }
        public virtual DbSet<DaysPending> DaysPending { get; set; }
        public virtual DbSet<FL_Courier_Acc> FL_Courier_Acc { get; set; }
        public virtual DbSet<Finance_Change_Tracking> Finance_Change_Tracking { get; set; }
        public virtual DbSet<Hemotology_Codes> Hemotology_Codes { get; set; }
        public virtual DbSet<Hynds_view> Hynds_view { get; set; }
        public virtual DbSet<Immunology_Codes> Immunology_Codes { get; set; }
        public virtual DbSet<Imports> Imports { get; set; }
        public virtual DbSet<Inactive_Codes> Inactive_Codes { get; set; }
        public virtual DbSet<Jack_view> Jack_view { get; set; }
        public virtual DbSet<Kanevsky_View> Kanevsky_View { get; set; }
        public virtual DbSet<LM_tmp> LM_tmp { get; set; }
        public virtual DbSet<LandMarkData_July_Aug> LandMarkData_July_Aug { get; set; }
        public virtual DbSet<LandmarkAll> LandmarkAll { get; set; }
        public virtual DbSet<Marked_Bills> Marked_Bills { get; set; }
        public virtual DbSet<Marketing_Specialties> Marketing_Specialties { get; set; }
        public virtual DbSet<Metal_Codes> Metal_Codes { get; set; }
        public virtual DbSet<Microbiology_Codes> Microbiology_Codes { get; set; }
        public virtual DbSet<Molecular_Codes> Molecular_Codes { get; set; }
        public virtual DbSet<Monaco_View> Monaco_View { get; set; }
        public virtual DbSet<Overdue_View> Overdue_View { get; set; }
        public virtual DbSet<Overtime> Overtime { get; set; }
        public virtual DbSet<PATIENT> PATIENT { get; set; }
        public virtual DbSet<PGX_Codes> PGX_Codes { get; set; }
        public virtual DbSet<PGX_History> PGX_History { get; set; }
        public virtual DbSet<PL_Account_Bonus_Override> PL_Account_Bonus_Override { get; set; }
        public virtual DbSet<PL_Accounts> PL_Accounts { get; set; }
        public virtual DbSet<PL_Acct_Bonuses> PL_Acct_Bonuses { get; set; }
        public virtual DbSet<PL_Athena_Exceptions> PL_Athena_Exceptions { get; set; }
        public virtual DbSet<PL_Bonus_Bracket> PL_Bonus_Bracket { get; set; }
        public virtual DbSet<PL_Bonus_Nonsense> PL_Bonus_Nonsense { get; set; }
        public virtual DbSet<PL_Bonus_PGX_Override> PL_Bonus_PGX_Override { get; set; }
        public virtual DbSet<PL_Bonus_Rates> PL_Bonus_Rates { get; set; }
        public virtual DbSet<PL_Bonus_Tox_Override> PL_Bonus_Tox_Override { get; set; }
        public virtual DbSet<PL_Bonuses> PL_Bonuses { get; set; }
        public virtual DbSet<PL_Bonuses_Pivot> PL_Bonuses_Pivot { get; set; }
        public virtual DbSet<PL_Bonuses_Pivot2> PL_Bonuses_Pivot2 { get; set; }
        public virtual DbSet<PL_Bonuses_Pivot2_Old> PL_Bonuses_Pivot2_Old { get; set; }
        public virtual DbSet<PL_Bonuses_Pivot2_bkup31Aug> PL_Bonuses_Pivot2_bkup31Aug { get; set; }
        public virtual DbSet<PL_Bonuses_Pivot2_bkupApr20> PL_Bonuses_Pivot2_bkupApr20 { get; set; }
        public virtual DbSet<PL_Bonuses_Pivot2_staging> PL_Bonuses_Pivot2_staging { get; set; }
        public virtual DbSet<PL_Charges> PL_Charges { get; set; }
        public virtual DbSet<PL_Charges_Past> PL_Charges_Past { get; set; }
        public virtual DbSet<PL_Charges_Pivot> PL_Charges_Pivot { get; set; }
        public virtual DbSet<PL_Courier_Bill> PL_Courier_Bill { get; set; }
        public virtual DbSet<PL_Courier_Maps> PL_Courier_Maps { get; set; }
        public virtual DbSet<PL_Daily_Work> PL_Daily_Work { get; set; }
        public virtual DbSet<PL_Data> PL_Data { get; set; }
        public virtual DbSet<PL_Data_Copy> PL_Data_Copy { get; set; }
        public virtual DbSet<PL_Data_Old> PL_Data_Old { get; set; }
        public virtual DbSet<PL_Data_Pivot> PL_Data_Pivot { get; set; }
        public virtual DbSet<PL_Data_Pivot_Old> PL_Data_Pivot_Old { get; set; }
        public virtual DbSet<PL_Data_Pivot_bkupApr20> PL_Data_Pivot_bkupApr20 { get; set; }
        public virtual DbSet<PL_Data_RepsSalary> PL_Data_RepsSalary { get; set; }
        public virtual DbSet<PL_Data_bkupApr20> PL_Data_bkupApr20 { get; set; }
        public virtual DbSet<PL_Data_bkupMay06> PL_Data_bkupMay06 { get; set; }
        public virtual DbSet<PL_Departments_Costs> PL_Departments_Costs { get; set; }
        public virtual DbSet<PL_Driver_BiWeekly_Pay> PL_Driver_BiWeekly_Pay { get; set; }
        public virtual DbSet<PL_Driver_Dist> PL_Driver_Dist { get; set; }
        public virtual DbSet<PL_Driver_Dist_Staging> PL_Driver_Dist_Staging { get; set; }
        public virtual DbSet<PL_Driver_Dist_bkup_14Feb2020> PL_Driver_Dist_bkup_14Feb2020 { get; set; }
        public virtual DbSet<PL_Driver_Dist_bkup_20Apr2020> PL_Driver_Dist_bkup_20Apr2020 { get; set; }
        public virtual DbSet<PL_Driver_Hourly> PL_Driver_Hourly { get; set; }
        public virtual DbSet<PL_EMR_Install_report> PL_EMR_Install_report { get; set; }
        public virtual DbSet<PL_EMR_Installation> PL_EMR_Installation { get; set; }
        public virtual DbSet<PL_EMR_Maintenance> PL_EMR_Maintenance { get; set; }
        public virtual DbSet<PL_EMR_Vendor_Mapping> PL_EMR_Vendor_Mapping { get; set; }
        public virtual DbSet<PL_EMR_Vendors> PL_EMR_Vendors { get; set; }
        public virtual DbSet<PL_Employee_Dictionary> PL_Employee_Dictionary { get; set; }
        public virtual DbSet<PL_Employee_Hours> PL_Employee_Hours { get; set; }
        public virtual DbSet<PL_Employee_Rates> PL_Employee_Rates { get; set; }
        public virtual DbSet<PL_Equipment_Costs> PL_Equipment_Costs { get; set; }
        public virtual DbSet<PL_Expected_Payments> PL_Expected_Payments { get; set; }
        public virtual DbSet<PL_Float_Distribution> PL_Float_Distribution { get; set; }
        public virtual DbSet<PL_Groups> PL_Groups { get; set; }
        public virtual DbSet<PL_Lab_Express> PL_Lab_Express { get; set; }
        public virtual DbSet<PL_Lab_Express_Staging> PL_Lab_Express_Staging { get; set; }
        public virtual DbSet<PL_Labor_Costs> PL_Labor_Costs { get; set; }
        public virtual DbSet<PL_Louisiana_Drivers> PL_Louisiana_Drivers { get; set; }
        public virtual DbSet<PL_Manager_Bonuses> PL_Manager_Bonuses { get; set; }
        public virtual DbSet<PL_Merabi_Imports> PL_Merabi_Imports { get; set; }
        public virtual DbSet<PL_NOT_OK_FOR_COURT> PL_NOT_OK_FOR_COURT { get; set; }
        public virtual DbSet<PL_Notes> PL_Notes { get; set; }
        public virtual DbSet<PL_Ok_for_court> PL_Ok_for_court { get; set; }
        public virtual DbSet<PL_Overhead_Costs> PL_Overhead_Costs { get; set; }
        public virtual DbSet<PL_POS_Cups> PL_POS_Cups { get; set; }
        public virtual DbSet<PL_Patient_Demographics> PL_Patient_Demographics { get; set; }
        public virtual DbSet<PL_Patrol_Exceptions> PL_Patrol_Exceptions { get; set; }
        public virtual DbSet<PL_Payments> PL_Payments { get; set; }
        public virtual DbSet<PL_Payments2> PL_Payments2 { get; set; }
        public virtual DbSet<PL_Payments_Pivot> PL_Payments_Pivot { get; set; }
        public virtual DbSet<PL_Payments_Pivot2> PL_Payments_Pivot2 { get; set; }
        public virtual DbSet<PL_Payments_test> PL_Payments_test { get; set; }
        public virtual DbSet<PL_Phleb_Distribution> PL_Phleb_Distribution { get; set; }
        public virtual DbSet<PL_Phleb_Expenses> PL_Phleb_Expenses { get; set; }
        public virtual DbSet<PL_Phleb_Groups> PL_Phleb_Groups { get; set; }
        public virtual DbSet<PL_Phleb_Payroll> PL_Phleb_Payroll { get; set; }
        public virtual DbSet<PL_Prospective_Reps> PL_Prospective_Reps { get; set; }
        public virtual DbSet<PL_Reagent_Costs> PL_Reagent_Costs { get; set; }
        public virtual DbSet<PL_Reagent_Log> PL_Reagent_Log { get; set; }
        public virtual DbSet<PL_Reagents_Pivot> PL_Reagents_Pivot { get; set; }
        public virtual DbSet<PL_Rent_Data> PL_Rent_Data { get; set; }
        public virtual DbSet<PL_Rent_HC> PL_Rent_HC { get; set; }
        public virtual DbSet<PL_Rent_Import> PL_Rent_Import { get; set; }
        public virtual DbSet<PL_Rent_Maps> PL_Rent_Maps { get; set; }
        public virtual DbSet<PL_Rep_Stop_Periods> PL_Rep_Stop_Periods { get; set; }
        public virtual DbSet<PL_SR_Expenses> PL_SR_Expenses { get; set; }
        public virtual DbSet<PL_Sales_Reps> PL_Sales_Reps { get; set; }
        public virtual DbSet<PL_Specimens> PL_Specimens { get; set; }
        public virtual DbSet<PL_Supplies_Custom> PL_Supplies_Custom { get; set; }
        public virtual DbSet<PL_Supplies_Exceptions> PL_Supplies_Exceptions { get; set; }
        public virtual DbSet<PL_Tox_Codes> PL_Tox_Codes { get; set; }
        public virtual DbSet<PL_Utilities_Staging> PL_Utilities_Staging { get; set; }
        public virtual DbSet<Payments_2015> Payments_2015 { get; set; }
        public virtual DbSet<Payments_BBType_Srv> Payments_BBType_Srv { get; set; }
        public virtual DbSet<Payments_BBType_Trn> Payments_BBType_Trn { get; set; }
        public virtual DbSet<PriceSchedule_19Aug2020> PriceSchedule_19Aug2020 { get; set; }
        public virtual DbSet<Report_Codes> Report_Codes { get; set; }
        public virtual DbSet<Reportables_view> Reportables_view { get; set; }
        public virtual DbSet<Rigita_view> Rigita_view { get; set; }
        public virtual DbSet<Sean_view> Sean_view { get; set; }
        public virtual DbSet<Sendout_Codes> Sendout_Codes { get; set; }
        public virtual DbSet<Shimon_view> Shimon_view { get; set; }
        public virtual DbSet<TEMP_JUN> TEMP_JUN { get; set; }
        public virtual DbSet<TEMP_JUN1> TEMP_JUN1 { get; set; }
        public virtual DbSet<TEMP_SEP> TEMP_SEP { get; set; }
        public virtual DbSet<TEMP_SPECIALITY> TEMP_SPECIALITY { get; set; }
        public virtual DbSet<TEMP_SPECIALITY_12Mar> TEMP_SPECIALITY_12Mar { get; set; }
        public virtual DbSet<TEMP_SPECIALITY_6Mar> TEMP_SPECIALITY_6Mar { get; set; }
        public virtual DbSet<Test_Departments> Test_Departments { get; set; }
        public virtual DbSet<Test_LOINC> Test_LOINC { get; set; }
        public virtual DbSet<Test_Revenue> Test_Revenue { get; set; }
        public virtual DbSet<Toxicology> Toxicology { get; set; }
        public virtual DbSet<ToxicologyEquipment> ToxicologyEquipment { get; set; }
        public virtual DbSet<ToxicologyLabor> ToxicologyLabor { get; set; }
        public virtual DbSet<ToxicologyReagents> ToxicologyReagents { get; set; }
        public virtual DbSet<ToxicologySupplies> ToxicologySupplies { get; set; }
        public virtual DbSet<Toxicology_Log> Toxicology_Log { get; set; }
        public virtual DbSet<TranslationalMaps> TranslationalMaps { get; set; }
        public virtual DbSet<UOM> UOM { get; set; }
        public virtual DbSet<UTI_History> UTI_History { get; set; }
        public virtual DbSet<VIP> VIP { get; set; }
        public virtual DbSet<VIPdeduct> VIPdeduct { get; set; }
        public virtual DbSet<WeeklyPhlebHours> WeeklyPhlebHours { get; set; }
        public virtual DbSet<all_charges_by_patient_name> all_charges_by_patient_name { get; set; }
        public virtual DbSet<all_charges_by_pt_name_forLuz> all_charges_by_pt_name_forLuz { get; set; }
        public virtual DbSet<all_payments_by_patient_name> all_payments_by_patient_name { get; set; }
        public virtual DbSet<athenaimport> athenaimport { get; set; }
        public virtual DbSet<chargesview> chargesview { get; set; }
        public virtual DbSet<clfs_data_collection_Percent_Off_New> clfs_data_collection_Percent_Off_New { get; set; }
        public virtual DbSet<codemapping> codemapping { get; set; }
        public virtual DbSet<cptdx> cptdx { get; set; }
        public virtual DbSet<custom_profile_list> custom_profile_list { get; set; }
        public virtual DbSet<dim_account> dim_account { get; set; }
        public virtual DbSet<dim_opportunity> dim_opportunity { get; set; }
        public virtual DbSet<dimaview> dimaview { get; set; }
        public virtual DbSet<employeemonthlypayroll> employeemonthlypayroll { get; set; }
        public virtual DbSet<employeemonthlypayroll_new> employeemonthlypayroll_new { get; set; }
        public virtual DbSet<facilityExport_Landmark> facilityExport_Landmark { get; set; }
        public virtual DbSet<facilityexport> facilityexport { get; set; }
        public virtual DbSet<facilityexport1> facilityexport1 { get; set; }
        public virtual DbSet<facilityexport_Aug> facilityexport_Aug { get; set; }
        public virtual DbSet<injecttest> injecttest { get; set; }
        public virtual DbSet<lcd_x_hcpc_code> lcd_x_hcpc_code { get; set; }
        public virtual DbSet<lcd_x_icd10_support> lcd_x_icd10_support { get; set; }
        public virtual DbSet<logtest> logtest { get; set; }
        public virtual DbSet<logtest_history> logtest_history { get; set; }
        public virtual DbSet<loin> loin { get; set; }
        public virtual DbSet<paymentsview> paymentsview { get; set; }
        public virtual DbSet<pl_utilities_maps> pl_utilities_maps { get; set; }
        public virtual DbSet<priceimport> priceimport { get; set; }
        public virtual DbSet<rigita> rigita { get; set; }
        public virtual DbSet<t_1435> t_1435 { get; set; }
        public virtual DbSet<t_17922_SpecialPrices> t_17922_SpecialPrices { get; set; }
        public virtual DbSet<t_AccountDeactivations> t_AccountDeactivations { get; set; }
        public virtual DbSet<t_AccountDeactivations_Failure> t_AccountDeactivations_Failure { get; set; }
        public virtual DbSet<t_Biweekly_CourierCost_Staging_FL> t_Biweekly_CourierCost_Staging_FL { get; set; }
        public virtual DbSet<t_BonusRates> t_BonusRates { get; set; }
        public virtual DbSet<t_Cytology_CaseNo_Diag> t_Cytology_CaseNo_Diag { get; set; }
        public virtual DbSet<t_DriverHoursFile> t_DriverHoursFile { get; set; }
        public virtual DbSet<t_Employee_Pay> t_Employee_Pay { get; set; }
        public virtual DbSet<t_FL_Accounts_CourierCosts_Split> t_FL_Accounts_CourierCosts_Split { get; set; }
        public virtual DbSet<t_Overhead_24547_Expenses> t_Overhead_24547_Expenses { get; set; }
        public virtual DbSet<t_Overhead_34821_Expenses> t_Overhead_34821_Expenses { get; set; }
        public virtual DbSet<t_Overhead_Expenses_0_000> t_Overhead_Expenses_0_000 { get; set; }
        public virtual DbSet<t_Overhead_Expenses_0_001> t_Overhead_Expenses_0_001 { get; set; }
        public virtual DbSet<t_Overhead_Expenses_7_001> t_Overhead_Expenses_7_001 { get; set; }
        public virtual DbSet<t_Overhead_Extras> t_Overhead_Extras { get; set; }
        public virtual DbSet<t_PatrolFile> t_PatrolFile { get; set; }
        public virtual DbSet<t_PunchReportJan> t_PunchReportJan { get; set; }
        public virtual DbSet<t_RecentVisitsJan> t_RecentVisitsJan { get; set; }
        public virtual DbSet<t_Reps_Together_For_Bonus_Calculation> t_Reps_Together_For_Bonus_Calculation { get; set; }
        public virtual DbSet<t_allexpensesfromquickbooks> t_allexpensesfromquickbooks { get; set; }
        public virtual DbSet<t_bonusCalculation> t_bonusCalculation { get; set; }
        public virtual DbSet<t_bonusCalculationStaging> t_bonusCalculationStaging { get; set; }
        public virtual DbSet<t_bonusCalculation_bkup02July2020> t_bonusCalculation_bkup02July2020 { get; set; }
        public virtual DbSet<t_bonusParams> t_bonusParams { get; set; }
        public virtual DbSet<t_bonusParamsStaging> t_bonusParamsStaging { get; set; }
        public virtual DbSet<t_bonusParams_bkup02July2020> t_bonusParams_bkup02July2020 { get; set; }
        public virtual DbSet<t_bonusType_SalesRep> t_bonusType_SalesRep { get; set; }
        public virtual DbSet<t_bonus_Month> t_bonus_Month { get; set; }
        public virtual DbSet<t_employeepunchesfile> t_employeepunchesfile { get; set; }
        public virtual DbSet<t_expenses_utilities> t_expenses_utilities { get; set; }
        public virtual DbSet<t_rep_payroll_map> t_rep_payroll_map { get; set; }
        public virtual DbSet<t_reps_file> t_reps_file { get; set; }
        public virtual DbSet<t_utilities_maps> t_utilities_maps { get; set; }
        public virtual DbSet<t_utilities_staging> t_utilities_staging { get; set; }
        public virtual DbSet<tbl_Landmark_Apr20> tbl_Landmark_Apr20 { get; set; }
        public virtual DbSet<tbl_Landmark_Aug20> tbl_Landmark_Aug20 { get; set; }
        public virtual DbSet<tbl_Landmark_Dec> tbl_Landmark_Dec { get; set; }
        public virtual DbSet<tbl_Landmark_Feb20> tbl_Landmark_Feb20 { get; set; }
        public virtual DbSet<tbl_Landmark_Jan20> tbl_Landmark_Jan20 { get; set; }
        public virtual DbSet<tbl_Landmark_Jul20> tbl_Landmark_Jul20 { get; set; }
        public virtual DbSet<tbl_Landmark_Jun20> tbl_Landmark_Jun20 { get; set; }
        public virtual DbSet<tbl_Landmark_Mar20> tbl_Landmark_Mar20 { get; set; }
        public virtual DbSet<tbl_Landmark_May20> tbl_Landmark_May20 { get; set; }
        public virtual DbSet<tbl_Landmark_Nov> tbl_Landmark_Nov { get; set; }
        public virtual DbSet<tbl_Landmark_Oct> tbl_Landmark_Oct { get; set; }
        public virtual DbSet<tbl_testsSeanAndMaxList> tbl_testsSeanAndMaxList { get; set; }
        public virtual DbSet<tbl_testsSunitsList> tbl_testsSunitsList { get; set; }
        public virtual DbSet<tbl_ups_freight> tbl_ups_freight { get; set; }
        public virtual DbSet<tempPayments> tempPayments { get; set; }
        public virtual DbSet<temp_AndysRequest> temp_AndysRequest { get; set; }
        public virtual DbSet<temp_Dec_LM> temp_Dec_LM { get; set; }
        public virtual DbSet<temp_Nov> temp_Nov { get; set; }
        public virtual DbSet<temp_Patient_Physician> temp_Patient_Physician { get; set; }
        public virtual DbSet<temp_PhlebAssign> temp_PhlebAssign { get; set; }
        public virtual DbSet<temp_SpecialPrice> temp_SpecialPrice { get; set; }
        public virtual DbSet<tests> tests { get; set; }
        public virtual DbSet<tmp_addAccessionNumber> tmp_addAccessionNumber { get; set; }
        public virtual DbSet<tmp_addAccessionNumber_New> tmp_addAccessionNumber_New { get; set; }
        public virtual DbSet<total_by_month> total_by_month { get; set; }
        public virtual DbSet<umethod> umethod { get; set; }
        public virtual DbSet<yearend> yearend { get; set; }
        public virtual DbSet<ReportRowStatus> ReportRowStatus { get; set; }
        public virtual DbSet<ReportRowStatusDetail> ReportRowStatusDetail { get; set; }
        public virtual DbSet<ReportSettings> ReportSettings { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer("Data Source=bssoft2b;Initial Catalog=FINANCE;Persist Security Info=True;User ID=sa;Password=Xamarin@1964");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ReportSettings>(entity =>
            {
                entity.HasKey("ReportId");
            });

            modelBuilder.Entity<ReportRowStatus>(entity =>
            {
                entity.HasOne(d => d.Report)
                    .WithMany(p => p.ReportRowStatuses)
                    .HasForeignKey(d => d.ReportId)
                    .HasConstraintName("FK_ReportRowStatus_ReportSettings");
            });

            modelBuilder.Entity<ReportRowStatusDetail>(entity =>
            {
                entity.HasOne(d => d.ReportRowStatus)
                    .WithMany(p => p.ReportRowStatusDetails)
                    .HasForeignKey(d => d.ReportRowStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ReportRowStatusDetail_ReportRowStatus");
            });

            modelBuilder.Entity<ARPIT_Codes>(entity =>
            {
                entity.Property(e => e.Code).IsUnicode(false);
            });

            modelBuilder.Entity<Allergy_Codes>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Code).IsUnicode(false);
            });

            modelBuilder.Entity<Analytical_Codes>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Code).IsUnicode(false);
            });

            modelBuilder.Entity<AspNetUserLogins>(entity =>
            {
                entity.HasKey(e => new { e.LoginProvider, e.ProviderKey });
            });

            modelBuilder.Entity<AspNetUserRoles>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RoleId });
            });

            modelBuilder.Entity<AspNetUserTokens>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name });
            });

            modelBuilder.Entity<BillTypeClasses>(entity =>
            {
                entity.Property(e => e.Bill_Type).ValueGeneratedNever();
            });

            modelBuilder.Entity<Bill_Activity>(entity =>
            {
                entity.HasKey(e => new { e.Inv_, e.User, e.Date })
                    .HasName("PK__Bill_Act__5B9907E6BD6ECE9B");

                entity.HasIndex(e => new { e.Action, e.User, e.Date, e.Action_Taken })
                    .HasName("IX_Bill_Activity_User_Date_Action Taken");

                entity.Property(e => e.Inv_).IsUnicode(false);

                entity.Property(e => e.User).IsUnicode(false);

                entity.Property(e => e.Action_Taken).IsUnicode(false);
            });

            modelBuilder.Entity<Bill_Data>(entity =>
            {
                entity.HasKey(e => new { e.Inv__, e.Bill_type })
                    .HasName("PK__Bill_Dat__DCDB153B32646862");

                entity.HasIndex(e => new { e.Inv__, e.Charges, e.Payments, e.Adjusts, e.Balance, e.Bill_type, e.Insurance_1 })
                    .HasName("IX_Bill_Data_Bill-type_Insurance-1");

                entity.HasIndex(e => new { e.Client_, e.Client_Name, e.Inv__, e.Name, e.Bill_Type_Insurance, e.Srv_date, e.Trn_date, e.Last_Billed, e.Charges, e.Payments, e.Adjusts, e.Balance, e.Insurance_1, e.Ins1_Name, e.Bill_type })
                    .HasName("IX_Bill_Data_Bill-type");

                entity.Property(e => e.Inv__).IsUnicode(false);

                entity.Property(e => e.Bill_Type_Insurance).IsUnicode(false);

                entity.Property(e => e.Chart_).IsUnicode(false);

                entity.Property(e => e.Client_).IsUnicode(false);

                entity.Property(e => e.Client_Name).IsUnicode(false);

                entity.Property(e => e.Collect_Date).IsUnicode(false);

                entity.Property(e => e.Doctor).IsUnicode(false);

                entity.Property(e => e.Ins1_Name).IsUnicode(false);

                entity.Property(e => e.Ins2_Name).IsUnicode(false);

                entity.Property(e => e.Insurance_1).IsUnicode(false);

                entity.Property(e => e.Insurance_2).IsUnicode(false);

                entity.Property(e => e.Last_Billed).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.Sales_Group1).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e._class).IsUnicode(false);

                entity.Property(e => e.type).IsUnicode(false);
            });

            modelBuilder.Entity<Bill_Groups>(entity =>
            {
                entity.Property(e => e.Group_Name).IsUnicode(false);

                entity.Property(e => e.Leader).IsUnicode(false);
            });

            modelBuilder.Entity<Bill_Inspection>(entity =>
            {
                entity.HasKey(e => new { e.Invoice, e.User, e.date_worked })
                    .HasName("PK__Bill_Ins__1F630F7EED940300");

                entity.Property(e => e.Invoice).IsUnicode(false);

                entity.Property(e => e.User).IsUnicode(false);
            });

            modelBuilder.Entity<Bill_Medical_Record_Request>(entity =>
            {
                entity.HasKey(e => new { e.Chart_, e.Inv_ });

                entity.Property(e => e.Chart_).IsUnicode(false);

                entity.Property(e => e.Inv_).IsUnicode(false);

                entity.Property(e => e.Note).IsUnicode(false);

                entity.Property(e => e.user).IsUnicode(false);
            });

            modelBuilder.Entity<Bill_Medical_Records>(entity =>
            {
                entity.Property(e => e.Inv_).IsUnicode(false);
            });

            modelBuilder.Entity<Bill_Reps>(entity =>
            {
                entity.HasKey(e => e.Group)
                    .HasName("PK__Bill_Rep__D38B865862D6872E");

                entity.Property(e => e.Group).IsUnicode(false);

                entity.Property(e => e.GroupManager).IsUnicode(false);

                entity.Property(e => e.Group_Name).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);

                entity.Property(e => e.TEL_).IsUnicode(false);

                entity.Property(e => e.user).IsUnicode(false);
            });

            modelBuilder.Entity<Bill_Types>(entity =>
            {
                entity.HasKey(e => e.Bill_Type)
                    .HasName("PK__Bill_Typ__FDFD03D083BF2BD9");

                entity.Property(e => e.Bill_Type).ValueGeneratedNever();

                entity.Property(e => e.Agent).IsUnicode(false);

                entity.Property(e => e.Notes).IsUnicode(false);

                entity.Property(e => e._____Ins_Name____________).IsUnicode(false);
            });

            modelBuilder.Entity<Bill_Users>(entity =>
            {
                entity.HasKey(e => e.Username)
                    .HasName("PK_Bill_User");

                entity.Property(e => e.Username).IsUnicode(false);

                entity.Property(e => e.Mapping).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.Password).IsUnicode(false);
            });

            modelBuilder.Entity<Bill_alert_exceptions>(entity =>
            {
                entity.HasKey(e => e.Bill_Type)
                    .HasName("PK__Bill_ale__1AEE0C9667EAB987");

                entity.Property(e => e.Bill_Type).ValueGeneratedNever();
            });

            modelBuilder.Entity<Bill_alert_periods>(entity =>
            {
                entity.HasKey(e => e.Bill_Type)
                    .HasName("PK__Bill_ale__1AEE0C96617FC410");

                entity.Property(e => e.Bill_Type).ValueGeneratedNever();
            });

            modelBuilder.Entity<BillingLag>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("BillingLag");

                entity.Property(e => e.Bill_type_Insurance_).IsUnicode(false);
            });

            modelBuilder.Entity<Blood_Bank_Codes>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Code).IsUnicode(false);
            });

            modelBuilder.Entity<Capri_View>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Capri_View");

                entity.Property(e => e.Account_Name).IsUnicode(false);

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Group_Manager).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.SubCategory).IsUnicode(false);

                entity.Property(e => e.Transaction).IsUnicode(false);

                entity.Property(e => e.data_id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Cardoso_view>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Cardoso_view");

                entity.Property(e => e.Account_Name).IsUnicode(false);

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Group_Manager).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.SubCategory).IsUnicode(false);

                entity.Property(e => e.Transaction).IsUnicode(false);

                entity.Property(e => e.data_id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Casey_view>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Casey_view");

                entity.Property(e => e.Account_Name).IsUnicode(false);

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Group_Manager).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.SubCategory).IsUnicode(false);

                entity.Property(e => e.Transaction).IsUnicode(false);

                entity.Property(e => e.data_id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Charges_Past>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Bill_type_Insurance_).IsUnicode(false);

                entity.Property(e => e.Chart_____).IsUnicode(false);

                entity.Property(e => e.Class_).IsUnicode(false);

                entity.Property(e => e.Client_Name_____).IsUnicode(false);

                entity.Property(e => e.Client____).IsUnicode(false);

                entity.Property(e => e.Collect_Date__).IsUnicode(false);

                entity.Property(e => e.Doctor_____).IsUnicode(false);

                entity.Property(e => e.Ins1_Name_).IsUnicode(false);

                entity.Property(e => e.Ins2_Name_).IsUnicode(false);

                entity.Property(e => e.Insurance_1_).IsUnicode(false);

                entity.Property(e => e.Insurance_2_).IsUnicode(false);

                entity.Property(e => e.Inv___________).IsUnicode(false);

                entity.Property(e => e.Last_Billed_).IsUnicode(false);

                entity.Property(e => e.Name_________________).IsUnicode(false);

                entity.Property(e => e.Sales_Group1).IsUnicode(false);

                entity.Property(e => e.Srv_date__).IsUnicode(false);

                entity.Property(e => e.Trn_date__).IsUnicode(false);

                entity.Property(e => e.type____).IsUnicode(false);
            });

            modelBuilder.Entity<ClientData>(entity =>
            {
                entity.HasKey(e => e.ClientId)
                    .HasName("PK_ClientData_ClientId");

                entity.Property(e => e.ClientId).ValueGeneratedNever();

                entity.Property(e => e.Data).IsUnicode(false);

                entity.Property(e => e.UpdatedDateUtc).HasDefaultValueSql("(getutcdate())");
            });

            modelBuilder.Entity<Client_Bill_Data>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<Client_Billing_Marks>(entity =>
            {
                entity.Property(e => e.Client).ValueGeneratedNever();
            });

            modelBuilder.Entity<Client_Bills>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.Client, e.Service_Month });

                entity.HasIndex(e => new { e.Client, e.Service_Month, e.Bill_Number });

                entity.Property(e => e.Bill_Number).IsUnicode(false);
            });

            modelBuilder.Entity<Coding_Activity>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Change).IsUnicode(false);

                entity.Property(e => e.PKey).IsUnicode(false);

                entity.Property(e => e.Table).IsUnicode(false);

                entity.Property(e => e.User).IsUnicode(false);
            });

            modelBuilder.Entity<Coding_Codes>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.meaning).IsUnicode(false);
            });

            modelBuilder.Entity<Coding_Invoices>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Invoice__).IsUnicode(false);

                entity.Property(e => e.Notes).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.key).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Cytology_Codes>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Code).IsUnicode(false);
            });

            modelBuilder.Entity<DaysPending>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Accession).IsUnicode(false);
            });

            modelBuilder.Entity<FL_Courier_Acc>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<Finance_Change_Tracking>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Line_Identifier).IsUnicode(false);

                entity.Property(e => e.Table).IsUnicode(false);

                entity.Property(e => e.User).IsUnicode(false);

                entity.Property(e => e.action).IsUnicode(false);
            });

            modelBuilder.Entity<Hemotology_Codes>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Code).IsUnicode(false);
            });

            modelBuilder.Entity<Hynds_view>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Hynds_view");

                entity.Property(e => e.Account_Name).IsUnicode(false);

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Group_Manager).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.SubCategory).IsUnicode(false);

                entity.Property(e => e.Transaction).IsUnicode(false);

                entity.Property(e => e.data_id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Immunology_Codes>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Code).IsUnicode(false);
            });

            modelBuilder.Entity<Imports>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.FileName).IsUnicode(false);

                entity.Property(e => e.Table).IsUnicode(false);
            });

            modelBuilder.Entity<Inactive_Codes>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Code).IsUnicode(false);
            });

            modelBuilder.Entity<Jack_view>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Jack_view");

                entity.Property(e => e.Account_Name).IsUnicode(false);

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Group_Manager).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.SubCategory).IsUnicode(false);

                entity.Property(e => e.Transaction).IsUnicode(false);

                entity.Property(e => e.data_id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Kanevsky_View>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Kanevsky_View");

                entity.Property(e => e.Account_Name).IsUnicode(false);

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Group_Manager).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.SubCategory).IsUnicode(false);

                entity.Property(e => e.Transaction).IsUnicode(false);
            });

            modelBuilder.Entity<LM_tmp>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CPT).IsUnicode(false);

                entity.Property(e => e.Classes).IsUnicode(false);

                entity.Property(e => e.First_Name).IsUnicode(false);

                entity.Property(e => e.Last_Name).IsUnicode(false);

                entity.Property(e => e.Provider).IsUnicode(false);
            });

            modelBuilder.Entity<LandMarkData_July_Aug>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<LandmarkAll>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<Marked_Bills>(entity =>
            {
                entity.HasKey(e => new { e.User, e.Inv_, e.Date })
                    .HasName("PK__Marked_B__EE243DB232FDA3DE");

                entity.HasIndex(e => new { e.Inv_, e.Active })
                    .HasName("IX_Marked_Bills_Active");

                entity.Property(e => e.User).IsUnicode(false);

                entity.Property(e => e.Inv_).IsUnicode(false);

                entity.Property(e => e.Reason).IsUnicode(false);
            });

            modelBuilder.Entity<Marketing_Specialties>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);
            });

            modelBuilder.Entity<Metal_Codes>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Code).IsUnicode(false);
            });

            modelBuilder.Entity<Microbiology_Codes>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Code).IsUnicode(false);
            });

            modelBuilder.Entity<Molecular_Codes>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Code).IsUnicode(false);
            });

            modelBuilder.Entity<Monaco_View>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Monaco_View");

                entity.Property(e => e.Account_Name).IsUnicode(false);

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Group_Manager).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.SubCategory).IsUnicode(false);

                entity.Property(e => e.Transaction).IsUnicode(false);

                entity.Property(e => e.data_id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Overdue_View>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Overdue_View");

                entity.Property(e => e.Accession).IsUnicode(false);

                entity.Property(e => e.Entry_Date).IsUnicode(false);

                entity.Property(e => e.Result).IsUnicode(false);

                entity.Property(e => e.Test_Code).IsUnicode(false);

                entity.Property(e => e.Test_Name).IsUnicode(false);

                entity.Property(e => e.department).IsUnicode(false);
            });

            modelBuilder.Entity<Overtime>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Employee_Id).IsUnicode(false);
            });

            modelBuilder.Entity<PATIENT>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Accession).IsUnicode(false);

                entity.Property(e => e.Address1).IsUnicode(false);

                entity.Property(e => e.Address2).IsUnicode(false);

                entity.Property(e => e.Bill_Type).IsUnicode(false);

                entity.Property(e => e.City).IsUnicode(false);

                entity.Property(e => e.Client_1).IsUnicode(false);

                entity.Property(e => e.Client_2).IsUnicode(false);

                entity.Property(e => e.D_O_B_).IsUnicode(false);

                entity.Property(e => e.Insurance_ID).IsUnicode(false);

                entity.Property(e => e.Pat_First_Name).IsUnicode(false);

                entity.Property(e => e.Pat_Last_Name).IsUnicode(false);

                entity.Property(e => e.Phone).IsUnicode(false);

                entity.Property(e => e.Service_Date).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.Zip).IsUnicode(false);
            });

            modelBuilder.Entity<PGX_Codes>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Code).IsUnicode(false);
            });

            modelBuilder.Entity<PGX_History>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Accession).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Account_Bonus_Override>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Sales_Rep).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Accounts>(entity =>
            {
                entity.HasIndex(e => e.SubGroup);

                entity.HasIndex(e => new { e.Number, e.Active })
                    .HasName("IX_PL_Accounts_Active");

                entity.Property(e => e.Number).ValueGeneratedNever();

                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.City).IsUnicode(false);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.NPI).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.Suite).IsUnicode(false);

                entity.Property(e => e.Telephone).IsUnicode(false);

                entity.Property(e => e.Zip_Code).IsUnicode(false);

                entity.Property(e => e.business_name).IsUnicode(false);

                entity.Property(e => e.email).IsUnicode(false);

                entity.Property(e => e.site).IsUnicode(false);

                entity.Property(e => e.specialty).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Acct_Bonuses>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Sales_Rep).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Athena_Exceptions>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.doctor).IsUnicode(false);

                entity.Property(e => e.group).IsUnicode(false);

                entity.Property(e => e.practname).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Bonus_Bracket>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.PaidTo).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Bonus_Nonsense>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Sales_Rep).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Bonus_PGX_Override>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Sales_Rep).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Bonus_Rates>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.PaidTo).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Bonus_Tox_Override>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Sales_Rep).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Bonuses>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Sales_Rep).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Bonuses_Pivot>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Sales_Rep).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Bonuses_Pivot2>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Account_Name).IsUnicode(false);

                entity.Property(e => e.OwnedBy).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Bonuses_Pivot2_Old>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Account_Name).IsUnicode(false);

                entity.Property(e => e.OwnedBy).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Bonuses_Pivot2_bkup31Aug>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Account_Name).IsUnicode(false);

                entity.Property(e => e.OwnedBy).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Bonuses_Pivot2_bkupApr20>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Account_Name).IsUnicode(false);

                entity.Property(e => e.OwnedBy).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Bonuses_Pivot2_staging>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Account_Name).IsUnicode(false);

                entity.Property(e => e.OwnedBy).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Charges>(entity =>
            {
                entity.HasKey(e => new { e.Inv___________, e.Bill_type__ })
                    .HasName("PK__Bill_Dat__DCDB153B63CE98F2");

                entity.Property(e => e.Inv___________).IsUnicode(false);

                entity.Property(e => e.Bill_type_Insurance_).IsUnicode(false);

                entity.Property(e => e.Chart_____).IsUnicode(false);

                entity.Property(e => e.Class_).IsUnicode(false);

                entity.Property(e => e.Client_Name_____).IsUnicode(false);

                entity.Property(e => e.Client____).IsUnicode(false);

                entity.Property(e => e.Collect_Date__).IsUnicode(false);

                entity.Property(e => e.Doctor_____).IsUnicode(false);

                entity.Property(e => e.Ins1_Name_).IsUnicode(false);

                entity.Property(e => e.Ins2_Name_).IsUnicode(false);

                entity.Property(e => e.Insurance_1_).IsUnicode(false);

                entity.Property(e => e.Insurance_2_).IsUnicode(false);

                entity.Property(e => e.Last_Billed_).IsUnicode(false);

                entity.Property(e => e.Name_________________).IsUnicode(false);

                entity.Property(e => e.Sales_Group1).IsUnicode(false);

                entity.Property(e => e.Srv_date__).IsUnicode(false);

                entity.Property(e => e.Trn_date__).IsUnicode(false);

                entity.Property(e => e.type____).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Charges_Past>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Chart_____).IsUnicode(false);

                entity.Property(e => e.Class_).IsUnicode(false);

                entity.Property(e => e.Client_Name_____).IsUnicode(false);

                entity.Property(e => e.Collect_Date__).IsUnicode(false);

                entity.Property(e => e.Doctor_____).IsUnicode(false);

                entity.Property(e => e.Ins1_Name_).IsUnicode(false);

                entity.Property(e => e.Ins2_Name_).IsUnicode(false);

                entity.Property(e => e.Insurance_).IsUnicode(false);

                entity.Property(e => e.Insurance_1_).IsUnicode(false);

                entity.Property(e => e.Insurance_2_).IsUnicode(false);

                entity.Property(e => e.Inv___________).IsUnicode(false);

                entity.Property(e => e.Last_Billed_).IsUnicode(false);

                entity.Property(e => e.Name_________________).IsUnicode(false);

                entity.Property(e => e.Srv_date__).IsUnicode(false);

                entity.Property(e => e.Status_).IsUnicode(false);

                entity.Property(e => e.Trn_date__).IsUnicode(false);

                entity.Property(e => e.type____).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Charges_Pivot>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.Insurance, e.Invoice, e.Charges, e.Payments, e.Adjusts, e.Balance, e.Expected_Payments, e.Sales_Rep, e.SubGroup, e.Date })
                    .HasName("IX_PL_Charges_Pivot_Sales Rep_SubGroup_Date");

                entity.Property(e => e.Insurance).IsUnicode(false);

                entity.Property(e => e.Invoice).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Courier_Bill>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<PL_Courier_Maps>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Name).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Daily_Work>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<PL_Data>(entity =>
            {
                entity.HasKey(e => e.data_id)
                    .HasName("PK__PL_Data__F5A76B3B56669302");

                entity.HasIndex(e => new { e.data_id, e.Transaction, e.Date })
                    .HasName("IX_PL_Data_Transaction_Date");

                entity.HasIndex(e => new { e.Category, e.Transaction, e.Sales_Rep, e.Group, e.Group_Manager, e.SubGroup, e.Account, e.Amount, e.Date })
                    .HasName("IX_PL_Data_Date");

                entity.Property(e => e.Account_Name).IsUnicode(false);

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Group_Manager).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.SubCategory).IsUnicode(false);

                entity.Property(e => e.Transaction).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Data_Copy>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Account_Name).IsUnicode(false);

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Group_Manager).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.SubCategory).IsUnicode(false);

                entity.Property(e => e.Transaction).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Data_Old>(entity =>
            {
                entity.HasKey(e => e.data_id)
                    .HasName("PK__PL_Data__F5A76B3B40F43837");

                entity.Property(e => e.Account_Name).IsUnicode(false);

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Group_Manager).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.SubCategory).IsUnicode(false);

                entity.Property(e => e.Transaction).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Data_Pivot>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.SubGroup, e.Category });

                entity.HasIndex(e => new { e.Group_Manager, e.Sales_Rep, e.group, e.SubGroup, e.Account, e.Transaction, e._115, e._215, e._315, e._415, e._515, e._615, e._715, e._815, e._915, e._1015, e._1115, e._1215, e._116, e._216, e._316, e._416, e._516, e._616, e._716, e._816, e._916, e._1016, e._1116, e._1216, e._117, e._217, e._317, e._417, e._517, e._617, e._717, e._817, e._917, e._1017, e._1117, e._1217, e._118, e._218, e._318, e._418, e._518, e._618, e._718, e._818, e._918, e._1018, e._1118, e._1218, e._119, e._219, e._319, e._419, e._519, e._619, e._719, e._819, e._919, e._1019, e._1119, e._1219, e._120, e._220, e._320, e._420, e._520, e._620, e._720, e._820, e._920, e.Category })
                    .HasName("PL_Data_Pivot_Category_New");

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Group_Manager).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);

                entity.Property(e => e.Transaction).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Data_Pivot_Old>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.Group_Manager, e.Sales_Rep, e.group, e.SubGroup, e.Account, e.Transaction, e._115, e._215, e._315, e._415, e._515, e._615, e._715, e._815, e._915, e._1015, e._1115, e._1215, e._116, e._216, e._316, e._416, e._516, e._616, e._716, e._816, e._916, e._1016, e._1116, e._1216, e._117, e._217, e._317, e._417, e._517, e._617, e._717, e._817, e._917, e._1017, e._1117, e._1217, e._118, e._218, e._318, e._418, e._518, e._618, e._718, e._818, e._918, e._1018, e._1118, e._1218, e._119, e._219, e._319, e._419, e._519, e._619, e._719, e._819, e._919, e._1019, e._1119, e._1219, e._120, e.Category })
                    .HasName("PL_Data_Pivot_Category");

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Group_Manager).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);

                entity.Property(e => e.Transaction).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Data_Pivot_bkupApr20>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Group_Manager).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);

                entity.Property(e => e.Transaction).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Data_RepsSalary>(entity =>
            {
                entity.HasKey(e => e.data_id)
                    .HasName("PK__PL_Data___F5A76B3B8305480A");

                entity.HasIndex(e => new { e.Sales_Rep, e.Chart_Data, e.Transaction, e.Date })
                    .HasName("IX_PL_Data_RepsSalary_Transaction_Date");

                entity.Property(e => e.Account_Name).IsUnicode(false);

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Group_Manager).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.SubCategory).IsUnicode(false);

                entity.Property(e => e.Transaction).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Data_bkupApr20>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Account_Name).IsUnicode(false);

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Group_Manager).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.SubCategory).IsUnicode(false);

                entity.Property(e => e.Transaction).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Data_bkupMay06>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Account_Name).IsUnicode(false);

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Group_Manager).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.SubCategory).IsUnicode(false);

                entity.Property(e => e.Transaction).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Departments_Costs>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Department).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Driver_BiWeekly_Pay>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Driver).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Driver_Dist>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<PL_Driver_Dist_Staging>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Notes).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Driver_Dist_bkup_14Feb2020>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<PL_Driver_Dist_bkup_20Apr2020>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<PL_Driver_Hourly>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Driver).IsUnicode(false);
            });

            modelBuilder.Entity<PL_EMR_Install_report>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Account_Name).IsUnicode(false);

                entity.Property(e => e.Group_Manager).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);

                entity.Property(e => e.Vendor_name).IsUnicode(false);
            });

            modelBuilder.Entity<PL_EMR_Installation>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Vendor_Name).IsUnicode(false);

                entity.Property(e => e.key).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<PL_EMR_Maintenance>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.Account, e.Date })
                    .HasName("ClusteredIndex-20171023-104352")
                    .IsClustered();

                entity.HasIndex(e => new { e.Auto, e.emrkey, e.vendor });

                entity.HasIndex(e => new { e.Date, e.vendor, e.emrkey });

                entity.Property(e => e.Key).ValueGeneratedOnAdd();

                entity.Property(e => e.vendor).IsUnicode(false);
            });

            modelBuilder.Entity<PL_EMR_Vendor_Mapping>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.EMR_Company_Name).IsUnicode(false);

                entity.Property(e => e.Vendor_Name).IsUnicode(false);
            });

            modelBuilder.Entity<PL_EMR_Vendors>(entity =>
            {
                entity.Property(e => e.Vendor_Name).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Employee_Dictionary>(entity =>
            {
                entity.HasKey(e => e.Employee_ID)
                    .HasName("PK__PL_Emplo__682EC9E43988440E");

                entity.Property(e => e.Employee_ID).IsUnicode(false);

                entity.Property(e => e.Last_Name).IsUnicode(false);

                entity.Property(e => e.Lead).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.mapping).IsUnicode(false);

                entity.Property(e => e.telephone).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Employee_Hours>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.Employee_Id, e.date });

                entity.Property(e => e.Employee_Id).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Employee_Rates>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.Employee_Id, e.Date })
                    .HasName("IX_PL_Employee_Rates_Date");

                entity.Property(e => e.Employee_Id).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Equipment_Costs>(entity =>
            {
                entity.HasKey(e => e.Date)
                    .HasName("PK__PL_Equip__77387D06565334BA");
            });

            modelBuilder.Entity<PL_Expected_Payments>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Invoice).IsUnicode(false);

                entity.Property(e => e.Manager).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Float_Distribution>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Employee_Name).IsUnicode(false);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.Status).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<PL_Groups>(entity =>
            {
                entity.Property(e => e.Group_Number).ValueGeneratedNever();

                entity.Property(e => e.Group_Manager).IsUnicode(false);

                entity.Property(e => e.Group_Name).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);

                entity.Property(e => e.Tel_).IsUnicode(false);

                entity.Property(e => e.User).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Lab_Express>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<PL_Lab_Express_Staging>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Amount).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Louisiana_Drivers>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Employee_Id).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Manager_Bonuses>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Manager).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Merabi_Imports>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<PL_NOT_OK_FOR_COURT>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<PL_Notes>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Account_Name).IsUnicode(false);

                entity.Property(e => e.Note).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Ok_for_court>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<PL_POS_Cups>(entity =>
            {
                entity.HasKey(e => new { e.Account, e.Date })
                    .HasName("PK__PL_POS_C__C7B02B97E0FAFF04");

                entity.Property(e => e.Payment_Method).IsUnicode(false);

                entity.Property(e => e.Transaction_Number).IsUnicode(false);

                entity.Property(e => e.id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<PL_Patient_Demographics>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.Last_Name, e.First_Name, e.DOB, e.Accession })
                    .HasName("IX_PL_Patient_Demographics_Accession");

                entity.Property(e => e.Accession).IsUnicode(false);

                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.Chart_).IsUnicode(false);

                entity.Property(e => e.City).IsUnicode(false);

                entity.Property(e => e.First_Name).IsUnicode(false);

                entity.Property(e => e.Gender).IsUnicode(false);

                entity.Property(e => e.Last_Name).IsUnicode(false);

                entity.Property(e => e.Middle_Initial).IsUnicode(false);

                entity.Property(e => e.Phone).IsUnicode(false);

                entity.Property(e => e.Social_Security).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.Zip).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Patrol_Exceptions>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Checkpoint).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Payments>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.Collect_Date__)
                    .HasName("IX_PL_Payments");

                entity.Property(e => e.Accession_).IsUnicode(false);

                entity.Property(e => e.Bill_type_Insurance_).IsUnicode(false);

                entity.Property(e => e.Chart_____).IsUnicode(false);

                entity.Property(e => e.Check__).IsUnicode(false);

                entity.Property(e => e.Class_).IsUnicode(false);

                entity.Property(e => e.Client_Name).IsUnicode(false);

                entity.Property(e => e.Client_Name_____).IsUnicode(false);

                entity.Property(e => e.Collect_Date__).IsUnicode(false);

                entity.Property(e => e.Ins1_Name_).IsUnicode(false);

                entity.Property(e => e.Ins2_Name_).IsUnicode(false);

                entity.Property(e => e.Insurance_1_).IsUnicode(false);

                entity.Property(e => e.Insurance_2_).IsUnicode(false);

                entity.Property(e => e.Name_________________).IsUnicode(false);

                entity.Property(e => e.Physician__).IsUnicode(false);

                entity.Property(e => e.Sales_Group1).IsUnicode(false);

                entity.Property(e => e.Srv_date__).IsUnicode(false);

                entity.Property(e => e.Trn_date__).IsUnicode(false);

                entity.Property(e => e.type____).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Payments2>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Accession_).IsUnicode(false);

                entity.Property(e => e.Bill_type_Insurance_).IsUnicode(false);

                entity.Property(e => e.Chart_____).IsUnicode(false);

                entity.Property(e => e.Check__).IsUnicode(false);

                entity.Property(e => e.Class_).IsUnicode(false);

                entity.Property(e => e.Client_Name).IsUnicode(false);

                entity.Property(e => e.Client_Name_____).IsUnicode(false);

                entity.Property(e => e.Collect_Date__).IsUnicode(false);

                entity.Property(e => e.Ins1_Name_).IsUnicode(false);

                entity.Property(e => e.Ins2_Name_).IsUnicode(false);

                entity.Property(e => e.Insurance_1_).IsUnicode(false);

                entity.Property(e => e.Insurance_2_).IsUnicode(false);

                entity.Property(e => e.Name_________________).IsUnicode(false);

                entity.Property(e => e.Physician__).IsUnicode(false);

                entity.Property(e => e.Sales_Group1).IsUnicode(false);

                entity.Property(e => e.Srv_date__).IsUnicode(false);

                entity.Property(e => e.Trn_date__).IsUnicode(false);

                entity.Property(e => e.type____).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Payments_Pivot>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Bill_Type_Name).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Payments_Pivot2>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Insurance).IsUnicode(false);

                entity.Property(e => e.Invoice).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Payments_test>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Accession_).IsUnicode(false);

                entity.Property(e => e.Bill_type_Insurance_).IsUnicode(false);

                entity.Property(e => e.Chart_____).IsUnicode(false);

                entity.Property(e => e.Check__).IsUnicode(false);

                entity.Property(e => e.Class_).IsUnicode(false);

                entity.Property(e => e.Client_Name).IsUnicode(false);

                entity.Property(e => e.Client_Name_____).IsUnicode(false);

                entity.Property(e => e.Collect_Date__).IsUnicode(false);

                entity.Property(e => e.Ins1_Name_).IsUnicode(false);

                entity.Property(e => e.Ins2_Name_).IsUnicode(false);

                entity.Property(e => e.Insurance_1_).IsUnicode(false);

                entity.Property(e => e.Insurance_2_).IsUnicode(false);

                entity.Property(e => e.Name_________________).IsUnicode(false);

                entity.Property(e => e.Physician__).IsUnicode(false);

                entity.Property(e => e.Sales_Group1).IsUnicode(false);

                entity.Property(e => e.Srv_date__).IsUnicode(false);

                entity.Property(e => e.Trn_date__).IsUnicode(false);

                entity.Property(e => e.type____).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Phleb_Distribution>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Employee_Name).IsUnicode(false);

                entity.Property(e => e.ID).ValueGeneratedOnAdd();

                entity.Property(e => e.Status).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<PL_Phleb_Expenses>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.Account, e.Type, e.Amount });

                entity.Property(e => e.Employee).IsUnicode(false);

                entity.Property(e => e.Group).IsUnicode(false);

                entity.Property(e => e.Key).ValueGeneratedOnAdd();

                entity.Property(e => e.Notes).IsUnicode(false);

                entity.Property(e => e.Type).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<PL_Phleb_Groups>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Group_Name).IsUnicode(false);

                entity.Property(e => e.key).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<PL_Phleb_Payroll>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.Employee, e.date })
                    .HasName("IX_PL_Phleb_Payroll_date");

                entity.Property(e => e.Employee).IsUnicode(false);

                entity.Property(e => e.Notes).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Prospective_Reps>(entity =>
            {
                entity.HasKey(e => e.Number)
                    .HasName("PK__PL_Prosp__78A1A19CE1A5CB8C");

                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.Agreement).IsUnicode(false);

                entity.Property(e => e.Contact).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Reagent_Costs>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Client_Name).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.Test_).IsUnicode(false);

                entity.Property(e => e.Test_Type).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Reagent_Log>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Test_Code).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Reagents_Pivot>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.Count, e.Account, e.Date, e.Test_Code })
                    .HasName("IX_PL_Reagents_Pivot_Account_Date_Test Code");

                entity.Property(e => e.Sales_Rep).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.Test_Code).IsUnicode(false);

                entity.Property(e => e.Test_Name).IsUnicode(false);

                entity.Property(e => e.Test_Type).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Rent_Data>(entity =>
            {
                entity.HasKey(e => e.key)
                    .HasName("PK__PL_Rent___DFD83CAE64163A90");

                entity.Property(e => e.Doctor).IsUnicode(false);

                entity.Property(e => e.Terminated).HasDefaultValueSql("((0))");

                entity.Property(e => e.location).IsUnicode(false);

                entity.Property(e => e.remark).IsUnicode(false);

                entity.Property(e => e.telephone).IsUnicode(false);

                entity.Property(e => e.written_to).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Rent_HC>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<PL_Rent_Import>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.address).IsUnicode(false);

                entity.Property(e => e.memo).IsUnicode(false);

                entity.Property(e => e.name).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Rent_Maps>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Rep_Stop_Periods>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<PL_SR_Expenses>(entity =>
            {
                entity.HasKey(e => new { e.Sales_Rep, e.Date })
                    .HasName("PK__PL_SR_Ex__20577C053641EF1F");

                entity.Property(e => e.Sales_Rep).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Sales_Reps>(entity =>
            {
                entity.HasKey(e => e.Sales_Rep)
                    .HasName("PK__PL_Sales__5724FBD5F4346B3F");

                entity.Property(e => e.Sales_Rep).IsUnicode(false);

                entity.Property(e => e.Main).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<PL_Specimens>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.Account, e.Date })
                    .HasName("IX_PL_Specimens_Date");

                entity.HasIndex(e => new { e.Count, e.Account, e.Date })
                    .HasName("IX_PL_Specimens_Account_Date");

                entity.Property(e => e.Account_Name).IsUnicode(false);

                entity.Property(e => e.EMR_Company).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Supplies_Exceptions>(entity =>
            {
                entity.HasKey(e => e.Name)
                    .HasName("PK__PL_Suppl__737584F77C4861E6");

                entity.Property(e => e.Name).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Tox_Codes>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Source).IsUnicode(false);
            });

            modelBuilder.Entity<PL_Utilities_Staging>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Accu_Account).IsUnicode(false);

                entity.Property(e => e.Accu_Group).IsUnicode(false);

                entity.Property(e => e.Clr).IsUnicode(false);

                entity.Property(e => e.Debit).IsUnicode(false);

                entity.Property(e => e.Notes).IsUnicode(false);

                entity.Property(e => e.Split).IsUnicode(false);

                entity.Property(e => e.Utl_Memo).IsUnicode(false);

                entity.Property(e => e.Utl_Name).IsUnicode(false);

                entity.Property(e => e.Utl_Num).IsUnicode(false);

                entity.Property(e => e.Utl_Type).IsUnicode(false);
            });

            modelBuilder.Entity<Payments_2015>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Accession_).IsUnicode(false);

                entity.Property(e => e.Bill_type_Insurance_).IsUnicode(false);

                entity.Property(e => e.Chart_____).IsUnicode(false);

                entity.Property(e => e.Check__).IsUnicode(false);

                entity.Property(e => e.Class_).IsUnicode(false);

                entity.Property(e => e.Client_Name).IsUnicode(false);

                entity.Property(e => e.Client_Name_____).IsUnicode(false);

                entity.Property(e => e.Collect_Date__).IsUnicode(false);

                entity.Property(e => e.Ins1_Name_).IsUnicode(false);

                entity.Property(e => e.Ins2_Name_).IsUnicode(false);

                entity.Property(e => e.Insurance_1_).IsUnicode(false);

                entity.Property(e => e.Insurance_2_).IsUnicode(false);

                entity.Property(e => e.Name_________________).IsUnicode(false);

                entity.Property(e => e.Physician__).IsUnicode(false);

                entity.Property(e => e.Sales_Group1).IsUnicode(false);

                entity.Property(e => e.Srv_date__).IsUnicode(false);

                entity.Property(e => e.Trn_date__).IsUnicode(false);

                entity.Property(e => e.type____).IsUnicode(false);
            });

            modelBuilder.Entity<Payments_BBType_Srv>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Payments_BBType_Srv");

                entity.Property(e => e._____Ins_Name____________).IsUnicode(false);
            });

            modelBuilder.Entity<Payments_BBType_Trn>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Payments_BBType_Trn");

                entity.Property(e => e._____Ins_Name____________).IsUnicode(false);
            });

            modelBuilder.Entity<PriceSchedule_19Aug2020>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Cost).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);
            });

            modelBuilder.Entity<Report_Codes>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Code).IsUnicode(false);
            });

            modelBuilder.Entity<Reportables_view>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Reportables_view");

                entity.Property(e => e.Accession).IsUnicode(false);

                entity.Property(e => e.Alternate_Patient_ID).IsUnicode(false);

                entity.Property(e => e.Collection_Date).IsUnicode(false);

                entity.Property(e => e.Date_Test_Resulted).IsUnicode(false);

                entity.Property(e => e.LOINC_Code).IsUnicode(false);

                entity.Property(e => e.LOINC_Description).IsUnicode(false);

                entity.Property(e => e.Lab_Code).IsUnicode(false);

                entity.Property(e => e.Lab_Description).IsUnicode(false);

                entity.Property(e => e.Medical_Record_Testing_Facility).IsUnicode(false);

                entity.Property(e => e.Observation_Specimen_Source_Code).IsUnicode(false);

                entity.Property(e => e.Observation_Specimen_Source_Text).IsUnicode(false);

                entity.Property(e => e.Ordering_Facility_Address).IsUnicode(false);

                entity.Property(e => e.Ordering_Facility_City).IsUnicode(false);

                entity.Property(e => e.Ordering_Facility_Name).IsUnicode(false);

                entity.Property(e => e.Ordering_Facility_Phone).IsUnicode(false);

                entity.Property(e => e.Ordering_Facility_State).IsUnicode(false);

                entity.Property(e => e.Ordering_Facility_Zip_Code).IsUnicode(false);

                entity.Property(e => e.Patient_Address).IsUnicode(false);

                entity.Property(e => e.Patient_City).IsUnicode(false);

                entity.Property(e => e.Patient_Country_of_Residence).IsUnicode(false);

                entity.Property(e => e.Patient_County).IsUnicode(false);

                entity.Property(e => e.Patient_Date_of_Birth).IsUnicode(false);

                entity.Property(e => e.Patient_Ethnic_Group).IsUnicode(false);

                entity.Property(e => e.Patient_First_Name).IsUnicode(false);

                entity.Property(e => e.Patient_Gender).IsUnicode(false);

                entity.Property(e => e.Patient_Last_Name).IsUnicode(false);

                entity.Property(e => e.Patient_Middle_Name).IsUnicode(false);

                entity.Property(e => e.Patient_Phone).IsUnicode(false);

                entity.Property(e => e.Patient_Race).IsUnicode(false);

                entity.Property(e => e.Patient_State).IsUnicode(false);

                entity.Property(e => e.Patient_Zip).IsUnicode(false);

                entity.Property(e => e.Provider_Address).IsUnicode(false);

                entity.Property(e => e.Provider_City).IsUnicode(false);

                entity.Property(e => e.Provider_Name).IsUnicode(false);

                entity.Property(e => e.Provider_Phone).IsUnicode(false);

                entity.Property(e => e.Provider_State).IsUnicode(false);

                entity.Property(e => e.Provider_Zip_Code).IsUnicode(false);

                entity.Property(e => e.Social_Security__).IsUnicode(false);

                entity.Property(e => e.Test_Result).IsUnicode(false);
            });

            modelBuilder.Entity<Rigita_view>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Rigita_view");

                entity.Property(e => e.Account_Name).IsUnicode(false);

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Group_Manager).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.SubCategory).IsUnicode(false);

                entity.Property(e => e.Transaction).IsUnicode(false);

                entity.Property(e => e.data_id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Sean_view>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Sean_view");

                entity.Property(e => e.Account_Name).IsUnicode(false);

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Group_Manager).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.SubCategory).IsUnicode(false);

                entity.Property(e => e.Transaction).IsUnicode(false);

                entity.Property(e => e.data_id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<Sendout_Codes>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Lab).IsUnicode(false);
            });

            modelBuilder.Entity<Shimon_view>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("Shimon_view");

                entity.Property(e => e.Account_Name).IsUnicode(false);

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Group_Manager).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.SubCategory).IsUnicode(false);

                entity.Property(e => e.Transaction).IsUnicode(false);

                entity.Property(e => e.data_id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<TEMP_JUN>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CPT).IsUnicode(false);

                entity.Property(e => e.Classes).IsUnicode(false);

                entity.Property(e => e.First_Name).IsUnicode(false);

                entity.Property(e => e.Last_Name).IsUnicode(false);

                entity.Property(e => e.Provider).IsUnicode(false);
            });

            modelBuilder.Entity<TEMP_JUN1>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CPT).IsUnicode(false);

                entity.Property(e => e.Classes).IsUnicode(false);

                entity.Property(e => e.First_Name).IsUnicode(false);

                entity.Property(e => e.Last_Name).IsUnicode(false);

                entity.Property(e => e.Provider).IsUnicode(false);
            });

            modelBuilder.Entity<TEMP_SEP>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CPT).IsUnicode(false);

                entity.Property(e => e.Classes).IsUnicode(false);

                entity.Property(e => e.First_Name).IsUnicode(false);

                entity.Property(e => e.Last_Name).IsUnicode(false);

                entity.Property(e => e.Provider).IsUnicode(false);
            });

            modelBuilder.Entity<TEMP_SPECIALITY>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.AccuCodes).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.Notes).IsUnicode(false);
            });

            modelBuilder.Entity<TEMP_SPECIALITY_12Mar>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.AccuCodes).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);
            });

            modelBuilder.Entity<TEMP_SPECIALITY_6Mar>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.AccuCodes).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.Notes).IsUnicode(false);
            });

            modelBuilder.Entity<Test_Departments>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Department).IsUnicode(false);
            });

            modelBuilder.Entity<Test_LOINC>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CODE).IsUnicode(false);

                entity.Property(e => e.LOINC_Code).IsUnicode(false);

                entity.Property(e => e.LOINC_Description).IsUnicode(false);

                entity.Property(e => e.TEST).IsUnicode(false);
            });

            modelBuilder.Entity<Test_Revenue>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Bill_Type).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);
            });

            modelBuilder.Entity<Toxicology>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Accession_).IsUnicode(false);

                entity.Property(e => e.Machine).IsUnicode(false);

                entity.Property(e => e.Status).IsUnicode(false);

                entity.Property(e => e.source).IsUnicode(false);
            });

            modelBuilder.Entity<ToxicologyEquipment>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<ToxicologyLabor>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<ToxicologyReagents>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<ToxicologySupplies>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<Toxicology_Log>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Accession).IsUnicode(false);

                entity.Property(e => e.Changed_to).IsUnicode(false);

                entity.Property(e => e.File).IsUnicode(false);

                entity.Property(e => e.Machine).IsUnicode(false);
            });

            modelBuilder.Entity<TranslationalMaps>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.ProviderID).IsUnicode(false);
            });

            modelBuilder.Entity<UOM>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.UOM1).IsUnicode(false);
            });

            modelBuilder.Entity<UTI_History>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Accession).IsUnicode(false);
            });

            modelBuilder.Entity<VIP>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<VIPdeduct>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<WeeklyPhlebHours>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.EmployeeID).IsUnicode(false);
            });

            modelBuilder.Entity<all_charges_by_patient_name>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.Srv_Date, e.Code, e.TestName, e.Charges, e.Payments, e.Adjusts, e.Balance, e.Client__, e.Inv__ })
                    .HasName("IX_inv_number");

                entity.Property(e => e.Bill_type).IsUnicode(false);

                entity.Property(e => e.CPT).IsUnicode(false);

                entity.Property(e => e.Client_Name).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Inv__).IsUnicode(false);

                entity.Property(e => e.Last_Billed).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.Srv_Date).IsUnicode(false);

                entity.Property(e => e.TestName).IsUnicode(false);

                entity.Property(e => e.Trn_Date).IsUnicode(false);
            });

            modelBuilder.Entity<all_charges_by_pt_name_forLuz>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Bill_type).IsUnicode(false);

                entity.Property(e => e.CPT).IsUnicode(false);

                entity.Property(e => e.Client_Name).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Inv__).IsUnicode(false);

                entity.Property(e => e.Last_Billed).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.Srv_Date).IsUnicode(false);

                entity.Property(e => e.TestName).IsUnicode(false);

                entity.Property(e => e.Trn_Date).IsUnicode(false);
            });

            modelBuilder.Entity<all_payments_by_patient_name>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Bill_type).IsUnicode(false);

                entity.Property(e => e.CPT).IsUnicode(false);

                entity.Property(e => e.Client_Name).IsUnicode(false);

                entity.Property(e => e.Client__).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Inv__).IsUnicode(false);

                entity.Property(e => e.Last_Billed).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.Sales_Group).IsUnicode(false);

                entity.Property(e => e.Srv_date).IsUnicode(false);

                entity.Property(e => e.TestName).IsUnicode(false);

                entity.Property(e => e.Trn_date).IsUnicode(false);

                entity.Property(e => e.Units).IsUnicode(false);
            });

            modelBuilder.Entity<athenaimport>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.clinid).IsUnicode(false);

                entity.Property(e => e.doctor).IsUnicode(false);

                entity.Property(e => e.fname).IsUnicode(false);

                entity.Property(e => e.groupname).IsUnicode(false);

                entity.Property(e => e.lname).IsUnicode(false);

                entity.Property(e => e.orderdesc).IsUnicode(false);

                entity.Property(e => e.orderid).IsUnicode(false);

                entity.Property(e => e.ordertype).IsUnicode(false);

                entity.Property(e => e.practname).IsUnicode(false);

                entity.Property(e => e.recprac).IsUnicode(false);

                entity.Property(e => e.recprov).IsUnicode(false);
            });

            modelBuilder.Entity<chargesview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("chargesview");

                entity.Property(e => e.Agent).IsUnicode(false);

                entity.Property(e => e.Bill_type_Insurance_).IsUnicode(false);

                entity.Property(e => e.Chart_____).IsUnicode(false);

                entity.Property(e => e.Class_).IsUnicode(false);

                entity.Property(e => e.Client_Name_____).IsUnicode(false);

                entity.Property(e => e.Client____).IsUnicode(false);

                entity.Property(e => e.Collect_Date__).IsUnicode(false);

                entity.Property(e => e.Doctor_____).IsUnicode(false);

                entity.Property(e => e.Ins1_Name_).IsUnicode(false);

                entity.Property(e => e.Ins2_Name_).IsUnicode(false);

                entity.Property(e => e.Insurance_1_).IsUnicode(false);

                entity.Property(e => e.Insurance_2_).IsUnicode(false);

                entity.Property(e => e.Inv___________).IsUnicode(false);

                entity.Property(e => e.Last_Billed_).IsUnicode(false);

                entity.Property(e => e.Name_________________).IsUnicode(false);

                entity.Property(e => e.Notes).IsUnicode(false);

                entity.Property(e => e.Sales_Group1).IsUnicode(false);

                entity.Property(e => e.Srv_date__).IsUnicode(false);

                entity.Property(e => e.Trn_date__).IsUnicode(false);

                entity.Property(e => e._____Ins_Name____________).IsUnicode(false);

                entity.Property(e => e.type____).IsUnicode(false);
            });

            modelBuilder.Entity<clfs_data_collection_Percent_Off_New>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.HCPCS_CODE_5_alpha_numeric_characters_).IsUnicode(false);

                entity.Property(e => e.PAYMENT_RATE_1_5_numeric_characters_and_two_decimal_places_).IsUnicode(false);

                entity.Property(e => e.Percent_Off).IsUnicode(false);

                entity.Property(e => e.VOLUME_1_6_numeric_characters_).IsUnicode(false);

                entity.Property(e => e.Year_When_Full_Payment_Change_Applies).IsUnicode(false);

                entity.Property(e => e._2019_Payment_w__Cap).IsUnicode(false);

                entity.Property(e => e._2020_Payment_w__Cap).IsUnicode(false);
            });

            modelBuilder.Entity<codemapping>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CPT).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);
            });

            modelBuilder.Entity<cptdx>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CPT).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.DXCode).IsUnicode(false);

                entity.Property(e => e.Description).IsUnicode(false);

                entity.Property(e => e.date1).IsUnicode(false);

                entity.Property(e => e.date2).IsUnicode(false);

                entity.Property(e => e.date3).IsUnicode(false);
            });

            modelBuilder.Entity<custom_profile_list>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Last_Ordered).IsUnicode(false);

                entity.Property(e => e.Panel_Cost).IsUnicode(false);

                entity.Property(e => e.Profile_Code).IsUnicode(false);

                entity.Property(e => e.Profile_Name).IsUnicode(false);

                entity.Property(e => e.Test_Code).IsUnicode(false);

                entity.Property(e => e.Test_Cost).IsUnicode(false);
            });

            modelBuilder.Entity<dim_account>(entity =>
            {
                entity.HasKey(e => e.account_id)
                    .HasName("PK__dim_acco__46A222CDDA915889");

                entity.Property(e => e.account_id).ValueGeneratedNever();

                entity.Property(e => e.account_Owner).IsUnicode(false);

                entity.Property(e => e.account_name).IsUnicode(false);
            });

            modelBuilder.Entity<dim_opportunity>(entity =>
            {
                entity.HasKey(e => e.opportunity_id)
                    .HasName("PK__dim_oppo__B975AC8AE4A6AF21");

                entity.Property(e => e.opportunity_id).ValueGeneratedNever();

                entity.Property(e => e.account_Owner).IsUnicode(false);

                entity.Property(e => e.opportunity_name).IsUnicode(false);
            });

            modelBuilder.Entity<dimaview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("dimaview");

                entity.Property(e => e.Accession).IsUnicode(false);

                entity.Property(e => e.Client_).IsUnicode(false);

                entity.Property(e => e.Client_Name).IsUnicode(false);

                entity.Property(e => e.Fax).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);
            });

            modelBuilder.Entity<employeemonthlypayroll>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Afllac).IsUnicode(false);

                entity.Property(e => e.Bereavement_Hours).IsUnicode(false);

                entity.Property(e => e.Bereavement__).IsUnicode(false);

                entity.Property(e => e.Bonus_Hours).IsUnicode(false);

                entity.Property(e => e.Dental).IsUnicode(false);

                entity.Property(e => e.Direct_Deposit).IsUnicode(false);

                entity.Property(e => e.Expense_1).IsUnicode(false);

                entity.Property(e => e.Expense_2).IsUnicode(false);

                entity.Property(e => e.Federal_Income___Employee_Tax).IsUnicode(false);

                entity.Property(e => e.File_Number).IsUnicode(false);

                entity.Property(e => e.GAP).IsUnicode(false);

                entity.Property(e => e.Garnish).IsUnicode(false);

                entity.Property(e => e.Holiday_Hours).IsUnicode(false);

                entity.Property(e => e.Holiday__).IsUnicode(false);

                entity.Property(e => e.Loan_1).IsUnicode(false);

                entity.Property(e => e.Loan_2___Repay).IsUnicode(false);

                entity.Property(e => e.Local_Tax).IsUnicode(false);

                entity.Property(e => e.Medical).IsUnicode(false);

                entity.Property(e => e.Medicare___Employee_Tax).IsUnicode(false);

                entity.Property(e => e.Net_Pay).IsUnicode(false);

                entity.Property(e => e.Overtime_Earnings_Total).IsUnicode(false);

                entity.Property(e => e.Overtime_Hours_Total).IsUnicode(false);

                entity.Property(e => e.PTO_Hours).IsUnicode(false);

                entity.Property(e => e.PTO__).IsUnicode(false);

                entity.Property(e => e.Pay_Date).IsUnicode(false);

                entity.Property(e => e.Payroll_Company_Code).IsUnicode(false);

                entity.Property(e => e.Payroll_Name).IsUnicode(false);

                entity.Property(e => e.Regular_Hours_Total).IsUnicode(false);

                entity.Property(e => e.Retro_Hours).IsUnicode(false);

                entity.Property(e => e.Retro__).IsUnicode(false);

                entity.Property(e => e.Severance__).IsUnicode(false);

                entity.Property(e => e.Social_Security___Employee_Tax).IsUnicode(false);

                entity.Property(e => e.State_Tax).IsUnicode(false);

                entity.Property(e => e.Sui_EE).IsUnicode(false);

                entity.Property(e => e.Vision).IsUnicode(false);

                entity.Property(e => e.Worked_In_Department).IsUnicode(false);

                entity.Property(e => e.Worked_In_Department_Description).IsUnicode(false);

                entity.Property(e => e._401K).IsUnicode(false);

                entity.Property(e => e._401K_Catch_up).IsUnicode(false);
            });

            modelBuilder.Entity<employeemonthlypayroll_new>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Afllac).IsUnicode(false);

                entity.Property(e => e.Bereavement_Hours).IsUnicode(false);

                entity.Property(e => e.Bereavement__).IsUnicode(false);

                entity.Property(e => e.Bonus_).IsUnicode(false);

                entity.Property(e => e.Bonus_Hours).IsUnicode(false);

                entity.Property(e => e.Dental).IsUnicode(false);

                entity.Property(e => e.Direct_Deposit).IsUnicode(false);

                entity.Property(e => e.Expense_1).IsUnicode(false);

                entity.Property(e => e.Expense_2).IsUnicode(false);

                entity.Property(e => e.Federal_Income___Employee_Tax).IsUnicode(false);

                entity.Property(e => e.File_Number).IsUnicode(false);

                entity.Property(e => e.GAP).IsUnicode(false);

                entity.Property(e => e.Garnish).IsUnicode(false);

                entity.Property(e => e.Holiday_Hours).IsUnicode(false);

                entity.Property(e => e.Holiday__).IsUnicode(false);

                entity.Property(e => e.Loan_1).IsUnicode(false);

                entity.Property(e => e.Loan_2___Repay).IsUnicode(false);

                entity.Property(e => e.Local_Tax).IsUnicode(false);

                entity.Property(e => e.Medical).IsUnicode(false);

                entity.Property(e => e.Medicare___Employee_Tax).IsUnicode(false);

                entity.Property(e => e.Net_Pay).IsUnicode(false);

                entity.Property(e => e.Overtime_Earnings_Total).IsUnicode(false);

                entity.Property(e => e.Overtime_Hours_Total).IsUnicode(false);

                entity.Property(e => e.PTO_Hours).IsUnicode(false);

                entity.Property(e => e.PTO__).IsUnicode(false);

                entity.Property(e => e.Pay_Date).IsUnicode(false);

                entity.Property(e => e.Payroll_Company_Code).IsUnicode(false);

                entity.Property(e => e.Payroll_Name).IsUnicode(false);

                entity.Property(e => e.Regular_Earnings_Total).IsUnicode(false);

                entity.Property(e => e.Regular_Hours_Total).IsUnicode(false);

                entity.Property(e => e.Retro_Hours).IsUnicode(false);

                entity.Property(e => e.Retro__).IsUnicode(false);

                entity.Property(e => e.Severance__).IsUnicode(false);

                entity.Property(e => e.Social_Security___Employee_Tax).IsUnicode(false);

                entity.Property(e => e.State_Tax).IsUnicode(false);

                entity.Property(e => e.Sui_EE).IsUnicode(false);

                entity.Property(e => e.Vision).IsUnicode(false);

                entity.Property(e => e.Worked_In_Department).IsUnicode(false);

                entity.Property(e => e.Worked_In_Department_Description).IsUnicode(false);

                entity.Property(e => e._401K).IsUnicode(false);

                entity.Property(e => e._401K_Catch_up).IsUnicode(false);
            });

            modelBuilder.Entity<facilityExport_Landmark>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<facilityexport>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Adjustments).IsUnicode(false);

                entity.Property(e => e.Balance).IsUnicode(false);

                entity.Property(e => e.BillType).IsUnicode(false);

                entity.Property(e => e.CPT).IsUnicode(false);

                entity.Property(e => e.Charges).IsUnicode(false);

                entity.Property(e => e.ClientName).IsUnicode(false);

                entity.Property(e => e.Client_).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Column_18).IsUnicode(false);

                entity.Property(e => e.Column_19).IsUnicode(false);

                entity.Property(e => e.Column_20).IsUnicode(false);

                entity.Property(e => e.Column_21).IsUnicode(false);

                entity.Property(e => e.Column_22).IsUnicode(false);

                entity.Property(e => e.Column_23).IsUnicode(false);

                entity.Property(e => e.Column_24).IsUnicode(false);

                entity.Property(e => e.Column_5).IsUnicode(false);

                entity.Property(e => e.Inv_).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.Payments).IsUnicode(false);

                entity.Property(e => e.Physician_).IsUnicode(false);

                entity.Property(e => e.SalesGroup1).IsUnicode(false);

                entity.Property(e => e.SrvDate).IsUnicode(false);

                entity.Property(e => e.TestName).IsUnicode(false);

                entity.Property(e => e.TrnDate).IsUnicode(false);

                entity.Property(e => e.Units).IsUnicode(false);
            });

            modelBuilder.Entity<facilityexport1>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.BillType).IsUnicode(false);

                entity.Property(e => e.CPT).IsUnicode(false);

                entity.Property(e => e.ClientName).IsUnicode(false);

                entity.Property(e => e.Client_).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Column_5).IsUnicode(false);

                entity.Property(e => e.Inv_).IsUnicode(false);

                entity.Property(e => e.PatientsName).IsUnicode(false);

                entity.Property(e => e.Physician_).IsUnicode(false);

                entity.Property(e => e.SalesGroup1).IsUnicode(false);

                entity.Property(e => e.SrvDate).IsUnicode(false);

                entity.Property(e => e.TestName).IsUnicode(false);

                entity.Property(e => e.TrnDate).IsUnicode(false);

                entity.Property(e => e.Units).IsUnicode(false);
            });

            modelBuilder.Entity<facilityexport_Aug>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.BillType).IsUnicode(false);

                entity.Property(e => e.CPT).IsUnicode(false);

                entity.Property(e => e.ClientName).IsUnicode(false);

                entity.Property(e => e.Client_).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Column_5).IsUnicode(false);

                entity.Property(e => e.Inv_).IsUnicode(false);

                entity.Property(e => e.PatientsName).IsUnicode(false);

                entity.Property(e => e.Physician_).IsUnicode(false);

                entity.Property(e => e.SalesGroup1).IsUnicode(false);

                entity.Property(e => e.SrvDate).IsUnicode(false);

                entity.Property(e => e.TestName).IsUnicode(false);

                entity.Property(e => e.TrnDate).IsUnicode(false);

                entity.Property(e => e.Units).IsUnicode(false);
            });

            modelBuilder.Entity<injecttest>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.test).IsUnicode(false);
            });

            modelBuilder.Entity<lcd_x_hcpc_code>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.hcpc_code_group).IsUnicode(false);

                entity.Property(e => e.hcpc_code_id).IsUnicode(false);

                entity.Property(e => e.hcpc_code_version).IsUnicode(false);

                entity.Property(e => e.last_updated).IsUnicode(false);

                entity.Property(e => e.lcd_id).IsUnicode(false);

                entity.Property(e => e.lcd_version).IsUnicode(false);

                entity.Property(e => e.long_description).IsUnicode(false);

                entity.Property(e => e.range).IsUnicode(false);

                entity.Property(e => e.short_description).IsUnicode(false);
            });

            modelBuilder.Entity<lcd_x_icd10_support>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.asterisk).IsUnicode(false);

                entity.Property(e => e.description).IsUnicode(false);

                entity.Property(e => e.icd10_code_id).IsUnicode(false);

                entity.Property(e => e.icd10_code_version).IsUnicode(false);

                entity.Property(e => e.icd10_support_group).IsUnicode(false);

                entity.Property(e => e.last_updated).IsUnicode(false);

                entity.Property(e => e.lcd_id).IsUnicode(false);

                entity.Property(e => e.lcd_version).IsUnicode(false);

                entity.Property(e => e.range).IsUnicode(false);

                entity.Property(e => e.sort_order).IsUnicode(false);
            });

            modelBuilder.Entity<logtest>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.Accession)
                    .HasName("ix_logtest_Accession");

                entity.Property(e => e.Accession).IsUnicode(false);

                entity.Property(e => e.Bill_On_Hold).IsUnicode(false);

                entity.Property(e => e.Billtype_Name).IsUnicode(false);

                entity.Property(e => e.Billtype_Phone).IsUnicode(false);

                entity.Property(e => e.Client_Name).IsUnicode(false);

                entity.Property(e => e.Collection_Date).IsUnicode(false);

                entity.Property(e => e.Complete_).IsUnicode(false);

                entity.Property(e => e.Current_Primary_Ins).IsUnicode(false);

                entity.Property(e => e.Current_Secondary_Ins).IsUnicode(false);

                entity.Property(e => e.DOB).IsUnicode(false);

                entity.Property(e => e.Date_Time_Verified).IsUnicode(false);

                entity.Property(e => e.Diag1).IsUnicode(false);

                entity.Property(e => e.Diag2).IsUnicode(false);

                entity.Property(e => e.Diag3).IsUnicode(false);

                entity.Property(e => e.Diag4).IsUnicode(false);

                entity.Property(e => e.Diag5).IsUnicode(false);

                entity.Property(e => e.Diag6).IsUnicode(false);

                entity.Property(e => e.Employer).IsUnicode(false);

                entity.Property(e => e.Entry_Date).IsUnicode(false);

                entity.Property(e => e.Final_Report_Date).IsUnicode(false);

                entity.Property(e => e.Gender).IsUnicode(false);

                entity.Property(e => e.Group).IsUnicode(false);

                entity.Property(e => e.Injury_Date).IsUnicode(false);

                entity.Property(e => e.Ins1_Address).IsUnicode(false);

                entity.Property(e => e.Ins1_City).IsUnicode(false);

                entity.Property(e => e.Ins1_Class).IsUnicode(false);

                entity.Property(e => e.Ins1_Group).IsUnicode(false);

                entity.Property(e => e.Ins1_Name).IsUnicode(false);

                entity.Property(e => e.Ins1_Phone).IsUnicode(false);

                entity.Property(e => e.Ins1_Policy_).IsUnicode(false);

                entity.Property(e => e.Ins1_State).IsUnicode(false);

                entity.Property(e => e.Ins1_Zip).IsUnicode(false);

                entity.Property(e => e.Ins2_Address).IsUnicode(false);

                entity.Property(e => e.Ins2_City).IsUnicode(false);

                entity.Property(e => e.Ins2_Class).IsUnicode(false);

                entity.Property(e => e.Ins2_Group).IsUnicode(false);

                entity.Property(e => e.Ins2_Name).IsUnicode(false);

                entity.Property(e => e.Ins2_Phone).IsUnicode(false);

                entity.Property(e => e.Ins2_Policy_).IsUnicode(false);

                entity.Property(e => e.Ins2_State).IsUnicode(false);

                entity.Property(e => e.Ins2_Zip).IsUnicode(false);

                entity.Property(e => e.Insurance_Covered_).IsUnicode(false);

                entity.Property(e => e.Interpretation).IsUnicode(false);

                entity.Property(e => e.MI).IsUnicode(false);

                entity.Property(e => e.OrderNumber).IsUnicode(false);

                entity.Property(e => e.Order_Billtype).IsUnicode(false);

                entity.Property(e => e.Order_Entered_By__ID_).IsUnicode(false);

                entity.Property(e => e.Patient_Address).IsUnicode(false);

                entity.Property(e => e.Patient_Chart).IsUnicode(false);

                entity.Property(e => e.Patient_City).IsUnicode(false);

                entity.Property(e => e.Patient_First_Name).IsUnicode(false);

                entity.Property(e => e.Patient_ID).IsUnicode(false);

                entity.Property(e => e.Patient_Last_Name).IsUnicode(false);

                entity.Property(e => e.Patient_Phone).IsUnicode(false);

                entity.Property(e => e.Patient_State).IsUnicode(false);

                entity.Property(e => e.Patient_Zip).IsUnicode(false);

                entity.Property(e => e.Phys__ID).IsUnicode(false);

                entity.Property(e => e.Phys__Name).IsUnicode(false);

                entity.Property(e => e.Policy).IsUnicode(false);

                entity.Property(e => e.Prescribed_Medications).IsUnicode(false);

                entity.Property(e => e.Result).IsUnicode(false);

                entity.Property(e => e.SalesGrp1).IsUnicode(false);

                entity.Property(e => e.SalesGrp1_Name).IsUnicode(false);

                entity.Property(e => e.SalesGrp2).IsUnicode(false);

                entity.Property(e => e.SalesGrp2_Name).IsUnicode(false);

                entity.Property(e => e.SalesGrp3).IsUnicode(false);

                entity.Property(e => e.SalesGrp3_Name).IsUnicode(false);

                entity.Property(e => e.SalesGrp4).IsUnicode(false);

                entity.Property(e => e.SalesGrp4_Name).IsUnicode(false);

                entity.Property(e => e.Social_Security__).IsUnicode(false);

                entity.Property(e => e.Spec__Source).IsUnicode(false);

                entity.Property(e => e.Subsc__Address).IsUnicode(false);

                entity.Property(e => e.Subsc__City).IsUnicode(false);

                entity.Property(e => e.Subsc__DOB).IsUnicode(false);

                entity.Property(e => e.Subsc__First_Name).IsUnicode(false);

                entity.Property(e => e.Subsc__Phone).IsUnicode(false);

                entity.Property(e => e.Subsc__Relation).IsUnicode(false);

                entity.Property(e => e.Subsc__Sex).IsUnicode(false);

                entity.Property(e => e.Subsc__State).IsUnicode(false);

                entity.Property(e => e.Subsc__Zip).IsUnicode(false);

                entity.Property(e => e.Subscriber_Last_Name).IsUnicode(false);

                entity.Property(e => e.Test_Code).IsUnicode(false);

                entity.Property(e => e.Test_Name).IsUnicode(false);

                entity.Property(e => e.Text).IsUnicode(false);
            });

            modelBuilder.Entity<logtest_history>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => e.Accession)
                    .HasName("ix_logtest_history_Accession");

                entity.Property(e => e.Accession).IsUnicode(false);

                entity.Property(e => e.Bill_On_Hold).IsUnicode(false);

                entity.Property(e => e.Billtype_Name).IsUnicode(false);

                entity.Property(e => e.Billtype_Phone).IsUnicode(false);

                entity.Property(e => e.Client_Name).IsUnicode(false);

                entity.Property(e => e.Collection_Date).IsUnicode(false);

                entity.Property(e => e.Complete_).IsUnicode(false);

                entity.Property(e => e.Current_Primary_Ins).IsUnicode(false);

                entity.Property(e => e.Current_Secondary_Ins).IsUnicode(false);

                entity.Property(e => e.DOB).IsUnicode(false);

                entity.Property(e => e.Date_Time_Verified).IsUnicode(false);

                entity.Property(e => e.Diag1).IsUnicode(false);

                entity.Property(e => e.Diag2).IsUnicode(false);

                entity.Property(e => e.Diag3).IsUnicode(false);

                entity.Property(e => e.Diag4).IsUnicode(false);

                entity.Property(e => e.Diag5).IsUnicode(false);

                entity.Property(e => e.Diag6).IsUnicode(false);

                entity.Property(e => e.Employer).IsUnicode(false);

                entity.Property(e => e.Entry_Date).IsUnicode(false);

                entity.Property(e => e.Final_Report_Date).IsUnicode(false);

                entity.Property(e => e.Gender).IsUnicode(false);

                entity.Property(e => e.Group).IsUnicode(false);

                entity.Property(e => e.Injury_Date).IsUnicode(false);

                entity.Property(e => e.Ins1_Address).IsUnicode(false);

                entity.Property(e => e.Ins1_City).IsUnicode(false);

                entity.Property(e => e.Ins1_Class).IsUnicode(false);

                entity.Property(e => e.Ins1_Group).IsUnicode(false);

                entity.Property(e => e.Ins1_Name).IsUnicode(false);

                entity.Property(e => e.Ins1_Phone).IsUnicode(false);

                entity.Property(e => e.Ins1_Policy_).IsUnicode(false);

                entity.Property(e => e.Ins1_State).IsUnicode(false);

                entity.Property(e => e.Ins1_Zip).IsUnicode(false);

                entity.Property(e => e.Ins2_Address).IsUnicode(false);

                entity.Property(e => e.Ins2_City).IsUnicode(false);

                entity.Property(e => e.Ins2_Class).IsUnicode(false);

                entity.Property(e => e.Ins2_Group).IsUnicode(false);

                entity.Property(e => e.Ins2_Name).IsUnicode(false);

                entity.Property(e => e.Ins2_Phone).IsUnicode(false);

                entity.Property(e => e.Ins2_Policy_).IsUnicode(false);

                entity.Property(e => e.Ins2_State).IsUnicode(false);

                entity.Property(e => e.Ins2_Zip).IsUnicode(false);

                entity.Property(e => e.Insurance_Covered_).IsUnicode(false);

                entity.Property(e => e.Interpretation).IsUnicode(false);

                entity.Property(e => e.MI).IsUnicode(false);

                entity.Property(e => e.OrderNumber).IsUnicode(false);

                entity.Property(e => e.Order_Billtype).IsUnicode(false);

                entity.Property(e => e.Order_Entered_By__ID_).IsUnicode(false);

                entity.Property(e => e.Patient_Address).IsUnicode(false);

                entity.Property(e => e.Patient_Chart).IsUnicode(false);

                entity.Property(e => e.Patient_City).IsUnicode(false);

                entity.Property(e => e.Patient_First_Name).IsUnicode(false);

                entity.Property(e => e.Patient_ID).IsUnicode(false);

                entity.Property(e => e.Patient_Last_Name).IsUnicode(false);

                entity.Property(e => e.Patient_Phone).IsUnicode(false);

                entity.Property(e => e.Patient_State).IsUnicode(false);

                entity.Property(e => e.Patient_Zip).IsUnicode(false);

                entity.Property(e => e.Phys__ID).IsUnicode(false);

                entity.Property(e => e.Phys__Name).IsUnicode(false);

                entity.Property(e => e.Policy).IsUnicode(false);

                entity.Property(e => e.Prescribed_Medications).IsUnicode(false);

                entity.Property(e => e.Result).IsUnicode(false);

                entity.Property(e => e.SalesGrp1).IsUnicode(false);

                entity.Property(e => e.SalesGrp1_Name).IsUnicode(false);

                entity.Property(e => e.SalesGrp2).IsUnicode(false);

                entity.Property(e => e.SalesGrp2_Name).IsUnicode(false);

                entity.Property(e => e.SalesGrp3).IsUnicode(false);

                entity.Property(e => e.SalesGrp3_Name).IsUnicode(false);

                entity.Property(e => e.SalesGrp4).IsUnicode(false);

                entity.Property(e => e.SalesGrp4_Name).IsUnicode(false);

                entity.Property(e => e.Social_Security__).IsUnicode(false);

                entity.Property(e => e.Spec__Source).IsUnicode(false);

                entity.Property(e => e.Subsc__Address).IsUnicode(false);

                entity.Property(e => e.Subsc__City).IsUnicode(false);

                entity.Property(e => e.Subsc__DOB).IsUnicode(false);

                entity.Property(e => e.Subsc__First_Name).IsUnicode(false);

                entity.Property(e => e.Subsc__Phone).IsUnicode(false);

                entity.Property(e => e.Subsc__Relation).IsUnicode(false);

                entity.Property(e => e.Subsc__Sex).IsUnicode(false);

                entity.Property(e => e.Subsc__State).IsUnicode(false);

                entity.Property(e => e.Subsc__Zip).IsUnicode(false);

                entity.Property(e => e.Subscriber_Last_Name).IsUnicode(false);

                entity.Property(e => e.Test_Code).IsUnicode(false);

                entity.Property(e => e.Test_Name).IsUnicode(false);

                entity.Property(e => e.Text).IsUnicode(false);
            });

            modelBuilder.Entity<loin>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Loin1).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.Test).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);
            });

            modelBuilder.Entity<paymentsview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("paymentsview");

                entity.Property(e => e.Accession_).IsUnicode(false);

                entity.Property(e => e.Agent).IsUnicode(false);

                entity.Property(e => e.Bill_type_Insurance_).IsUnicode(false);

                entity.Property(e => e.Chart_____).IsUnicode(false);

                entity.Property(e => e.Check__).IsUnicode(false);

                entity.Property(e => e.Class_).IsUnicode(false);

                entity.Property(e => e.Client_Name).IsUnicode(false);

                entity.Property(e => e.Client_Name_____).IsUnicode(false);

                entity.Property(e => e.Collect_Date__).IsUnicode(false);

                entity.Property(e => e.Ins1_Name_).IsUnicode(false);

                entity.Property(e => e.Ins2_Name_).IsUnicode(false);

                entity.Property(e => e.Insurance_1_).IsUnicode(false);

                entity.Property(e => e.Insurance_2_).IsUnicode(false);

                entity.Property(e => e.Name_________________).IsUnicode(false);

                entity.Property(e => e.Notes).IsUnicode(false);

                entity.Property(e => e.Physician__).IsUnicode(false);

                entity.Property(e => e.Sales_Group1).IsUnicode(false);

                entity.Property(e => e.Srv_date__).IsUnicode(false);

                entity.Property(e => e.Trn_date__).IsUnicode(false);

                entity.Property(e => e._____Ins_Name____________).IsUnicode(false);

                entity.Property(e => e.type____).IsUnicode(false);
            });

            modelBuilder.Entity<pl_utilities_maps>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Account).IsUnicode(false);

                entity.Property(e => e.Company).IsUnicode(false);

                entity.Property(e => e.Memo).IsUnicode(false);
            });

            modelBuilder.Entity<priceimport>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);
            });

            modelBuilder.Entity<rigita>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<t_1435>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Chart_).IsUnicode(false);

                entity.Property(e => e.ClientName).IsUnicode(false);

                entity.Property(e => e.Doctor).IsUnicode(false);

                entity.Property(e => e.Insurance).IsUnicode(false);

                entity.Property(e => e.Inv_).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.type).IsUnicode(false);
            });

            modelBuilder.Entity<t_17922_SpecialPrices>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.TestName).IsUnicode(false);
            });

            modelBuilder.Entity<t_AccountDeactivations>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.EMR).IsUnicode(false);

                entity.Property(e => e.Practice_Name).IsUnicode(false);
            });

            modelBuilder.Entity<t_AccountDeactivations_Failure>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.EMR).IsUnicode(false);

                entity.Property(e => e.Practice_Name).IsUnicode(false);

                entity.Property(e => e.Reason).IsUnicode(false);
            });

            modelBuilder.Entity<t_Biweekly_CourierCost_Staging_FL>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Comments).IsUnicode(false);
            });

            modelBuilder.Entity<t_BonusRates>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.SalesRep).IsUnicode(false);
            });

            modelBuilder.Entity<t_Cytology_CaseNo_Diag>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<t_DriverHoursFile>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.EMP__).IsUnicode(false);

                entity.Property(e => e.IN).IsUnicode(false);

                entity.Property(e => e.OUT).IsUnicode(false);
            });

            modelBuilder.Entity<t_Employee_Pay>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.EmployeeID).IsUnicode(false);

                entity.Property(e => e.Notes).IsUnicode(false);

                entity.Property(e => e.PayrollName).IsUnicode(false);

                entity.Property(e => e.Role).IsUnicode(false);
            });

            modelBuilder.Entity<t_FL_Accounts_CourierCosts_Split>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<t_Overhead_24547_Expenses>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Account_Name).IsUnicode(false);

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Group_Manager).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.SubCategory).IsUnicode(false);

                entity.Property(e => e.Transaction).IsUnicode(false);

                entity.Property(e => e.data_id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<t_Overhead_34821_Expenses>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Account_Name).IsUnicode(false);

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Group_Manager).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.SubCategory).IsUnicode(false);

                entity.Property(e => e.Transaction).IsUnicode(false);

                entity.Property(e => e.data_id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<t_Overhead_Expenses_0_000>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Account_Name).IsUnicode(false);

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Group_Manager).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.SubCategory).IsUnicode(false);

                entity.Property(e => e.Transaction).IsUnicode(false);

                entity.Property(e => e.data_id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<t_Overhead_Expenses_0_001>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Account_Name).IsUnicode(false);

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Group_Manager).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.SubCategory).IsUnicode(false);

                entity.Property(e => e.Transaction).IsUnicode(false);

                entity.Property(e => e.data_id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<t_Overhead_Expenses_7_001>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Account_Name).IsUnicode(false);

                entity.Property(e => e.Category).IsUnicode(false);

                entity.Property(e => e.Group_Manager).IsUnicode(false);

                entity.Property(e => e.Sales_Rep).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.SubCategory).IsUnicode(false);

                entity.Property(e => e.Transaction).IsUnicode(false);

                entity.Property(e => e.data_id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<t_Overhead_Extras>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Notes).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);
            });

            modelBuilder.Entity<t_PatrolFile>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<t_PunchReportJan>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.DEPT_CODE).IsUnicode(false);

                entity.Property(e => e.EMP_F_NAME).IsUnicode(false);

                entity.Property(e => e.EMP_L_NAME).IsUnicode(false);

                entity.Property(e => e.EMP__).IsUnicode(false);

                entity.Property(e => e.IN).IsUnicode(false);

                entity.Property(e => e.IN_LOCATION).IsUnicode(false);

                entity.Property(e => e.IN_PUNCH_METHOD).IsUnicode(false);

                entity.Property(e => e.OUT).IsUnicode(false);

                entity.Property(e => e.OUT_LOCATION).IsUnicode(false);

                entity.Property(e => e.OUT_PUNCH_METHOD).IsUnicode(false);
            });

            modelBuilder.Entity<t_RecentVisitsJan>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<t_Reps_Together_For_Bonus_Calculation>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.NameTogether).IsUnicode(false);

                entity.Property(e => e.SalesRep).IsUnicode(false);
            });

            modelBuilder.Entity<t_allexpensesfromquickbooks>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Balance).IsUnicode(false);

                entity.Property(e => e.Class).IsUnicode(false);

                entity.Property(e => e.Clr).IsUnicode(false);

                entity.Property(e => e.Credit).IsUnicode(false);

                entity.Property(e => e.Debit).IsUnicode(false);

                entity.Property(e => e.ExpenseType).IsUnicode(false);

                entity.Property(e => e.Grp).IsUnicode(false);

                entity.Property(e => e.Memo).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.Name_Account__).IsUnicode(false);

                entity.Property(e => e.Name_Address).IsUnicode(false);

                entity.Property(e => e.Num).IsUnicode(false);

                entity.Property(e => e.Split).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);
            });

            modelBuilder.Entity<t_bonusCalculation>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Sales_Rep).IsUnicode(false);
            });

            modelBuilder.Entity<t_bonusCalculationStaging>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Sales_Rep).IsUnicode(false);
            });

            modelBuilder.Entity<t_bonusCalculation_bkup02July2020>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Sales_Rep).IsUnicode(false);
            });

            modelBuilder.Entity<t_bonusParams>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.SalesRep).IsUnicode(false);
            });

            modelBuilder.Entity<t_bonusParamsStaging>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.SalesRep).IsUnicode(false);
            });

            modelBuilder.Entity<t_bonusParams_bkup02July2020>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.SalesRep).IsUnicode(false);
            });

            modelBuilder.Entity<t_bonusType_SalesRep>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Commission30).IsFixedLength();

                entity.Property(e => e.Commission35).IsFixedLength();

                entity.Property(e => e.Old).IsFixedLength();
            });

            modelBuilder.Entity<t_bonus_Month>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<t_employeepunchesfile>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e._in).IsUnicode(false);

                entity.Property(e => e._out).IsUnicode(false);

                entity.Property(e => e.dept).IsUnicode(false);

                entity.Property(e => e.empid).IsUnicode(false);

                entity.Property(e => e.fname).IsUnicode(false);

                entity.Property(e => e.lname).IsUnicode(false);

                entity.Property(e => e.loc).IsUnicode(false);

                entity.Property(e => e.method).IsUnicode(false);

                entity.Property(e => e.outloc).IsUnicode(false);

                entity.Property(e => e.outmethod).IsUnicode(false);
            });

            modelBuilder.Entity<t_expenses_utilities>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Balance).IsUnicode(false);

                entity.Property(e => e.Class).IsUnicode(false);

                entity.Property(e => e.Clr).IsUnicode(false);

                entity.Property(e => e.Credit).IsUnicode(false);

                entity.Property(e => e.ExpenseType).IsUnicode(false);

                entity.Property(e => e.Grp).IsUnicode(false);

                entity.Property(e => e.Memo).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.Name_Account__).IsUnicode(false);

                entity.Property(e => e.Name_Address).IsUnicode(false);

                entity.Property(e => e.Notes).IsUnicode(false);

                entity.Property(e => e.Num).IsUnicode(false);

                entity.Property(e => e.Split).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);
            });

            modelBuilder.Entity<t_rep_payroll_map>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Rep_payrollfile).IsUnicode(false);

                entity.Property(e => e.Rep_pldata).IsUnicode(false);
            });

            modelBuilder.Entity<t_reps_file>(entity =>
            {
                entity.HasNoKey();

                entity.HasIndex(e => new { e.Type, e.Fired });

                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.EmployeeID).IsUnicode(false);

                entity.Property(e => e.FName).IsUnicode(false);

                entity.Property(e => e.HomePhone).IsUnicode(false);

                entity.Property(e => e.LName).IsUnicode(false);

                entity.Property(e => e.PersonalMobile).IsUnicode(false);

                entity.Property(e => e.SSN).IsUnicode(false);

                entity.Property(e => e.Type).IsUnicode(false);

                entity.Property(e => e.WorkEmail).IsUnicode(false);

                entity.Property(e => e.WorkMobile).IsUnicode(false);

                entity.Property(e => e.WorkPhone).IsUnicode(false);
            });

            modelBuilder.Entity<t_utilities_maps>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<t_utilities_staging>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Account).IsUnicode(false);

                entity.Property(e => e.Company).IsUnicode(false);

                entity.Property(e => e.Memo).IsUnicode(false);

                entity.Property(e => e.Pass3).IsUnicode(false);

                entity.Property(e => e.Row).IsUnicode(false);

                entity.Property(e => e.pass1).IsUnicode(false);

                entity.Property(e => e.pass10).IsUnicode(false);

                entity.Property(e => e.pass11).IsUnicode(false);

                entity.Property(e => e.pass2).IsUnicode(false);

                entity.Property(e => e.pass4).IsUnicode(false);

                entity.Property(e => e.pass5).IsUnicode(false);

                entity.Property(e => e.pass6).IsUnicode(false);

                entity.Property(e => e.pass7).IsUnicode(false);

                entity.Property(e => e.pass8).IsUnicode(false);

                entity.Property(e => e.pass9).IsUnicode(false);
            });

            modelBuilder.Entity<tbl_Landmark_Apr20>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.BillType).IsUnicode(false);

                entity.Property(e => e.CPT).IsUnicode(false);

                entity.Property(e => e.ClientName).IsUnicode(false);

                entity.Property(e => e.Client_).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Column_5).IsUnicode(false);

                entity.Property(e => e.Inv_).IsUnicode(false);

                entity.Property(e => e.PatientsName).IsUnicode(false);

                entity.Property(e => e.Physician_).IsUnicode(false);

                entity.Property(e => e.SalesGroup1).IsUnicode(false);

                entity.Property(e => e.SrvDate).IsUnicode(false);

                entity.Property(e => e.TestName).IsUnicode(false);

                entity.Property(e => e.TrnDate).IsUnicode(false);

                entity.Property(e => e.Units).IsUnicode(false);
            });

            modelBuilder.Entity<tbl_Landmark_Aug20>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.BillType).IsUnicode(false);

                entity.Property(e => e.CPT).IsUnicode(false);

                entity.Property(e => e.ClientName).IsUnicode(false);

                entity.Property(e => e.Client_).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Column_5).IsUnicode(false);

                entity.Property(e => e.Inv_).IsUnicode(false);

                entity.Property(e => e.PatientsName).IsUnicode(false);

                entity.Property(e => e.Physician_).IsUnicode(false);

                entity.Property(e => e.SalesGroup1).IsUnicode(false);

                entity.Property(e => e.SrvDate).IsUnicode(false);

                entity.Property(e => e.TestName).IsUnicode(false);

                entity.Property(e => e.TrnDate).IsUnicode(false);

                entity.Property(e => e.Units).IsUnicode(false);
            });

            modelBuilder.Entity<tbl_Landmark_Dec>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.BillType).IsUnicode(false);

                entity.Property(e => e.CPT).IsUnicode(false);

                entity.Property(e => e.ClientName).IsUnicode(false);

                entity.Property(e => e.Client_).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Column_5).IsUnicode(false);

                entity.Property(e => e.Inv_).IsUnicode(false);

                entity.Property(e => e.PatientsName).IsUnicode(false);

                entity.Property(e => e.Physician_).IsUnicode(false);

                entity.Property(e => e.SalesGroup1).IsUnicode(false);

                entity.Property(e => e.SrvDate).IsUnicode(false);

                entity.Property(e => e.TestName).IsUnicode(false);

                entity.Property(e => e.TrnDate).IsUnicode(false);

                entity.Property(e => e.Units).IsUnicode(false);
            });

            modelBuilder.Entity<tbl_Landmark_Feb20>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.BillType).IsUnicode(false);

                entity.Property(e => e.CPT).IsUnicode(false);

                entity.Property(e => e.ClientName).IsUnicode(false);

                entity.Property(e => e.Client_).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Column_5).IsUnicode(false);

                entity.Property(e => e.Inv_).IsUnicode(false);

                entity.Property(e => e.PatientsName).IsUnicode(false);

                entity.Property(e => e.Physician_).IsUnicode(false);

                entity.Property(e => e.SalesGroup1).IsUnicode(false);

                entity.Property(e => e.SrvDate).IsUnicode(false);

                entity.Property(e => e.TestName).IsUnicode(false);

                entity.Property(e => e.TrnDate).IsUnicode(false);

                entity.Property(e => e.Units).IsUnicode(false);
            });

            modelBuilder.Entity<tbl_Landmark_Jan20>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.BillType).IsUnicode(false);

                entity.Property(e => e.CPT).IsUnicode(false);

                entity.Property(e => e.ClientName).IsUnicode(false);

                entity.Property(e => e.Client_).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Column_5).IsUnicode(false);

                entity.Property(e => e.Inv_).IsUnicode(false);

                entity.Property(e => e.PatientsName).IsUnicode(false);

                entity.Property(e => e.Physician_).IsUnicode(false);

                entity.Property(e => e.SalesGroup1).IsUnicode(false);

                entity.Property(e => e.SrvDate).IsUnicode(false);

                entity.Property(e => e.TestName).IsUnicode(false);

                entity.Property(e => e.TrnDate).IsUnicode(false);

                entity.Property(e => e.Units).IsUnicode(false);
            });

            modelBuilder.Entity<tbl_Landmark_Jul20>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.BillType).IsUnicode(false);

                entity.Property(e => e.CPT).IsUnicode(false);

                entity.Property(e => e.ClientName).IsUnicode(false);

                entity.Property(e => e.Client_).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Column_5).IsUnicode(false);

                entity.Property(e => e.Inv_).IsUnicode(false);

                entity.Property(e => e.PatientsName).IsUnicode(false);

                entity.Property(e => e.Physician_).IsUnicode(false);

                entity.Property(e => e.SalesGroup1).IsUnicode(false);

                entity.Property(e => e.SrvDate).IsUnicode(false);

                entity.Property(e => e.TestName).IsUnicode(false);

                entity.Property(e => e.TrnDate).IsUnicode(false);

                entity.Property(e => e.Units).IsUnicode(false);
            });

            modelBuilder.Entity<tbl_Landmark_Jun20>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.BillType).IsUnicode(false);

                entity.Property(e => e.CPT).IsUnicode(false);

                entity.Property(e => e.ClientName).IsUnicode(false);

                entity.Property(e => e.Client_).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Column_5).IsUnicode(false);

                entity.Property(e => e.Inv_).IsUnicode(false);

                entity.Property(e => e.PatientsName).IsUnicode(false);

                entity.Property(e => e.Physician_).IsUnicode(false);

                entity.Property(e => e.SalesGroup1).IsUnicode(false);

                entity.Property(e => e.SrvDate).IsUnicode(false);

                entity.Property(e => e.TestName).IsUnicode(false);

                entity.Property(e => e.TrnDate).IsUnicode(false);

                entity.Property(e => e.Units).IsUnicode(false);
            });

            modelBuilder.Entity<tbl_Landmark_Mar20>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.BillType).IsUnicode(false);

                entity.Property(e => e.CPT).IsUnicode(false);

                entity.Property(e => e.ClientName).IsUnicode(false);

                entity.Property(e => e.Client_).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Column_5).IsUnicode(false);

                entity.Property(e => e.Inv_).IsUnicode(false);

                entity.Property(e => e.PatientsName).IsUnicode(false);

                entity.Property(e => e.Physician_).IsUnicode(false);

                entity.Property(e => e.SalesGroup1).IsUnicode(false);

                entity.Property(e => e.SrvDate).IsUnicode(false);

                entity.Property(e => e.TestName).IsUnicode(false);

                entity.Property(e => e.TrnDate).IsUnicode(false);

                entity.Property(e => e.Units).IsUnicode(false);
            });

            modelBuilder.Entity<tbl_Landmark_May20>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.BillType).IsUnicode(false);

                entity.Property(e => e.CPT).IsUnicode(false);

                entity.Property(e => e.ClientName).IsUnicode(false);

                entity.Property(e => e.Client_).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Column_5).IsUnicode(false);

                entity.Property(e => e.Inv_).IsUnicode(false);

                entity.Property(e => e.PatientsName).IsUnicode(false);

                entity.Property(e => e.Physician_).IsUnicode(false);

                entity.Property(e => e.SalesGroup1).IsUnicode(false);

                entity.Property(e => e.SrvDate).IsUnicode(false);

                entity.Property(e => e.TestName).IsUnicode(false);

                entity.Property(e => e.TrnDate).IsUnicode(false);

                entity.Property(e => e.Units).IsUnicode(false);
            });

            modelBuilder.Entity<tbl_Landmark_Nov>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.BillType).IsUnicode(false);

                entity.Property(e => e.CPT).IsUnicode(false);

                entity.Property(e => e.ClientName).IsUnicode(false);

                entity.Property(e => e.Client_).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Column_5).IsUnicode(false);

                entity.Property(e => e.Inv_).IsUnicode(false);

                entity.Property(e => e.PatientsName).IsUnicode(false);

                entity.Property(e => e.Physician_).IsUnicode(false);

                entity.Property(e => e.SalesGroup1).IsUnicode(false);

                entity.Property(e => e.SrvDate).IsUnicode(false);

                entity.Property(e => e.TestName).IsUnicode(false);

                entity.Property(e => e.TrnDate).IsUnicode(false);

                entity.Property(e => e.Units).IsUnicode(false);
            });

            modelBuilder.Entity<tbl_Landmark_Oct>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.BillType).IsUnicode(false);

                entity.Property(e => e.CPT).IsUnicode(false);

                entity.Property(e => e.ClientName).IsUnicode(false);

                entity.Property(e => e.Client_).IsUnicode(false);

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.Column_5).IsUnicode(false);

                entity.Property(e => e.Inv_).IsUnicode(false);

                entity.Property(e => e.PatientsName).IsUnicode(false);

                entity.Property(e => e.Physician_).IsUnicode(false);

                entity.Property(e => e.SalesGroup1).IsUnicode(false);

                entity.Property(e => e.SrvDate).IsUnicode(false);

                entity.Property(e => e.TestName).IsUnicode(false);

                entity.Property(e => e.TrnDate).IsUnicode(false);

                entity.Property(e => e.Units).IsUnicode(false);
            });

            modelBuilder.Entity<tbl_testsSeanAndMaxList>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Code).IsUnicode(false);
            });

            modelBuilder.Entity<tbl_testsSunitsList>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Code).IsUnicode(false);
            });

            modelBuilder.Entity<tbl_ups_freight>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Track_Num).IsUnicode(false);
            });

            modelBuilder.Entity<tempPayments>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Accession_).IsUnicode(false);

                entity.Property(e => e.Bill_type_Insurance_).IsUnicode(false);

                entity.Property(e => e.Chart_____).IsUnicode(false);

                entity.Property(e => e.Check__).IsUnicode(false);

                entity.Property(e => e.Class_).IsUnicode(false);

                entity.Property(e => e.Client_Name).IsUnicode(false);

                entity.Property(e => e.Client_Name_____).IsUnicode(false);

                entity.Property(e => e.Collect_Date__).IsUnicode(false);

                entity.Property(e => e.Ins1_Name_).IsUnicode(false);

                entity.Property(e => e.Ins2_Name_).IsUnicode(false);

                entity.Property(e => e.Insurance_1_).IsUnicode(false);

                entity.Property(e => e.Insurance_2_).IsUnicode(false);

                entity.Property(e => e.Name_________________).IsUnicode(false);

                entity.Property(e => e.Physician__).IsUnicode(false);

                entity.Property(e => e.Sales_Group1).IsUnicode(false);

                entity.Property(e => e.Srv_date__).IsUnicode(false);

                entity.Property(e => e.Trn_date__).IsUnicode(false);

                entity.Property(e => e.type____).IsUnicode(false);
            });

            modelBuilder.Entity<temp_AndysRequest>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Accession).IsUnicode(false);

                entity.Property(e => e.Bill_On_Hold).IsUnicode(false);

                entity.Property(e => e.Billtype_Name).IsUnicode(false);

                entity.Property(e => e.Billtype_Phone).IsUnicode(false);

                entity.Property(e => e.Client_ID).IsUnicode(false);

                entity.Property(e => e.Client_Name).IsUnicode(false);

                entity.Property(e => e.Collection_Date).IsUnicode(false);

                entity.Property(e => e.Complete_).IsUnicode(false);

                entity.Property(e => e.Current_Primary_Ins).IsUnicode(false);

                entity.Property(e => e.Current_Secondary_Ins).IsUnicode(false);

                entity.Property(e => e.DOB).IsUnicode(false);

                entity.Property(e => e.Date_Time_Verified).IsUnicode(false);

                entity.Property(e => e.Depts_for_Order).IsUnicode(false);

                entity.Property(e => e.Diag1).IsUnicode(false);

                entity.Property(e => e.Diag2).IsUnicode(false);

                entity.Property(e => e.Diag3).IsUnicode(false);

                entity.Property(e => e.Diag4).IsUnicode(false);

                entity.Property(e => e.Diag5).IsUnicode(false);

                entity.Property(e => e.Diag6).IsUnicode(false);

                entity.Property(e => e.Employer).IsUnicode(false);

                entity.Property(e => e.Entry_Date).IsUnicode(false);

                entity.Property(e => e.Final_Report_Date).IsUnicode(false);

                entity.Property(e => e.Gender).IsUnicode(false);

                entity.Property(e => e.Group).IsUnicode(false);

                entity.Property(e => e.Group_2).IsUnicode(false);

                entity.Property(e => e.Group_3).IsUnicode(false);

                entity.Property(e => e.Injury_Date).IsUnicode(false);

                entity.Property(e => e.Ins_Address).IsUnicode(false);

                entity.Property(e => e.Ins_Address_2).IsUnicode(false);

                entity.Property(e => e.Ins_City).IsUnicode(false);

                entity.Property(e => e.Ins_City_2).IsUnicode(false);

                entity.Property(e => e.Ins_Class).IsUnicode(false);

                entity.Property(e => e.Ins_Class_2).IsUnicode(false);

                entity.Property(e => e.Ins_Name).IsUnicode(false);

                entity.Property(e => e.Ins_Name_2).IsUnicode(false);

                entity.Property(e => e.Ins_Phone).IsUnicode(false);

                entity.Property(e => e.Ins_Phone_2).IsUnicode(false);

                entity.Property(e => e.Ins_State).IsUnicode(false);

                entity.Property(e => e.Ins_State_2).IsUnicode(false);

                entity.Property(e => e.Ins_Zip).IsUnicode(false);

                entity.Property(e => e.Ins_Zip_2).IsUnicode(false);

                entity.Property(e => e.Insurance_Covered_).IsUnicode(false);

                entity.Property(e => e.MI).IsUnicode(false);

                entity.Property(e => e.Order_Billtype).IsUnicode(false);

                entity.Property(e => e.Order_Entered_By__ID_).IsUnicode(false);

                entity.Property(e => e.Order__).IsUnicode(false);

                entity.Property(e => e.Patient_Address).IsUnicode(false);

                entity.Property(e => e.Patient_Chart).IsUnicode(false);

                entity.Property(e => e.Patient_City).IsUnicode(false);

                entity.Property(e => e.Patient_First_Name).IsUnicode(false);

                entity.Property(e => e.Patient_ID).IsUnicode(false);

                entity.Property(e => e.Patient_Last_Name).IsUnicode(false);

                entity.Property(e => e.Patient_Phone).IsUnicode(false);

                entity.Property(e => e.Patient_State).IsUnicode(false);

                entity.Property(e => e.Patient_Zip).IsUnicode(false);

                entity.Property(e => e.Phys__ID).IsUnicode(false);

                entity.Property(e => e.Phys__Name).IsUnicode(false);

                entity.Property(e => e.Policy).IsUnicode(false);

                entity.Property(e => e.Policy_).IsUnicode(false);

                entity.Property(e => e.Policy__2).IsUnicode(false);

                entity.Property(e => e.Prescribed_Medications).IsUnicode(false);

                entity.Property(e => e.SalesGrp1).IsUnicode(false);

                entity.Property(e => e.SalesGrp1_Name).IsUnicode(false);

                entity.Property(e => e.SalesGrp2).IsUnicode(false);

                entity.Property(e => e.SalesGrp2_Name).IsUnicode(false);

                entity.Property(e => e.SalesGrp3).IsUnicode(false);

                entity.Property(e => e.SalesGrp3_Name).IsUnicode(false);

                entity.Property(e => e.SalesGrp4).IsUnicode(false);

                entity.Property(e => e.SalesGrp4_Name).IsUnicode(false);

                entity.Property(e => e.Sendout_Labs_for_Order).IsUnicode(false);

                entity.Property(e => e.Social_Security__).IsUnicode(false);

                entity.Property(e => e.Spec__Source).IsUnicode(false);

                entity.Property(e => e.Subsc__Address).IsUnicode(false);

                entity.Property(e => e.Subsc__City).IsUnicode(false);

                entity.Property(e => e.Subsc__DOB).IsUnicode(false);

                entity.Property(e => e.Subsc__First_Name).IsUnicode(false);

                entity.Property(e => e.Subsc__Phone).IsUnicode(false);

                entity.Property(e => e.Subsc__Relation).IsUnicode(false);

                entity.Property(e => e.Subsc__Sex).IsUnicode(false);

                entity.Property(e => e.Subsc__State).IsUnicode(false);

                entity.Property(e => e.Subsc__Zip).IsUnicode(false);

                entity.Property(e => e.Subscriber_Last_Name).IsUnicode(false);

                entity.Property(e => e.Test_Code).IsUnicode(false);

                entity.Property(e => e.Test_Name).IsUnicode(false);

                entity.Property(e => e.Test_Type).IsUnicode(false);
            });

            modelBuilder.Entity<temp_Dec_LM>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CPT).IsUnicode(false);

                entity.Property(e => e.Classes).IsUnicode(false);

                entity.Property(e => e.First_Name).IsUnicode(false);

                entity.Property(e => e.Last_Name).IsUnicode(false);

                entity.Property(e => e.Provider).IsUnicode(false);
            });

            modelBuilder.Entity<temp_Nov>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.CPT).IsUnicode(false);

                entity.Property(e => e.Classes).IsUnicode(false);

                entity.Property(e => e.First_Name).IsUnicode(false);

                entity.Property(e => e.Last_Name).IsUnicode(false);

                entity.Property(e => e.Provider).IsUnicode(false);
            });

            modelBuilder.Entity<temp_Patient_Physician>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Inv).IsUnicode(false);
            });

            modelBuilder.Entity<temp_PhlebAssign>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<temp_SpecialPrice>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.SpPrice).IsUnicode(false);

                entity.Property(e => e.TestName).IsUnicode(false);
            });

            modelBuilder.Entity<tests>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Code).IsUnicode(false);

                entity.Property(e => e.name).IsUnicode(false);
            });

            modelBuilder.Entity<tmp_addAccessionNumber>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<tmp_addAccessionNumber_New>(entity =>
            {
                entity.HasNoKey();
            });

            modelBuilder.Entity<total_by_month>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Month).IsUnicode(false);
            });

            modelBuilder.Entity<umethod>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Accession_).IsUnicode(false);
            });

            modelBuilder.Entity<yearend>(entity =>
            {
                entity.HasNoKey();

                entity.Property(e => e.Bill_type_Insurance_).IsUnicode(false);

                entity.Property(e => e.Chart_____).IsUnicode(false);

                entity.Property(e => e.Class_).IsUnicode(false);

                entity.Property(e => e.Client_Name_____).IsUnicode(false);

                entity.Property(e => e.Client____).IsUnicode(false);

                entity.Property(e => e.Collect_Date__).IsUnicode(false);

                entity.Property(e => e.Doctor_____).IsUnicode(false);

                entity.Property(e => e.Ins1_Name_).IsUnicode(false);

                entity.Property(e => e.Ins2_Name_).IsUnicode(false);

                entity.Property(e => e.Insurance_1_).IsUnicode(false);

                entity.Property(e => e.Insurance_2_).IsUnicode(false);

                entity.Property(e => e.Inv___________).IsUnicode(false);

                entity.Property(e => e.Last_Billed_).IsUnicode(false);

                entity.Property(e => e.Name_________________).IsUnicode(false);

                entity.Property(e => e.Sales_Group1).IsUnicode(false);

                entity.Property(e => e.Srv_date__).IsUnicode(false);

                entity.Property(e => e.Trn_date__).IsUnicode(false);

                entity.Property(e => e.type____).IsUnicode(false);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}