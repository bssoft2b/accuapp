// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace InventoryDB
{
    public partial class InventoryContext : DbContext
    {
        public InventoryContext()
        {
        }

        public InventoryContext(DbContextOptions<InventoryContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Account> Accounts { get; set; }
        public virtual DbSet<DeliveryAddress> DeliveryAddresses { get; set; }
        public virtual DbSet<DeliveryMethod> DeliveryMethods { get; set; }
        public virtual DbSet<Group> Groups { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<LabDepartment> LabDepartments { get; set; }
        public virtual DbSet<LabItem> LabItems { get; set; }
        public virtual DbSet<LabSalesOrder> LabSalesOrders { get; set; }
        public virtual DbSet<LabSalesOrderLine> LabSalesOrderLines { get; set; }
        public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; }
        public virtual DbSet<PurchaseOrderLine> PurchaseOrderLines { get; set; }
        public virtual DbSet<ReturnOrder> ReturnOrders { get; set; }
        public virtual DbSet<ReturnOrderLine> ReturnOrderLines { get; set; }
        public virtual DbSet<SalesOrder> SalesOrders { get; set; }
        public virtual DbSet<SalesOrderLine> SalesOrderLines { get; set; }
        public virtual DbSet<SalesOrderStatus> SalesOrderStatuses { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }
        public virtual DbSet<VendorItem> VendorItems { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=bssoft2b;Initial Catalog=Inventory;Persist Security Info=True;User ID=sa;Password=Xamarin@1964");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Account>(entity =>
            {
                entity.Property(e => e.AccountID).ValueGeneratedNever();

                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.City).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.Suite).IsUnicode(false);

                entity.Property(e => e.Telephone).IsUnicode(false);

                entity.Property(e => e.Zip).IsUnicode(false);

                entity.HasOne(d => d.Group)
                    .WithMany(p => p.Accounts)
                    .HasForeignKey(d => d.GroupID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Accounts__GroupI__412EB0B6");
            });

            modelBuilder.Entity<DeliveryAddress>(entity =>
            {
                entity.Property(e => e.Address).IsUnicode(false);

                entity.Property(e => e.City).IsUnicode(false);

                entity.Property(e => e.DeliveryAddressName).IsUnicode(false);

                entity.Property(e => e.State).IsUnicode(false);

                entity.Property(e => e.Suite).IsUnicode(false);

                entity.Property(e => e.Zip).IsUnicode(false);

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.DeliveryAddresses)
                    .HasForeignKey(d => d.AccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__DeliveryA__Accou__440B1D61");
            });

            modelBuilder.Entity<DeliveryMethod>(entity =>
            {
                entity.Property(e => e.DeliveryMethodID).ValueGeneratedNever();

                entity.Property(e => e.DeliveryMethodDescription).IsUnicode(false);

                entity.Property(e => e.DeliveryMethodName).IsUnicode(false);
            });

            modelBuilder.Entity<Group>(entity =>
            {
                entity.Property(e => e.GroupID).ValueGeneratedNever();

                entity.Property(e => e.Manager).IsUnicode(false);

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.SalesRep).IsUnicode(false);

                entity.Property(e => e.Telephone).IsUnicode(false);
            });

            modelBuilder.Entity<Item>(entity =>
            {
                entity.Property(e => e.ItemID).IsUnicode(false);

                entity.Property(e => e.ItemDescription).IsUnicode(false);

                entity.Property(e => e.ItemName).IsUnicode(false);

                entity.Property(e => e.ManufacturerID).HasDefaultValueSql("((15))");

                entity.Property(e => e.UnitOfMeasure).IsUnicode(false);
            });

            modelBuilder.Entity<LabDepartment>(entity =>
            {
                entity.Property(e => e.Department).IsUnicode(false);
            });

            modelBuilder.Entity<LabItem>(entity =>
            {
                entity.Property(e => e.AddedBy).IsUnicode(false);

                entity.Property(e => e.ItemDescription).IsUnicode(false);

                entity.Property(e => e.ItemID).ValueGeneratedOnAdd();

                entity.Property(e => e.ItemName).IsUnicode(false);

                entity.Property(e => e.UnitOfMeasure).IsUnicode(false);

                entity.Property(e => e.UpdatedBy).IsUnicode(false);
            });

            modelBuilder.Entity<LabSalesOrder>(entity =>
            {
                entity.Property(e => e.CreatedBy).IsUnicode(false);

                entity.Property(e => e.OrderNote).IsUnicode(false);

                entity.Property(e => e.UpdatedBy).IsUnicode(false);
            });

            modelBuilder.Entity<PurchaseOrder>(entity =>
            {
                entity.Property(e => e.Memo).IsUnicode(false);

                entity.Property(e => e.OrderNote).IsUnicode(false);

                entity.Property(e => e.ShipTo).IsUnicode(false);

                entity.HasOne(d => d.BackOrderPurchaseOrder)
                    .WithMany(p => p.InverseBackOrderPurchaseOrder)
                    .HasForeignKey(d => d.BackOrderPurchaseOrderID)
                    .HasConstraintName("FK__PurchaseO__BackO__2E1BDC42");

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.PurchaseOrders)
                    .HasForeignKey(d => d.VendorID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__PurchaseO__Vendo__3A4CA8FD");
            });

            modelBuilder.Entity<PurchaseOrderLine>(entity =>
            {
                entity.HasOne(d => d.PurchaseOrder)
                    .WithMany(p => p.PurchaseOrderLines)
                    .HasForeignKey(d => d.PurchaseOrderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__PurchaseO__Purch__3F115E1A");

                entity.HasOne(d => d.VendorItem)
                    .WithMany(p => p.PurchaseOrderLines)
                    .HasForeignKey(d => d.VendorItemID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__PurchaseO__Vendo__3E1D39E1");
            });

            modelBuilder.Entity<ReturnOrder>(entity =>
            {
                entity.HasOne(d => d.Account)
                    .WithMany(p => p.ReturnOrders)
                    .HasForeignKey(d => d.AccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ReturnOrd__Accou__656C112C");
            });

            modelBuilder.Entity<ReturnOrderLine>(entity =>
            {
                entity.Property(e => e.ItemID).IsUnicode(false);

                entity.HasOne(d => d.ReturnOrder)
                    .WithMany(p => p.ReturnOrderLines)
                    .HasForeignKey(d => d.ReturnOrderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__ReturnOrd__Retur__40058253");
            });

            modelBuilder.Entity<SalesOrder>(entity =>
            {
                entity.Property(e => e.CreatedBy).IsUnicode(false);

                entity.Property(e => e.OrderNote).IsUnicode(false);

                entity.Property(e => e.SalesRep).IsUnicode(false);

                entity.Property(e => e.ShippingNote).IsUnicode(false);

                entity.Property(e => e.TrackingNumber).IsUnicode(false);

                entity.Property(e => e.UpdatedBy).IsUnicode(false);

                entity.HasOne(d => d.Account)
                    .WithMany(p => p.SalesOrders)
                    .HasForeignKey(d => d.AccountID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__SalesOrde__Accou__5070F446");

                entity.HasOne(d => d.BackOrderSalesOrder)
                    .WithMany(p => p.InverseBackOrderSalesOrder)
                    .HasForeignKey(d => d.BackOrderSalesOrderID)
                    .HasConstraintName("FK__SalesOrde__BackO__4F7CD00D");

                entity.HasOne(d => d.DeliveryAddress)
                    .WithMany(p => p.SalesOrders)
                    .HasForeignKey(d => d.DeliveryAddressID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__SalesOrde__Deliv__3D2915A8");

                entity.HasOne(d => d.DeliveryMethod)
                    .WithMany(p => p.SalesOrders)
                    .HasForeignKey(d => d.DeliveryMethodID)
                    .HasConstraintName("FK__SalesOrde__Deliv__4E88ABD4");

                entity.HasOne(d => d.SalesOrderStatus)
                    .WithMany(p => p.SalesOrders)
                    .HasForeignKey(d => d.SalesOrderStatusID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__SalesOrde__Sales__4AB81AF0");
            });

            modelBuilder.Entity<SalesOrderLine>(entity =>
            {
                entity.Property(e => e.ItemID).IsUnicode(false);

                entity.HasOne(d => d.SalesOrder)
                    .WithMany(p => p.SalesOrderLines)
                    .HasForeignKey(d => d.SalesOrderID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__SalesOrde__Sales__40F9A68C");
            });

            modelBuilder.Entity<SalesOrderStatus>(entity =>
            {
                entity.Property(e => e.SalesOrderStatusID).ValueGeneratedNever();

                entity.Property(e => e.StatusDescription).IsUnicode(false);

                entity.Property(e => e.StatusName).IsUnicode(false);
            });

            modelBuilder.Entity<Vendor>(entity =>
            {
                entity.Property(e => e.VendorAccount)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('')");

                entity.Property(e => e.VendorAddress).IsUnicode(false);

                entity.Property(e => e.VendorCity).IsUnicode(false);

                entity.Property(e => e.VendorEmail).IsUnicode(false);

                entity.Property(e => e.VendorName).IsUnicode(false);

                entity.Property(e => e.VendorPhone).IsUnicode(false);

                entity.Property(e => e.VendorState).IsUnicode(false);

                entity.Property(e => e.VendorSuite).IsUnicode(false);

                entity.Property(e => e.VendorZip).IsUnicode(false);
            });

            modelBuilder.Entity<VendorItem>(entity =>
            {
                entity.Property(e => e.ItemID).IsUnicode(false);

                entity.Property(e => e.QuantityMultiplier).HasDefaultValueSql("((1))");

                entity.Property(e => e.VendorItemIdentifier).IsUnicode(false);

                entity.Property(e => e.VendorItemName).IsUnicode(false);

                entity.HasOne(d => d.Vendor)
                    .WithMany(p => p.VendorItems)
                    .HasForeignKey(d => d.VendorID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__VendorIte__Vendo__3B40CD36");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}